{"version":3,"file":"static/js/576.e6500857.chunk.js","mappings":"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","sources":["views/dashboard/Avini viz.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Form } from 'protected-aidaforms';\r\nimport { json, useParams, withRouter } from 'react-router-dom'; // import the useParams hook\r\nimport jdt from './InitialEvaluation';\r\nimport UtenteDataService from \"C:/Users/ines_/fisiosys/frontend/src/services/tutorial.service.js\"\r\nimport swal from 'sweetalert';\r\nimport { replaceValuesJDT } from './SavedValues geral.js';\r\n\r\nconsole.log('first', jdt);\r\n\r\nconst Aviniviz = () => {\r\n\r\n  const { num_sequencial } = useParams(); // get the value of num_sequencial from the route parameter\r\n  const { idcomposition } = useParams();\r\n\r\n  const [currentUtente, setCurrentUtente] = useState({\r\n    num_sequencial,\r\n    nome_utente: '',\r\n    data_nascimento: '',\r\n    sexo: ''\r\n  });\r\n\r\n  const [initialComposition, setInitialComposition] = useState({\r\n    num_sequencial,\r\n    id_initialcomposition: ''\r\n  });\r\n\r\n  const [dtaCriada, setDtaCriada] = useState(null);\r\n  const [dtaEncerrada, setDtaEncerrada] = useState(null);\r\n  const formRef = useRef(null); // add a reference to the form component\r\n\r\n  useEffect(() => {\r\n    UtenteDataService.get(num_sequencial)\r\n      .then(response => {\r\n        setCurrentUtente(prevState => ({ ...prevState, nome_utente: response.data.nome_utente, data_nascimento: response.data.data_nascimento, sexo: response.data.sexo }));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }, [num_sequencial]);\r\n\r\n  useEffect(() => {\r\n    UtenteDataService.getidAvini(num_sequencial)\r\n      .then(response => {\r\n        setInitialComposition(prevState => ({ ...prevState, id_initialcomposition: response.data.id_initialcomposition }));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        swal({\r\n          title: 'Erro!',\r\n          text: 'Houve um problema ao obter o id!',\r\n          icon: 'error',\r\n        });\r\n      });\r\n  }, [num_sequencial]);\r\n\r\n  const date = new Date(currentUtente.data_nascimento);\r\n  const formattedDate = date.toLocaleDateString('pt-PT', { day: '2-digit', month: '2-digit', year: 'numeric' });\r\n\r\n\r\n  const referenceModelData = [\r\n    {\"itemName\": \"NÃºmero sequencial\",\r\n    \"item\": \"num_sequencial\",\r\n    \"value\": currentUtente.num_sequencial\r\n    },\r\n    {\"itemName\": \"Nome\",\r\n    \"item\": \"nome_utente\",\r\n    \"value\": currentUtente.nome_utente\r\n    },\r\n    {\r\n     \"itemName\": \"Data de nascimento\",\r\n     \"item\": \"data_nascimento\",\r\n     \"value\": currentUtente.data_nascimento\r\n   }\r\n    ];\r\n\r\n  const [formValues, setFormValues] = useState({\r\n    num_sequencial,\r\n    idcomposition,\r\n    composition: '',\r\n    createdat:'',\r\n    isCompleted:''\r\n  });\r\n\r\n  const [newJDT, setNewJDT] = useState(jdt);\r\n\r\n  useEffect(() => {\r\n    setNewJDT(jdt);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.clear(); // clear console on every render \r\n    if (!formValues.composition) { // check if composition is empty or null\r\n      console.log('using original jdt');\r\n      console.log(formValues.num_sequencial);\r\n      setNewJDT(jdt); // use the original jdt template\r\n      console.log('original',jdt);\r\n      console.log('the new',newJDT);\r\n    } else {\r\n      const compositionval = JSON.parse(formValues.composition);\r\n      const newJDT = replaceValuesJDT(jdt, compositionval);\r\n      console.log('using replaced jdt', newJDT);\r\n      setNewJDT(newJDT);\r\n    }\r\n  }, [formValues.composition]);\r\n  \r\n  useEffect(() => {\r\n    UtenteDataService.getSubAvini(num_sequencial)\r\n    .then(response => {\r\n      setFormValues(prevState => ({ ...prevState, num_sequencial: response.data.num_sequencial, composition: response.data.composition, createdat: response.data.createdat, isCompleted: response.data.isCompleted }));\r\n        //const compositionval = JSON.parse(response.data.composition);\r\n        console.log(\"newJDT\", newJDT);\r\n        //setFormValues(compositionval);\r\n      })\r\n      .catch((error) => {\r\n        console.log('Novo forms');\r\n      });\r\n  }, [num_sequencial]);\r\n\r\n  useEffect(() => {\r\n    const pageReloaded = sessionStorage.getItem('pageReloaded');\r\n    if (!pageReloaded) {\r\n      sessionStorage.setItem('pageReloaded', true);\r\n      window.location.reload();\r\n    } else {\r\n      sessionStorage.removeItem('pageReloaded');\r\n    }\r\n  }, []);\r\n\r\n  const createdDate = new Date(formValues.createdat);\r\n  const formattedcreatedDate = createdDate.toLocaleString('pt-PT', {\r\n    day: '2-digit',\r\n    month: '2-digit',\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit'\r\n  });\r\n\r\n  const estado = formValues.isCompleted === true || formValues.isCompleted === 1 ? \"Terminado\" : \"Rascunho\";\r\n\r\n  //const novoJDT = replaceValuesJDT(jdt, compositionval);\r\n  //console.log(\"new:\", novoJDT);\r\n\r\n  //console.log(\"Valores:\", formValues.composition);\r\n  //const compositionval = JSON.parse(formValues.composition);\r\n  //const newJDT = replaceValuesJDT(jdt, compositionval);\r\n  //const newJDT = replaceValuesJDT(jdt, formValues.composition);\r\n\r\n  return ( \r\n    <>\r\n      {currentUtente.nome_utente !== '' && initialComposition.id_initialcomposition !== '' && newJDT !== '' && (\r\n        <div>\r\n        <Form\r\n        ref={formRef} // pass the reference to the form component\r\n        onSubmit={(values, changedFields) => console.log(\"SUBMITTED VALUES: \", values, \"CHANGED FIELDS: \", changedFields)}\r\n        onSave={(values, changedFields) => console.log(\"SAVED VALUES: \", values, \"CHANGED FIELDS: \", changedFields)}\r\n        onCancel={status => console.log(\"CANCELLED:\", status)}\r\n        template={newJDT}\r\n        dlm={{}}\r\n        showPrint={true}\r\n        editMode={false}\r\n        professionalTasks={[\"Registar Pedido\", \"Consultar Pedido\", \"Anular Pedido\"]}\r\n        canSubmit={true}\r\n        canSave={true}\r\n        canCancel={true}\r\n        patientData={{\r\n          \"numSequencial\": currentUtente.num_sequencial,\r\n          \"nome\": currentUtente.nome_utente,\r\n          \"dtaNascimento\": formattedDate,\r\n          \"sexo\": currentUtente.sexo,\r\n          \"processo\":  formValues.idcomposition\r\n          }}\r\n          reportData={{\r\n          estado: estado,\r\n          dtaCriada: formattedcreatedDate,\r\n          realizada: \"InÃªs Silva\",\r\n          responsavel: \"InÃªs Silva\"\r\n          }}\r\n        referenceModel={[\r\n         {\"itemName\": \"NÃºmero sequencial\",\r\n         \"item\": \"num_seq\",\r\n         \"value\": currentUtente.num_sequencial,\r\n         \"formVisible\": true\r\n         },\r\n         {\"itemName\": \"Nome\",\r\n         \"item\": \"Nome\",\r\n         \"value\": currentUtente.nome_utente,\r\n         \"formVisible\": true\r\n         },\r\n         {\r\n          \"itemName\": \"Data de nascimento\",\r\n          \"item\": \"dtaNascimento\",\r\n          \"value\": formattedDate,\r\n          \"formVisible\": true\r\n        }\r\n         ]}\r\n         submitButtonDisabled={false}\r\n         saveButtonDisabled={false}\r\n         />\r\n         <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor:'white' }}>\r\n          <br></br><br></br><br></br><br></br>\r\n          <button onClick={() => window.history.back()} type=\"button\" className=\"btn btn-primary\" \r\n          style={{\r\n            backgroundColor: \"#60b1e0\",\r\n            borderColor: \"#60b1e0\",\r\n            borderRadius: \"0.15rem\",\r\n            width: \"4.2rem\",\r\n            height: \"2.2rem\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            color: \"#fff\",\r\n            fontSize: \"0.8rem\"\r\n          }}>\r\n            Voltar\r\n          </button>\r\n          <br></br><br></br><br></br><br></br><br></br>\r\n        </div>\r\n         </div>\r\n         )}\r\n       </>\r\n     );\r\n  \r\n};\r\n\r\nexport default Aviniviz;\r\n"],"names":["console","log","jdt","num_sequencial","useParams","idcomposition","useState","nome_utente","data_nascimento","sexo","currentUtente","setCurrentUtente","id_initialcomposition","initialComposition","setInitialComposition","formRef","useRef","useEffect","UtenteDataService","then","response","prevState","data","catch","error","swal","title","text","icon","formattedDate","Date","toLocaleDateString","day","month","year","composition","createdat","isCompleted","formValues","setFormValues","newJDT","setNewJDT","clear","compositionval","JSON","parse","replaceValuesJDT","sessionStorage","getItem","removeItem","setItem","window","location","reload","formattedcreatedDate","toLocaleString","hour","minute","second","estado","ref","onSubmit","values","changedFields","onSave","onCancel","status","template","dlm","showPrint","editMode","professionalTasks","canSubmit","canSave","canCancel","patientData","reportData","dtaCriada","realizada","responsavel","referenceModel","submitButtonDisabled","saveButtonDisabled","style","display","justifyContent","alignItems","backgroundColor","onClick","history","back","type","className","borderColor","borderRadius","width","height","color","fontSize"],"sourceRoot":""}