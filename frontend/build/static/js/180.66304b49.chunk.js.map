{"version":3,"file":"static/js/180.66304b49.chunk.js","mappings":"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","sources":["views/dashboard/All Topics.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { FaAngleRight } from 'react-icons/fa';\r\n\r\n\r\nconst Record = (props) => {\r\n  const topicsArray = Object.keys(props.record.topics);\r\n  const halfLength = Math.ceil(topicsArray.length / 2);\r\n  const firstHalf = topicsArray.slice(0, halfLength);\r\n  const secondHalf = topicsArray.slice(halfLength);\r\n\r\n  const redirectToTopicPage = (topic) => {\r\n    // Modify the URL to the desired topic page\r\n    const topicPageURL = `http:/#/topics/${topic}`;\r\n    window.open(topicPageURL, \"_blank\");\r\n  };\r\n\r\n  return (\r\n\r\n    <table className=\"home-table1\" style={{ display: 'flex', alignItems: 'center', width:'100%', minWidth: '1280px', maxWidth:'1280px' }}>\r\n    <div className=\"row align-items-start\" style={{ display: 'flex', alignItems: 'center', width: '100%', minWidth: '1280px', maxWidth: '1280px' }}>\r\n      <div className=\"col-lg-4 col-md-4 col-sm-12\">\r\n        <table>\r\n          <tbody>\r\n          {props.filteredTopics.slice(0, Math.ceil(props.filteredTopics.length / 3)).map((topic, index) => (\r\n            <table key={topic} className=\"home-table2\" style={{ marginTop:'20px', marginBottom:'20px', marginLeft:'65px', alignItems: 'center', width: '100%', minWidth: '340px', maxWidth: '340px' }}>\r\n              <thead>\r\n                <tr>\r\n                  <th style={{ display: 'flex', padding:'12px' }}>\r\n                    <span style={{ marginLeft:'8px' ,marginRight: 'auto' }}>{topic}</span>\r\n                    <a style={{ marginRight: '8px' }} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                      <FaAngleRight />\r\n                    </a>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td style={{ display: 'flex', padding:'12px' }}>\r\n                  <span style={{ marginLeft:'8px' , marginRight: 'auto' }}>Total Tweets</span>\r\n                  <span style={{ marginRight: '8px' }}>{props.record.topics[topic]}</span>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"col-lg-4 col-md-4 col-sm-12\">\r\n        <table>\r\n          <tbody>\r\n          {props.filteredTopics.slice(Math.ceil(props.filteredTopics.length / 3), Math.ceil(props.filteredTopics.length / 3 * 2)).map((topic, index) => (\r\n            <table key={topic} className=\"home-table2\" style={{ marginTop:'20px', marginBottom:'20px', marginLeft:'45px', alignItems: 'center', width: '100%', minWidth: '340px', maxWidth: '340px' }}>\r\n            <thead>\r\n                <tr>\r\n                  <th style={{ display: 'flex', padding:'12px' }}>\r\n                    <span style={{ marginLeft:'8px' ,marginRight: 'auto' }}>{topic}</span>\r\n                    <a style={{ marginRight: '8px' }} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                      <FaAngleRight />\r\n                    </a>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td style={{ display: 'flex', padding:'12px' }}>\r\n                  <span style={{ marginLeft:'8px' , marginRight: 'auto' }}>Total Tweets</span>\r\n                  <span style={{ marginRight: '8px' }}>{props.record.topics[topic]}</span>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n          </table>\r\n  ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"col-lg-4 col-md-4 col-sm-12\">\r\n        <table>\r\n          <tbody>\r\n          {props.filteredTopics.slice(Math.ceil(props.filteredTopics.length / 3 * 2)).map((topic, index) => (\r\n            <table key={topic} className=\"home-table2\" style={{ marginTop:'20px', marginBottom:'20px', marginLeft:'20px', alignItems: 'center', width: '100%', minWidth: '340px', maxWidth: '340px' }}>\r\n            <thead>\r\n                <tr>\r\n                  <th style={{ display: 'flex', padding:'12px' }}>\r\n                    <span style={{ marginLeft:'8px' ,marginRight: 'auto' }}>{topic}</span>\r\n                    <a style={{ marginRight: '8px' }} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                      <FaAngleRight />\r\n                    </a>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td style={{ display: 'flex', padding:'12px' }}>\r\n                  <span style={{ marginLeft:'8px' , marginRight: 'auto' }}>Total Tweets</span>\r\n                  <span style={{ marginRight: '8px'}}>{props.record.topics[topic]}</span>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n          </table>\r\n  ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default function Sentiment() {\r\n  const [records, setRecords] = useState([]);\r\n  const [selectedLetter, setSelectedLetter] = useState('');\r\n  const [availableLetters, setAvailableLetters] = useState(new Set()); // Define availableLetters state\r\n\r\n  const handleLetterClick = (letter) => {\r\n    setSelectedLetter(letter);\r\n\r\n    let newAvailableLetters = new Set();\r\n    records.forEach((record) => {\r\n      const topicsArray = Object.keys(record.topics);\r\n      topicsArray.forEach((topic) => {\r\n        newAvailableLetters.add(topic[0].toUpperCase());\r\n      });\r\n    });\r\n    setAvailableLetters(newAvailableLetters);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"https://bee-aware-08ab5a1c994e.herokuapp.com/api/statistics_general/\");\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`An error occurred: ${response.statusText}`);\r\n        }\r\n\r\n        const records = await response.json();\r\n        setRecords(records);\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n\r\n    getRecords();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let newAvailableLetters = new Set();\r\n    records.forEach((record) => {\r\n      const topicsArray = Object.keys(record.topics);\r\n      topicsArray.forEach((topic) => {\r\n        if (topic.toLowerCase().startsWith(selectedLetter.toLowerCase())) {\r\n          newAvailableLetters.add(topic[0].toUpperCase());\r\n        }\r\n      });\r\n    });\r\n    setAvailableLetters(newAvailableLetters);\r\n  }, [selectedLetter, records]);\r\n\r\n  function recordList() {\r\n    return records.map((record) => {\r\n      const topicsArray = Object.keys(record.topics);\r\n      const filteredTopics = selectedLetter\r\n        ? topicsArray.filter((topic) =>\r\n            topic.toLowerCase().startsWith(selectedLetter.toLowerCase())\r\n          )\r\n        : topicsArray;\r\n\r\n      return (\r\n        <Record\r\n          record={record}\r\n          key={record._id}\r\n          filteredTopics={filteredTopics}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          className={selectedLetter === '' ? 'active' : ''}\r\n          onClick={() => handleLetterClick('')}\r\n          style={{padding:'8px 19px'}}>\r\n          All\r\n        </button>\r\n        {Array.from({ length: 26 }, (_, index) => (\r\n          <button\r\n            key={index}\r\n            className={selectedLetter === String.fromCharCode(65 + index) ? 'active' : ''}\r\n            onClick={() => handleLetterClick(String.fromCharCode(65 + index))}\r\n            style={{padding:'8px 17.6px'}}>\r\n            {String.fromCharCode(65 + index)}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <br />\r\n      <div>\r\n        {recordList()}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":["Record","props","topicsArray","Object","keys","record","topics","halfLength","Math","ceil","length","redirectToTopicPage","slice","topic","topicPageURL","window","open","className","style","display","alignItems","width","minWidth","maxWidth","filteredTopics","map","index","marginTop","marginBottom","marginLeft","padding","marginRight","href","onClick","Sentiment","useState","records","setRecords","selectedLetter","setSelectedLetter","Set","setAvailableLetters","handleLetterClick","letter","newAvailableLetters","forEach","add","toUpperCase","useEffect","fetch","response","ok","Error","statusText","json","alert","message","getRecords","toLowerCase","startsWith","Array","from","_","String","fromCharCode","filter","_id"],"sourceRoot":""}