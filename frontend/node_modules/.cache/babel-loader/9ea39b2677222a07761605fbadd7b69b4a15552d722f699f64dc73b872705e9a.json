{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ines_/fisiosys/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nvar buildDurationValidation = function buildDurationValidation(item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) {\n  var checkMandatory = handleIfMandatoryValidation(item);\n  var pathLabelArray = pathLabel.split(\"-\");\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\n      if (item.units.range) {\n        if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"false\" && !item.units.range.upper && item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"min-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\n              });\n            }\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n            if (passedRequired) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          });\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && !item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"max-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\n              });\n            }\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n            if (passedRequired) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          });\n        } else if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"max-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\n              });\n            }\n          }).test(\"min-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\n              });\n            }\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n            if (passedRequired) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          });\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"false\" && item.units.range.upper && item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"less-than\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value < item.units.range.upper) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inferior a \" + item.units.range.upper\n              });\n            }\n          }).test(\"more-than\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value > item.units.range.lower) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número superior a \" + item.units.range.lower\n              });\n            }\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n            if (passedRequired) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          });\n        }\n      } else if (!item.units.range) {\n        // não tem range\n        validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          if (value === undefined || value === \"\") {\n            return true;\n          }\n          if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n            return true;\n          } else {\n            return false;\n          }\n        }).test(\"required\", \"Campo obrigatório\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n          if (passedRequired) {\n            return true;\n          } else {\n            return false;\n          }\n        }).test(\"section-validation\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            var sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"at-least-one\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            var sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        });\n      }\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    var pathArray = _toConsumableArray(pathLabelArray);\n    pathArray.pop();\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      pathArray.push(\"value\");\n      var pathLabelDuration = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var field = this.parent[pathLabelDuration];\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          var i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            var rule = item.ruleMandatory[i];\n            var mandatory = void 0;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              var j = void 0;\n              var conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                var condition = conditionsArray[j];\n                var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              var _j = void 0;\n              var _conditionsArray = rule[\"$and\"];\n              for (_j = 0; _j < _conditionsArray.length; _j++) {\n                var _condition = _conditionsArray[_j];\n                var _path = _condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                var _conditionValidation = handleConditionValidation(_condition, this.parent[_path]);\n                if (!_conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                  return obj.value !== \"\";\n                }).length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                  return obj.value.getCurrentContent().hasText();\n                }).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\n      pathArray.push(\"unit\");\n      var pathLabelUnit = pathArray.join(\"-\");\n      if (item.units.range) {\n        if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"false\" && !item.units.range.upper && item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"min-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\n              });\n            }\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var field = this.parent[pathLabelUnit];\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n              return true;\n            } else if (field !== undefined && value === undefined) {\n              return false;\n            } else if (field === undefined && value !== undefined) {\n              return true;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (!checkMandatory) {\n              return true;\n            } else {\n              var i;\n              for (i = 0; i < item.ruleMandatory.length; i++) {\n                var rule = item.ruleMandatory[i];\n                var mandatory = void 0;\n                if (rule[\"$or\"]) {\n                  mandatory = false;\n                  var j = void 0;\n                  var conditionsArray = rule[\"$or\"];\n                  for (j = 0; j < conditionsArray.length; j++) {\n                    var condition = conditionsArray[j];\n                    var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                    if (conditionValidation) {\n                      mandatory = true;\n                      break;\n                    }\n                  }\n                } else if (rule[\"$and\"]) {\n                  mandatory = true;\n                  var _j2 = void 0;\n                  var _conditionsArray2 = rule[\"$and\"];\n                  for (_j2 = 0; _j2 < _conditionsArray2.length; _j2++) {\n                    var _condition2 = _conditionsArray2[_j2];\n                    var _path2 = _condition2[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var _conditionValidation2 = handleConditionValidation(_condition2, this.parent[_path2]);\n                    if (!_conditionValidation2) {\n                      mandatory = false;\n                      break;\n                    }\n                  }\n                }\n                if (!mandatory) {\n                  return true;\n                } else {\n                  if (value === \"\" || value === undefined) {\n                    return false;\n                  } else if (Array.isArray(value)) {\n                    if (value.length === 0) {\n                      return false;\n                    } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                      return obj.value !== \"\";\n                    }).length === 0) {\n                      return false;\n                    } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                      return obj.value.getCurrentContent().hasText();\n                    }).length === 0) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else if (value._immutable !== undefined) {\n                    if (!value.getCurrentContent().hasText()) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"false\" && item.units.range.upper && item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"less-than\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value < item.units.range.upper) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inferior a \" + item.units.range.upper\n              });\n            }\n          }).test(\"more-than\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value > item.units.range.lower) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número superior a \" + item.units.range.lower\n              });\n            }\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var field = this.parent[pathLabelUnit];\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n              return true;\n            } else if (field !== undefined && value === undefined) {\n              return false;\n            } else if (field === undefined && value !== undefined) {\n              return true;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (!checkMandatory) {\n              return true;\n            } else {\n              var i;\n              for (i = 0; i < item.ruleMandatory.length; i++) {\n                var rule = item.ruleMandatory[i];\n                var mandatory = void 0;\n                if (rule[\"$or\"]) {\n                  mandatory = false;\n                  var j = void 0;\n                  var conditionsArray = rule[\"$or\"];\n                  for (j = 0; j < conditionsArray.length; j++) {\n                    var condition = conditionsArray[j];\n                    var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                    if (conditionValidation) {\n                      mandatory = true;\n                      break;\n                    }\n                  }\n                } else if (rule[\"$and\"]) {\n                  mandatory = true;\n                  var _j3 = void 0;\n                  var _conditionsArray3 = rule[\"$and\"];\n                  for (_j3 = 0; _j3 < _conditionsArray3.length; _j3++) {\n                    var _condition3 = _conditionsArray3[_j3];\n                    var _path3 = _condition3[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var _conditionValidation3 = handleConditionValidation(_condition3, this.parent[_path3]);\n                    if (!_conditionValidation3) {\n                      mandatory = false;\n                      break;\n                    }\n                  }\n                }\n                if (!mandatory) {\n                  return true;\n                } else {\n                  if (value === \"\" || value === undefined) {\n                    return false;\n                  } else if (Array.isArray(value)) {\n                    if (value.length === 0) {\n                      return false;\n                    } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                      return obj.value !== \"\";\n                    }).length === 0) {\n                      return false;\n                    } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                      return obj.value.getCurrentContent().hasText();\n                    }).length === 0) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else if (value._immutable !== undefined) {\n                    if (!value.getCurrentContent().hasText()) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && !item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"max-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\n              });\n            }\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var field = this.parent[pathLabelUnit];\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n              return true;\n            } else if (field !== undefined && value === undefined) {\n              return false;\n            } else if (field === undefined && value !== undefined) {\n              return true;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (!checkMandatory) {\n              return true;\n            } else {\n              var i;\n              for (i = 0; i < item.ruleMandatory.length; i++) {\n                var rule = item.ruleMandatory[i];\n                var mandatory = void 0;\n                if (rule[\"$or\"]) {\n                  mandatory = false;\n                  var j = void 0;\n                  var conditionsArray = rule[\"$or\"];\n                  for (j = 0; j < conditionsArray.length; j++) {\n                    var condition = conditionsArray[j];\n                    var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                    if (conditionValidation) {\n                      mandatory = true;\n                      break;\n                    }\n                  }\n                } else if (rule[\"$and\"]) {\n                  mandatory = true;\n                  var _j4 = void 0;\n                  var _conditionsArray4 = rule[\"$and\"];\n                  for (_j4 = 0; _j4 < _conditionsArray4.length; _j4++) {\n                    var _condition4 = _conditionsArray4[_j4];\n                    var _path4 = _condition4[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var _conditionValidation4 = handleConditionValidation(_condition4, this.parent[_path4]);\n                    if (!_conditionValidation4) {\n                      mandatory = false;\n                      break;\n                    }\n                  }\n                }\n                if (!mandatory) {\n                  return true;\n                } else {\n                  if (value === \"\" || value === undefined) {\n                    return false;\n                  } else if (Array.isArray(value)) {\n                    if (value.length === 0) {\n                      return false;\n                    } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                      return obj.value !== \"\";\n                    }).length === 0) {\n                      return false;\n                    } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                      return obj.value.getCurrentContent().hasText();\n                    }).length === 0) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else if (value._immutable !== undefined) {\n                    if (!value.getCurrentContent().hasText()) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        } else if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && item.units.range.lower) {\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).test(\"max-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\n              });\n            }\n          }).test(\"min-number\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (value === undefined || value === \"\") {\n              return true;\n            }\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\n              return true;\n            } else {\n              return this.createError({\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\n              });\n            }\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var field = this.parent[pathLabelUnit];\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n              return true;\n            } else if (field !== undefined && value === undefined) {\n              return false;\n            } else if (field === undefined && value !== undefined) {\n              return true;\n            }\n          }).test(\"section-validation\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"at-least-one\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n            if (res === true) {\n              return true;\n            } else {\n              var sectionsError = res;\n              if (sectionsError.length > 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              } else if (sectionsError.length === 1) {\n                return this.createError({\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n                });\n              }\n            }\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n            var isVisible = handleRules(item, this.parent, \"visibility\");\n            if (!isVisible) {\n              return true;\n            }\n            if (!checkMandatory) {\n              return true;\n            } else {\n              var i;\n              for (i = 0; i < item.ruleMandatory.length; i++) {\n                var rule = item.ruleMandatory[i];\n                var mandatory = void 0;\n                if (rule[\"$or\"]) {\n                  mandatory = false;\n                  var j = void 0;\n                  var conditionsArray = rule[\"$or\"];\n                  for (j = 0; j < conditionsArray.length; j++) {\n                    var condition = conditionsArray[j];\n                    var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                    if (conditionValidation) {\n                      mandatory = true;\n                      break;\n                    }\n                  }\n                } else if (rule[\"$and\"]) {\n                  mandatory = true;\n                  var _j5 = void 0;\n                  var _conditionsArray5 = rule[\"$and\"];\n                  for (_j5 = 0; _j5 < _conditionsArray5.length; _j5++) {\n                    var _condition5 = _conditionsArray5[_j5];\n                    var _path5 = _condition5[\"$ItemPath\"].split(\".\").join(\"-\");\n                    var _conditionValidation5 = handleConditionValidation(_condition5, this.parent[_path5]);\n                    if (!_conditionValidation5) {\n                      mandatory = false;\n                      break;\n                    }\n                  }\n                }\n                if (!mandatory) {\n                  return true;\n                } else {\n                  if (value === \"\" || value === undefined) {\n                    return false;\n                  } else if (Array.isArray(value)) {\n                    if (value.length === 0) {\n                      return false;\n                    } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                      return obj.value !== \"\";\n                    }).length === 0) {\n                      return false;\n                    } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                      return obj.value.getCurrentContent().hasText();\n                    }).length === 0) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else if (value._immutable !== undefined) {\n                    if (!value.getCurrentContent().hasText()) {\n                      return false;\n                    } else {\n                      return true;\n                    }\n                  } else {\n                    return true;\n                  }\n                }\n              }\n            }\n          });\n        }\n      } else if (!item.units.range) {\n        //não tem range\n        validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          if (value === undefined || value === \"\") {\n            return true;\n          }\n          if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\n            return true;\n          } else {\n            return false;\n          }\n        }).test(pathLabel, \"Campo obrigatório\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          var field = this.parent[pathLabelUnit];\n          if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n            return true;\n          } else if (field !== undefined && value === undefined) {\n            return false;\n          } else if (field === undefined && value !== undefined) {\n            return true;\n          }\n        }).test(\"section-validation\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            var sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"at-least-one\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            var sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n          var isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          if (!checkMandatory) {\n            return true;\n          } else {\n            var i;\n            for (i = 0; i < item.ruleMandatory.length; i++) {\n              var rule = item.ruleMandatory[i];\n              var mandatory = void 0;\n              if (rule[\"$or\"]) {\n                mandatory = false;\n                var j = void 0;\n                var conditionsArray = rule[\"$or\"];\n                for (j = 0; j < conditionsArray.length; j++) {\n                  var condition = conditionsArray[j];\n                  var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                  var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                  if (conditionValidation) {\n                    mandatory = true;\n                    break;\n                  }\n                }\n              } else if (rule[\"$and\"]) {\n                mandatory = true;\n                var _j6 = void 0;\n                var _conditionsArray6 = rule[\"$and\"];\n                for (_j6 = 0; _j6 < _conditionsArray6.length; _j6++) {\n                  var _condition6 = _conditionsArray6[_j6];\n                  var _path6 = _condition6[\"$ItemPath\"].split(\".\").join(\"-\");\n                  var _conditionValidation6 = handleConditionValidation(_condition6, this.parent[_path6]);\n                  if (!_conditionValidation6) {\n                    mandatory = false;\n                    break;\n                  }\n                }\n              }\n              if (!mandatory) {\n                return true;\n              } else {\n                if (value === \"\" || value === undefined) {\n                  return false;\n                } else if (Array.isArray(value)) {\n                  if (value.length === 0) {\n                    return false;\n                  } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                    return obj.value !== \"\";\n                  }).length === 0) {\n                    return false;\n                  } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                    return obj.value.getCurrentContent().hasText();\n                  }).length === 0) {\n                    return false;\n                  } else {\n                    return true;\n                  }\n                } else if (value._immutable !== undefined) {\n                  if (!value.getCurrentContent().hasText()) {\n                    return false;\n                  } else {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n};\nexport { buildDurationValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","handleRequiredValidation","handleRequiredSection","buildDurationValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","pathLabelArray","split","occurrences","lowerOccurrences","upperOccurrences","length","string","test","value","isVisible","parent","passedRequired","res","sectionsError","createError","message","toString","toLocaleLowerCase","units","range","lowerIncluded","upperIncluded","upper","lower","number","typeError","undefined","isNaN","Number","parseInt","pathArray","pop","push","pathLabelDuration","join","field","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","path","conditionValidation","Array","isArray","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable","pathLabelUnit"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildDurationValidation/BuildDurationValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\r\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\r\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\r\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\r\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\r\n\r\nconst buildDurationValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\r\n  const checkMandatory = handleIfMandatoryValidation(item);\r\n  let pathLabelArray = pathLabel.split(\"-\");\r\n\r\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\r\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\r\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\r\n      if (item.units.range) {\r\n        if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"false\" && !item.units.range.upper && item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"min-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\r\n              });\r\n            }\r\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n            if (passedRequired) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          });\r\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && !item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"max-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\r\n              });\r\n            }\r\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n            if (passedRequired) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          });\r\n        } else if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"max-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\r\n              });\r\n            }\r\n          }).test(\"min-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\r\n              });\r\n            }\r\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n            if (passedRequired) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          });\r\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"false\" && item.units.range.upper && item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"less-than\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value < item.units.range.upper) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número inferior a \" + item.units.range.upper\r\n              });\r\n            }\r\n          }).test(\"more-than\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value > item.units.range.lower) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número superior a \" + item.units.range.lower\r\n              });\r\n            }\r\n          }).test(\"required\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n            if (passedRequired) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      } else if (!item.units.range) {\r\n        // não tem range\r\n        validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          if (value === undefined || value === \"\") {\r\n            return true;\r\n          }\r\n\r\n          if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        }).test(\"required\", \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n          if (passedRequired) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        }).test(\"section-validation\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"at-least-one\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\r\n    let pathArray = [...pathLabelArray];\r\n    pathArray.pop();\r\n\r\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\r\n      pathArray.push(\"value\");\r\n      let pathLabelDuration = pathArray.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let field = this.parent[pathLabelDuration];\r\n\r\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\r\n          return true;\r\n        } else if (field !== undefined && value === undefined) {\r\n          return false;\r\n        } else if (field === undefined && value !== undefined) {\r\n          return true;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\r\n      pathArray.push(\"unit\");\r\n      let pathLabelUnit = pathArray.join(\"-\");\r\n\r\n      if (item.units.range) {\r\n        if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"false\" && !item.units.range.upper && item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"min-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\r\n              });\r\n            }\r\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            let field = this.parent[pathLabelUnit];\r\n\r\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\r\n              return true;\r\n            } else if (field !== undefined && value === undefined) {\r\n              return false;\r\n            } else if (field === undefined && value !== undefined) {\r\n              return true;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (!checkMandatory) {\r\n              return true;\r\n            } else {\r\n              let i;\r\n\r\n              for (i = 0; i < item.ruleMandatory.length; i++) {\r\n                const rule = item.ruleMandatory[i];\r\n                let mandatory;\r\n\r\n                if (rule[\"$or\"]) {\r\n                  mandatory = false;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$or\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (conditionValidation) {\r\n                      mandatory = true;\r\n                      break;\r\n                    }\r\n                  }\r\n                } else if (rule[\"$and\"]) {\r\n                  mandatory = true;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$and\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (!conditionValidation) {\r\n                      mandatory = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (!mandatory) {\r\n                  return true;\r\n                } else {\r\n                  if (value === \"\" || value === undefined) {\r\n                    return false;\r\n                  } else if (Array.isArray(value)) {\r\n                    if (value.length === 0) {\r\n                      return false;\r\n                    } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                      return false;\r\n                    } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else if (value._immutable !== undefined) {\r\n                    if (!value.getCurrentContent().hasText()) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"false\" && item.units.range.upper && item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"less-than\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value < item.units.range.upper) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número inferior a \" + item.units.range.upper\r\n              });\r\n            }\r\n          }).test(\"more-than\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value > item.units.range.lower) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número superior a \" + item.units.range.lower\r\n              });\r\n            }\r\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            let field = this.parent[pathLabelUnit];\r\n\r\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\r\n              return true;\r\n            } else if (field !== undefined && value === undefined) {\r\n              return false;\r\n            } else if (field === undefined && value !== undefined) {\r\n              return true;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (!checkMandatory) {\r\n              return true;\r\n            } else {\r\n              let i;\r\n\r\n              for (i = 0; i < item.ruleMandatory.length; i++) {\r\n                const rule = item.ruleMandatory[i];\r\n                let mandatory;\r\n\r\n                if (rule[\"$or\"]) {\r\n                  mandatory = false;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$or\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (conditionValidation) {\r\n                      mandatory = true;\r\n                      break;\r\n                    }\r\n                  }\r\n                } else if (rule[\"$and\"]) {\r\n                  mandatory = true;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$and\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (!conditionValidation) {\r\n                      mandatory = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (!mandatory) {\r\n                  return true;\r\n                } else {\r\n                  if (value === \"\" || value === undefined) {\r\n                    return false;\r\n                  } else if (Array.isArray(value)) {\r\n                    if (value.length === 0) {\r\n                      return false;\r\n                    } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                      return false;\r\n                    } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else if (value._immutable !== undefined) {\r\n                    if (!value.getCurrentContent().hasText()) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n        } else if (item.units.range.lowerIncluded === \"false\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && !item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"max-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\r\n              });\r\n            }\r\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            let field = this.parent[pathLabelUnit];\r\n\r\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\r\n              return true;\r\n            } else if (field !== undefined && value === undefined) {\r\n              return false;\r\n            } else if (field === undefined && value !== undefined) {\r\n              return true;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (!checkMandatory) {\r\n              return true;\r\n            } else {\r\n              let i;\r\n\r\n              for (i = 0; i < item.ruleMandatory.length; i++) {\r\n                const rule = item.ruleMandatory[i];\r\n                let mandatory;\r\n\r\n                if (rule[\"$or\"]) {\r\n                  mandatory = false;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$or\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (conditionValidation) {\r\n                      mandatory = true;\r\n                      break;\r\n                    }\r\n                  }\r\n                } else if (rule[\"$and\"]) {\r\n                  mandatory = true;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$and\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (!conditionValidation) {\r\n                      mandatory = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (!mandatory) {\r\n                  return true;\r\n                } else {\r\n                  if (value === \"\" || value === undefined) {\r\n                    return false;\r\n                  } else if (Array.isArray(value)) {\r\n                    if (value.length === 0) {\r\n                      return false;\r\n                    } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                      return false;\r\n                    } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else if (value._immutable !== undefined) {\r\n                    if (!value.getCurrentContent().hasText()) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n        } else if (item.units.range.lowerIncluded === \"true\" && item.units.range.upperIncluded === \"true\" && item.units.range.upper && item.units.range.lower) {\r\n          validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          }).test(\"max-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value <= item.units.range.upper) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número inferior ou igual a \" + item.units.range.upper\r\n              });\r\n            }\r\n          }).test(\"min-number\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (value === undefined || value === \"\") {\r\n              return true;\r\n            }\r\n\r\n            if (!isNaN(Number(value)) && value >= item.units.range.lower) {\r\n              return true;\r\n            } else {\r\n              return this.createError({\r\n                message: \"Campo inválido: deve ser um número superior ou igual a \" + item.units.range.lower\r\n              });\r\n            }\r\n          }).test(pathLabel, \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            let field = this.parent[pathLabelUnit];\r\n\r\n            if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\r\n              return true;\r\n            } else if (field !== undefined && value === undefined) {\r\n              return false;\r\n            } else if (field === undefined && value !== undefined) {\r\n              return true;\r\n            }\r\n          }).test(\"section-validation\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"at-least-one\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n            if (res === true) {\r\n              return true;\r\n            } else {\r\n              const sectionsError = res;\r\n\r\n              if (sectionsError.length > 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              } else if (sectionsError.length === 1) {\r\n                return this.createError({\r\n                  message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n                });\r\n              }\r\n            }\r\n          }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n            const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n            if (!isVisible) {\r\n              return true;\r\n            }\r\n\r\n            if (!checkMandatory) {\r\n              return true;\r\n            } else {\r\n              let i;\r\n\r\n              for (i = 0; i < item.ruleMandatory.length; i++) {\r\n                const rule = item.ruleMandatory[i];\r\n                let mandatory;\r\n\r\n                if (rule[\"$or\"]) {\r\n                  mandatory = false;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$or\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (conditionValidation) {\r\n                      mandatory = true;\r\n                      break;\r\n                    }\r\n                  }\r\n                } else if (rule[\"$and\"]) {\r\n                  mandatory = true;\r\n                  let j;\r\n                  const conditionsArray = rule[\"$and\"];\r\n\r\n                  for (j = 0; j < conditionsArray.length; j++) {\r\n                    const condition = conditionsArray[j];\r\n                    const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                    const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                    if (!conditionValidation) {\r\n                      mandatory = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (!mandatory) {\r\n                  return true;\r\n                } else {\r\n                  if (value === \"\" || value === undefined) {\r\n                    return false;\r\n                  } else if (Array.isArray(value)) {\r\n                    if (value.length === 0) {\r\n                      return false;\r\n                    } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                      return false;\r\n                    } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else if (value._immutable !== undefined) {\r\n                    if (!value.getCurrentContent().hasText()) {\r\n                      return false;\r\n                    } else {\r\n                      return true;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n      } else if (!item.units.range) {\r\n        //não tem range\r\n        validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"is-integer\", \"Campo inválido: deve ser um número inteiro\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          if (value === undefined || value === \"\") {\r\n            return true;\r\n          }\r\n\r\n          if (!isNaN(Number(value)) && value === parseInt(value, 10)) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        }).test(pathLabel, \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          let field = this.parent[pathLabelUnit];\r\n\r\n          if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\r\n            return true;\r\n          } else if (field !== undefined && value === undefined) {\r\n            return false;\r\n          } else if (field === undefined && value !== undefined) {\r\n            return true;\r\n          }\r\n        }).test(\"section-validation\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"at-least-one\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          if (!checkMandatory) {\r\n            return true;\r\n          } else {\r\n            let i;\r\n\r\n            for (i = 0; i < item.ruleMandatory.length; i++) {\r\n              const rule = item.ruleMandatory[i];\r\n              let mandatory;\r\n\r\n              if (rule[\"$or\"]) {\r\n                mandatory = false;\r\n                let j;\r\n                const conditionsArray = rule[\"$or\"];\r\n\r\n                for (j = 0; j < conditionsArray.length; j++) {\r\n                  const condition = conditionsArray[j];\r\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                  if (conditionValidation) {\r\n                    mandatory = true;\r\n                    break;\r\n                  }\r\n                }\r\n              } else if (rule[\"$and\"]) {\r\n                mandatory = true;\r\n                let j;\r\n                const conditionsArray = rule[\"$and\"];\r\n\r\n                for (j = 0; j < conditionsArray.length; j++) {\r\n                  const condition = conditionsArray[j];\r\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                  if (!conditionValidation) {\r\n                    mandatory = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (!mandatory) {\r\n                return true;\r\n              } else {\r\n                if (value === \"\" || value === undefined) {\r\n                  return false;\r\n                } else if (Array.isArray(value)) {\r\n                  if (value.length === 0) {\r\n                    return false;\r\n                  } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                    return false;\r\n                  } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                    return false;\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                } else if (value._immutable !== undefined) {\r\n                  if (!value.getCurrentContent().hasText()) {\r\n                    return false;\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                } else {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport { buildDurationValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}