{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar getDraftEditorSelectionWithNodes = require(\"./getDraftEditorSelectionWithNodes\");\n/**\r\n * Convert the current selection range to an anchor/focus pair of offset keys\r\n * and values that can be interpreted by components.\r\n */\n\nfunction getDraftEditorSelection(editorState, root) {\n  var selection = root.ownerDocument.defaultView.getSelection();\n  var anchorNode = selection.anchorNode,\n    anchorOffset = selection.anchorOffset,\n    focusNode = selection.focusNode,\n    focusOffset = selection.focusOffset,\n    rangeCount = selection.rangeCount;\n  if (\n  // No active selection.\n  rangeCount === 0 ||\n  // No selection, ever. As in, the user hasn't selected anything since\n  // opening the document.\n  anchorNode == null || focusNode == null) {\n    return {\n      selectionState: editorState.getSelection().set('hasFocus', false),\n      needsRecovery: false\n    };\n  }\n  return getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset);\n}\nmodule.exports = getDraftEditorSelection;","map":{"version":3,"names":["getDraftEditorSelectionWithNodes","require","getDraftEditorSelection","editorState","root","selection","ownerDocument","defaultView","getSelection","anchorNode","anchorOffset","focusNode","focusOffset","rangeCount","selectionState","set","needsRecovery","module","exports"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/getDraftEditorSelection.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar getDraftEditorSelectionWithNodes = require(\"./getDraftEditorSelectionWithNodes\");\r\n/**\r\n * Convert the current selection range to an anchor/focus pair of offset keys\r\n * and values that can be interpreted by components.\r\n */\r\n\r\n\r\nfunction getDraftEditorSelection(editorState, root) {\r\n  var selection = root.ownerDocument.defaultView.getSelection();\r\n  var anchorNode = selection.anchorNode,\r\n      anchorOffset = selection.anchorOffset,\r\n      focusNode = selection.focusNode,\r\n      focusOffset = selection.focusOffset,\r\n      rangeCount = selection.rangeCount;\r\n\r\n  if ( // No active selection.\r\n  rangeCount === 0 || // No selection, ever. As in, the user hasn't selected anything since\r\n  // opening the document.\r\n  anchorNode == null || focusNode == null) {\r\n    return {\r\n      selectionState: editorState.getSelection().set('hasFocus', false),\r\n      needsRecovery: false\r\n    };\r\n  }\r\n\r\n  return getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset);\r\n}\r\n\r\nmodule.exports = getDraftEditorSelection;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,gCAAgC,GAAGC,OAAO,CAAC,oCAAoC,CAAC;AACpF;AACA;AACA;AACA;;AAGA,SAASC,uBAAuB,CAACC,WAAW,EAAEC,IAAI,EAAE;EAClD,IAAIC,SAAS,GAAGD,IAAI,CAACE,aAAa,CAACC,WAAW,CAACC,YAAY,EAAE;EAC7D,IAAIC,UAAU,GAAGJ,SAAS,CAACI,UAAU;IACjCC,YAAY,GAAGL,SAAS,CAACK,YAAY;IACrCC,SAAS,GAAGN,SAAS,CAACM,SAAS;IAC/BC,WAAW,GAAGP,SAAS,CAACO,WAAW;IACnCC,UAAU,GAAGR,SAAS,CAACQ,UAAU;EAErC;EAAK;EACLA,UAAU,KAAK,CAAC;EAAI;EACpB;EACAJ,UAAU,IAAI,IAAI,IAAIE,SAAS,IAAI,IAAI,EAAE;IACvC,OAAO;MACLG,cAAc,EAAEX,WAAW,CAACK,YAAY,EAAE,CAACO,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;MACjEC,aAAa,EAAE;IACjB,CAAC;EACH;EAEA,OAAOhB,gCAAgC,CAACG,WAAW,EAAEC,IAAI,EAAEK,UAAU,EAAEC,YAAY,EAAEC,SAAS,EAAEC,WAAW,CAAC;AAC9G;AAEAK,MAAM,CAACC,OAAO,GAAGhB,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}