{"ast":null,"code":"import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { checkDecimals } from \"../../../../assets/functions/CheckDecimals/CheckDecimals\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildQuantityValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  let pathLabelArray = pathLabel.split(\"-\");\n  let path = [...pathLabelArray];\n  path.pop();\n  path.push(\"unit\");\n  let unitPath = path.join(\"-\");\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let selectedUnit = this.parent[unitPath];\n        let range;\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (value <= range.upper || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (value < range.upper || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let selectedUnit = this.parent[unitPath];\n        let range;\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (value >= range.lower || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (value > range.lower || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let selectedUnit = this.parent[unitPath];\n        let precision;\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            precision = obj.unit === selectedUnit ? obj.precision : precision;\n          });\n        } else {\n          precision = item.units.precision;\n        }\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    let pathArray = [...pathLabelArray];\n    pathArray.pop();\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      pathArray.push(\"value\");\n      let pathLabelQuantity = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let field = this.parent[pathLabelQuantity];\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel + \"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let field = this.parent[unitPath];\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let selectedUnit = this.parent[unitPath];\n        let range;\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (value <= range.upper || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (value < range.upper || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let selectedUnit = this.parent[unitPath];\n        let range;\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (value >= range.lower || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (value > range.lower || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let selectedUnit = this.parent[unitPath];\n        let precision;\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            precision = obj.unit === selectedUnit ? obj.precision : precision;\n          });\n        } else {\n          precision = item.units.precision;\n        }\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n};\nexport { buildQuantityValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","checkDecimals","handleRequiredValidation","handleRequiredSection","buildQuantityValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","pathLabelArray","split","path","pop","push","unitPath","join","occurrences","lowerOccurrences","upperOccurrences","length","string","test","value","isVisible","parent","passedRequired","res","sectionsError","createError","message","toString","toLocaleLowerCase","number","typeError","selectedUnit","range","Array","isArray","units","forEach","obj","unit","undefined","upper","upperIncluded","lower","lowerIncluded","precision","nDecimals","lowerPrecision","pathArray","pathLabelQuantity","field","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","conditionValidation","identifierId","filter","textId","getCurrentContent","hasText","_immutable"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildQuantityValidation/BuildQuantityValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { checkDecimals } from \"../../../../assets/functions/CheckDecimals/CheckDecimals\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildQuantityValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  let pathLabelArray = pathLabel.split(\"-\");\n  let path = [...pathLabelArray];\n  path.pop();\n  path.push(\"unit\");\n  let unitPath = path.join(\"-\");\n\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let selectedUnit = this.parent[unitPath];\n        let range;\n\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (value <= range.upper || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (value < range.upper || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let selectedUnit = this.parent[unitPath];\n        let range;\n\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (value >= range.lower || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (value > range.lower || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let selectedUnit = this.parent[unitPath];\n        let precision;\n\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            precision = obj.unit === selectedUnit ? obj.precision : precision;\n          });\n        } else {\n          precision = item.units.precision;\n        }\n\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    let pathArray = [...pathLabelArray];\n    pathArray.pop();\n\n    if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      pathArray.push(\"value\");\n      let pathLabelQuantity = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let field = this.parent[pathLabelQuantity];\n\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"value\") {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel + \"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let field = this.parent[unitPath];\n\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let selectedUnit = this.parent[unitPath];\n        let range;\n\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (value <= range.upper || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (value < range.upper || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let selectedUnit = this.parent[unitPath];\n        let range;\n\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            range = obj.unit === selectedUnit ? obj.range : range;\n          });\n        } else {\n          range = item.units.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (value >= range.lower || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (value > range.lower || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let selectedUnit = this.parent[unitPath];\n        let precision;\n\n        if (Array.isArray(item.units)) {\n          item.units.forEach(obj => {\n            precision = obj.unit === selectedUnit ? obj.precision : precision;\n          });\n        } else {\n          precision = item.units.precision;\n        }\n\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n};\n\nexport { buildQuantityValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}