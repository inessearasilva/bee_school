{"ast":null,"code":"// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict';\n\nconst {\n  Response,\n  makeNetworkError,\n  makeAppropriateNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response');\nconst {\n  Headers\n} = require('./headers');\nconst {\n  Request,\n  makeRequest\n} = require('./request');\nconst zlib = require('zlib');\nconst {\n  bytesMatch,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  createOpaqueTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime,\n  createDeferredPromise,\n  isBlobLike,\n  sameOrigin,\n  isCancelled,\n  isAborted,\n  isErrorLike,\n  fullyReadBody,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlIsHttpHttpsScheme,\n  urlHasHttpsScheme\n} = require('./util');\nconst {\n  kState,\n  kHeaders,\n  kGuard,\n  kRealm\n} = require('./symbols');\nconst assert = require('assert');\nconst {\n  safelyExtractBody\n} = require('./body');\nconst {\n  redirectStatus,\n  nullBodyStatus,\n  safeMethods,\n  requestBodyHeader,\n  subresource,\n  DOMException\n} = require('./constants');\nconst {\n  kHeadersList\n} = require('../core/symbols');\nconst EE = require('events');\nconst {\n  Readable,\n  pipeline\n} = require('stream');\nconst {\n  addAbortListener,\n  isErrored,\n  isReadable,\n  nodeMajor,\n  nodeMinor\n} = require('../core/util');\nconst {\n  dataURLProcessor,\n  serializeAMimeType\n} = require('./dataURL');\nconst {\n  TransformStream\n} = require('stream/web');\nconst {\n  getGlobalDispatcher\n} = require('../global');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  STATUS_CODES\n} = require('http');\n\n/** @type {import('buffer').resolveObjectURL} */\nlet resolveObjectURL;\nlet ReadableStream = globalThis.ReadableStream;\nclass Fetch extends EE {\n  constructor(dispatcher) {\n    super();\n    this.dispatcher = dispatcher;\n    this.connection = null;\n    this.dump = false;\n    this.state = 'ongoing';\n    // 2 terminated listeners get added per request,\n    // but only 1 gets removed. If there are 20 redirects,\n    // 21 listeners will be added.\n    // See https://github.com/nodejs/undici/issues/1711\n    // TODO (fix): Find and fix root cause for leaked listener.\n    this.setMaxListeners(21);\n  }\n  terminate(reason) {\n    if (this.state !== 'ongoing') {\n      return;\n    }\n    this.state = 'terminated';\n    this.connection?.destroy(reason);\n    this.emit('terminated', reason);\n  }\n\n  // https://fetch.spec.whatwg.org/#fetch-controller-abort\n  abort(error) {\n    if (this.state !== 'ongoing') {\n      return;\n    }\n\n    // 1. Set controller’s state to \"aborted\".\n    this.state = 'aborted';\n\n    // 2. Let fallbackError be an \"AbortError\" DOMException.\n    // 3. Set error to fallbackError if it is not given.\n    if (!error) {\n      error = new DOMException('The operation was aborted.', 'AbortError');\n    }\n\n    // 4. Let serializedError be StructuredSerialize(error).\n    //    If that threw an exception, catch it, and let\n    //    serializedError be StructuredSerialize(fallbackError).\n\n    // 5. Set controller’s serialized abort reason to serializedError.\n    this.serializedAbortReason = error;\n    this.connection?.destroy(error);\n    this.emit('terminated', error);\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-method\nasync function fetch(input) {\n  let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  webidl.argumentLengthCheck(arguments, 1, {\n    header: 'globalThis.fetch'\n  });\n\n  // 1. Let p be a new promise.\n  const p = createDeferredPromise();\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  let requestObject;\n  try {\n    requestObject = new Request(input, init);\n  } catch (e) {\n    p.reject(e);\n    return p.promise;\n  }\n\n  // 3. Let request be requestObject’s request.\n  const request = requestObject[kState];\n\n  // 4. If requestObject’s signal’s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort the fetch() call with p, request, null, and\n    //    requestObject’s signal’s abort reason.\n    abortFetch(p, request, null, requestObject.signal.reason);\n\n    // 2. Return p.\n    return p.promise;\n  }\n\n  // 5. Let globalObject be request’s client’s global object.\n  const globalObject = request.client.globalObject;\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request’s service-workers mode to \"none\".\n  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n    request.serviceWorkers = 'none';\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null;\n\n  // 8. Let relevantRealm be this’s relevant Realm.\n  const relevantRealm = null;\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false;\n\n  // 10. Let controller be null.\n  let controller = null;\n\n  // 11. Add the following abort steps to requestObject’s signal:\n  addAbortListener(requestObject.signal, () => {\n    // 1. Set locallyAborted to true.\n    locallyAborted = true;\n\n    // 2. Assert: controller is non-null.\n    assert(controller != null);\n\n    // 3. Abort controller with requestObject’s signal’s abort reason.\n    controller.abort(requestObject.signal.reason);\n\n    // 4. Abort the fetch() call with p, request, responseObject,\n    //    and requestObject’s signal’s abort reason.\n    abortFetch(p, request, responseObject, requestObject.signal.reason);\n  });\n\n  // 12. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  const handleFetchDone = response => finalizeAndReportTiming(response, 'fetch');\n\n  // 13. Set controller to the result of calling fetch given request,\n  // with processResponseEndOfBody set to handleFetchDone, and processResponse\n  // given response being these substeps:\n\n  const processResponse = response => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return;\n    }\n\n    // 2. If response’s aborted flag is set, then:\n    if (response.aborted) {\n      // 1. Let deserializedError be the result of deserialize a serialized\n      //    abort reason given controller’s serialized abort reason and\n      //    relevantRealm.\n\n      // 2. Abort the fetch() call with p, request, responseObject, and\n      //    deserializedError.\n\n      abortFetch(p, request, responseObject, controller.serializedAbortReason);\n      return;\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(Object.assign(new TypeError('fetch failed'), {\n        cause: response.error\n      }));\n      return;\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new Response();\n    responseObject[kState] = response;\n    responseObject[kRealm] = relevantRealm;\n    responseObject[kHeaders][kHeadersList] = response.headersList;\n    responseObject[kHeaders][kGuard] = 'immutable';\n    responseObject[kHeaders][kRealm] = relevantRealm;\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject);\n  };\n  controller = fetching({\n    request,\n    processResponseEndOfBody: handleFetchDone,\n    processResponse,\n    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici\n  });\n\n  // 14. Return p.\n  return p.promise;\n}\n\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming(response) {\n  let initiatorType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n  // 1. If response is an aborted network error, then return.\n  if (response.type === 'error' && response.aborted) {\n    return;\n  }\n\n  // 2. If response’s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return;\n  }\n\n  // 3. Let originalURL be response’s URL list[0].\n  const originalURL = response.urlList[0];\n\n  // 4. Let timingInfo be response’s timing info.\n  let timingInfo = response.timingInfo;\n\n  // 5. Let cacheState be response’s cache state.\n  let cacheState = response.cacheState;\n\n  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.\n  if (!urlIsHttpHttpsScheme(originalURL)) {\n    return;\n  }\n\n  // 7. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return;\n  }\n\n  // 8. If response’s timing allow passed flag is not set, then:\n  if (!timingInfo.timingAllowPassed) {\n    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n    timingInfo = createOpaqueTimingInfo({\n      startTime: timingInfo.startTime\n    });\n\n    //  2. Set cacheState to the empty string.\n    cacheState = '';\n  }\n\n  // 9. Set timingInfo’s end time to the coarsened shared current time\n  // given global’s relevant settings object’s cross-origin isolated\n  // capability.\n  // TODO: given global’s relevant settings object’s cross-origin isolated\n  // capability?\n  timingInfo.endTime = coarsenedSharedCurrentTime();\n\n  // 10. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo;\n\n  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState) {\n  if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {\n    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState);\n  }\n}\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch(p, request, responseObject, error) {\n  // Note: AbortSignal.reason was added in node v17.2.0\n  // which would give us an undefined error to reject with.\n  // Remove this once node v16 is no longer supported.\n  if (!error) {\n    error = new DOMException('The operation was aborted.', 'AbortError');\n  }\n\n  // 1. Reject promise with error.\n  p.reject(error);\n\n  // 2. If request’s body is not null and is readable, then cancel request’s\n  // body with error.\n  if (request.body != null && isReadable(request.body?.stream)) {\n    request.body.stream.cancel(error).catch(err => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return;\n      }\n      throw err;\n    });\n  }\n\n  // 3. If responseObject is null, then return.\n  if (responseObject == null) {\n    return;\n  }\n\n  // 4. Let response be responseObject’s response.\n  const response = responseObject[kState];\n\n  // 5. If response’s body is not null and is readable, then error response’s\n  // body with error.\n  if (response.body != null && isReadable(response.body?.stream)) {\n    response.body.stream.cancel(error).catch(err => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return;\n      }\n      throw err;\n    });\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching(_ref) {\n  let {\n    request,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseEndOfBody,\n    processResponseConsumeBody,\n    useParallelQueue = false,\n    dispatcher // undici\n  } = _ref;\n  // 1. Let taskDestination be null.\n  let taskDestination = null;\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false;\n\n  // 3. If request’s client is non-null, then:\n  if (request.client != null) {\n    // 1. Set taskDestination to request’s client’s global object.\n    taskDestination = request.client.globalObject;\n\n    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);\n  const timingInfo = createOpaqueTimingInfo({\n    startTime: currenTime\n  });\n\n  // 6. Let fetchParams be a new fetch params whose\n  // request is request,\n  // timing info is timingInfo,\n  // process request body chunk length is processRequestBodyChunkLength,\n  // process request end-of-body is processRequestEndOfBody,\n  // process response is processResponse,\n  // process response consume body is processResponseConsumeBody,\n  // process response end-of-body is processResponseEndOfBody,\n  // task destination is taskDestination,\n  // and cross-origin isolated capability is crossOriginIsolatedCapability.\n  const fetchParams = {\n    controller: new Fetch(dispatcher),\n    request,\n    timingInfo,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseConsumeBody,\n    processResponseEndOfBody,\n    taskDestination,\n    crossOriginIsolatedCapability\n  };\n\n  // 7. If request’s body is a byte sequence, then set request’s body to\n  //    request’s body as a body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream);\n\n  // 8. If request’s window is \"client\", then set request’s window to request’s\n  // client, if request’s client’s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window = request.client?.globalObject?.constructor?.name === 'Window' ? request.client : 'no-window';\n  }\n\n  // 9. If request’s origin is \"client\", then set request’s origin to request’s\n  // client’s origin.\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin;\n  }\n\n  // 10. If all of the following conditions are true:\n  // TODO\n\n  // 11. If request’s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request’s client is non-null, then set request’s policy\n    // container to a clone of request’s client’s policy container. [HTML]\n    if (request.client != null) {\n      request.policyContainer = clonePolicyContainer(request.client.policyContainer);\n    } else {\n      // 2. Otherwise, set request’s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer();\n    }\n  }\n\n  // 12. If request’s header list does not contain `Accept`, then:\n  if (!request.headersList.contains('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*';\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request’s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request’s header list.\n    request.headersList.append('accept', value);\n  }\n\n  // 13. If request’s header list does not contain `Accept-Language`, then\n  // user agents should append `Accept-Language`/an appropriate value to\n  // request’s header list.\n  if (!request.headersList.contains('accept-language')) {\n    request.headersList.append('accept-language', '*');\n  }\n\n  // 14. If request’s priority is null, then use request’s initiator and\n  // destination appropriately in setting request’s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 15. If request is a subresource request, then:\n  if (subresource.includes(request.destination)) {\n    // TODO\n  }\n\n  // 16. Run main fetch given fetchParams.\n  mainFetch(fetchParams).catch(err => {\n    fetchParams.controller.terminate(err);\n  });\n\n  // 17. Return fetchParam's controller\n  return fetchParams.controller;\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch(fetchParams) {\n  let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let response be null.\n  let response = null;\n\n  // 3. If request’s local-URLs-only flag is set and request’s current URL is\n  // not local, then set response to a network error.\n  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n    response = makeNetworkError('local URLs only');\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request);\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    response = makeNetworkError('bad port');\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request’s referrer policy is the empty string, then set request’s\n  // referrer policy to request’s policy container’s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy;\n  }\n\n  // 8. If request’s referrer is not \"no-referrer\", then set request’s\n  // referrer to the result of invoking determine request’s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request);\n  }\n\n  // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request’s current URL’s scheme is \"http\"\n  // - request’s current URL’s host is a domain\n  // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      const currentURL = requestCurrentURL(request);\n      if (\n      // - request’s current URL’s origin is same origin with request’s origin,\n      //   and request’s response tainting is \"basic\"\n      sameOrigin(currentURL, request.url) && request.responseTainting === 'basic' ||\n      // request’s current URL’s scheme is \"data\"\n      currentURL.protocol === 'data:' ||\n      // - request’s mode is \"navigate\" or \"websocket\"\n      request.mode === 'navigate' || request.mode === 'websocket') {\n        // 1. Set request’s response tainting to \"basic\".\n        request.responseTainting = 'basic';\n\n        // 2. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams);\n      }\n\n      // request’s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"');\n      }\n\n      // request’s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request’s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError('redirect mode cannot be \"follow\" for \"no-cors\" request');\n        }\n\n        // 2. Set request’s response tainting to \"opaque\".\n        request.responseTainting = 'opaque';\n\n        // 3. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams);\n      }\n\n      // request’s current URL’s scheme is not an HTTP(S) scheme\n      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme');\n      }\n\n      // - request’s use-CORS-preflight flag is set\n      // - request’s unsafe-request flag is set and either request’s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request’s header list is not empty\n      //    1. Set request’s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request’s response tainting to \"cors\".\n      request.responseTainting = 'cors';\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch(fetchParams);\n    })();\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response;\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request’s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response’s header list.\n      // TODO\n      // 2. If request’s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response’s CORS-exposed header-name list to\n      // all unique header names in response’s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response’s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic');\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors');\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque');\n    } else {\n      assert(false);\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response’s internal response otherwise.\n  let internalResponse = response.status === 0 ? response : response.internalResponse;\n\n  // 15. If internalResponse’s URL list is empty, then set it to a clone of\n  // request’s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList);\n  }\n\n  // 16. If request’s timing allow failed flag is unset, then set\n  // internalResponse’s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true;\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n  // internalResponse’s range-requested flag is set, and request’s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (response.type === 'opaque' && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains('range')) {\n    response = internalResponse = makeNetworkError();\n  }\n\n  // 19. If response is not a network error and either request’s method is\n  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n  // set internalResponse’s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (response.status !== 0 && (request.method === 'HEAD' || request.method === 'CONNECT' || nullBodyStatus.includes(internalResponse.status))) {\n    internalResponse.body = null;\n    fetchParams.controller.dump = true;\n  }\n\n  // 20. If request’s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = reason => fetchFinale(fetchParams, makeNetworkError(reason));\n\n    // 2. If request’s response tainting is \"opaque\", or response’s body is null,\n    // then run processBodyError and abort these steps.\n    if (request.responseTainting === 'opaque' || response.body == null) {\n      processBodyError(response.error);\n      return;\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = bytes => {\n      // 1. If bytes do not match request’s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!bytesMatch(bytes, request.integrity)) {\n        processBodyError('integrity mismatch');\n        return;\n      }\n\n      // 2. Set response’s body to bytes as a body.\n      response.body = safelyExtractBody(bytes)[0];\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response);\n    };\n\n    // 4. Fully read response’s body given processBody and processBodyError.\n    await fullyReadBody(response.body, processBody, processBodyError);\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response);\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nasync function schemeFetch(fetchParams) {\n  // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n  // cancelled state, we do not want this condition to trigger *unless* there have been\n  // no redirects. See https://github.com/nodejs/undici/issues/1776\n  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n    return makeAppropriateNetworkError(fetchParams);\n  }\n\n  // 2. Let request be fetchParams’s request.\n  const {\n    request\n  } = fetchParams;\n  const {\n    protocol: scheme\n  } = requestCurrentURL(request);\n\n  // 3. Switch on request’s current URL’s scheme and run the associated steps:\n  switch (scheme) {\n    case 'about:':\n      {\n        // If request’s current URL’s path is the string \"blank\", then return a new response\n        // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,\n        // and body is the empty byte sequence as a body.\n\n        // Otherwise, return a network error.\n        return makeNetworkError('about scheme is not supported');\n      }\n    case 'blob:':\n      {\n        if (!resolveObjectURL) {\n          resolveObjectURL = require('buffer').resolveObjectURL;\n        }\n\n        // 1. Let blobURLEntry be request’s current URL’s blob URL entry.\n        const blobURLEntry = requestCurrentURL(request);\n\n        // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n        // Buffer.resolveObjectURL does not ignore URL queries.\n        if (blobURLEntry.search.length !== 0) {\n          return makeNetworkError('NetworkError when attempting to fetch resource.');\n        }\n        const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());\n\n        // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s\n        //    object is not a Blob object, then return a network error.\n        if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {\n          return makeNetworkError('invalid method');\n        }\n\n        // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.\n        const bodyWithType = safelyExtractBody(blobURLEntryObject);\n\n        // 4. Let body be bodyWithType’s body.\n        const body = bodyWithType[0];\n\n        // 5. Let length be body’s length, serialized and isomorphic encoded.\n        const length = isomorphicEncode(`${body.length}`);\n\n        // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.\n        const type = bodyWithType[1] ?? '';\n\n        // 7. Return a new response whose status message is `OK`, header list is\n        //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.\n        const response = makeResponse({\n          statusText: 'OK',\n          headersList: [['content-length', {\n            name: 'Content-Length',\n            value: length\n          }], ['content-type', {\n            name: 'Content-Type',\n            value: type\n          }]]\n        });\n        response.body = body;\n        return response;\n      }\n    case 'data:':\n      {\n        // 1. Let dataURLStruct be the result of running the\n        //    data: URL processor on request’s current URL.\n        const currentURL = requestCurrentURL(request);\n        const dataURLStruct = dataURLProcessor(currentURL);\n\n        // 2. If dataURLStruct is failure, then return a\n        //    network error.\n        if (dataURLStruct === 'failure') {\n          return makeNetworkError('failed to fetch the data URL');\n        }\n\n        // 3. Let mimeType be dataURLStruct’s MIME type, serialized.\n        const mimeType = serializeAMimeType(dataURLStruct.mimeType);\n\n        // 4. Return a response whose status message is `OK`,\n        //    header list is « (`Content-Type`, mimeType) »,\n        //    and body is dataURLStruct’s body as a body.\n        return makeResponse({\n          statusText: 'OK',\n          headersList: [['content-type', {\n            name: 'Content-Type',\n            value: mimeType\n          }]],\n          body: safelyExtractBody(dataURLStruct.body)[0]\n        });\n      }\n    case 'file:':\n      {\n        // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n        // When in doubt, return a network error.\n        return makeNetworkError('not implemented... yet...');\n      }\n    case 'http:':\n    case 'https:':\n      {\n        // Return the result of running HTTP fetch given fetchParams.\n\n        return await httpFetch(fetchParams).catch(err => makeNetworkError(err));\n      }\n    default:\n      {\n        return makeNetworkError('unknown scheme');\n      }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse(fetchParams, response) {\n  // 1. Set fetchParams’s request’s done flag.\n  fetchParams.request.done = true;\n\n  // 2, If fetchParams’s process response done is not null, then queue a fetch\n  // task to run fetchParams’s process response done given response, with\n  // fetchParams’s task destination.\n  if (fetchParams.processResponseDone != null) {\n    queueMicrotask(() => fetchParams.processResponseDone(response));\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nasync function fetchFinale(fetchParams, response) {\n  // 1. If response is a network error, then:\n  if (response.type === 'error') {\n    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».\n    response.urlList = [fetchParams.request.urlList[0]];\n\n    // 2. Set response’s timing info to the result of creating an opaque timing\n    // info for fetchParams’s timing info.\n    response.timingInfo = createOpaqueTimingInfo({\n      startTime: fetchParams.timingInfo.startTime\n    });\n  }\n\n  // 2. Let processResponseEndOfBody be the following steps:\n  const processResponseEndOfBody = () => {\n    // 1. Set fetchParams’s request’s done flag.\n    fetchParams.request.done = true;\n\n    // If fetchParams’s process response end-of-body is not null,\n    // then queue a fetch task to run fetchParams’s process response\n    // end-of-body given response with fetchParams’s task destination.\n    if (fetchParams.processResponseEndOfBody != null) {\n      queueMicrotask(() => fetchParams.processResponseEndOfBody(response));\n    }\n  };\n\n  // 3. If fetchParams’s process response is non-null, then queue a fetch task\n  // to run fetchParams’s process response given response, with fetchParams’s\n  // task destination.\n  if (fetchParams.processResponse != null) {\n    queueMicrotask(() => fetchParams.processResponse(response));\n  }\n\n  // 4. If response’s body is null, then run processResponseEndOfBody.\n  if (response.body == null) {\n    processResponseEndOfBody();\n  } else {\n    // 5. Otherwise:\n\n    // 1. Let transformStream be a new a TransformStream.\n\n    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,\n    // enqueues chunk in transformStream.\n    const identityTransformAlgorithm = (chunk, controller) => {\n      controller.enqueue(chunk);\n    };\n\n    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm\n    // and flushAlgorithm set to processResponseEndOfBody.\n    const transformStream = new TransformStream({\n      start() {},\n      transform: identityTransformAlgorithm,\n      flush: processResponseEndOfBody\n    }, {\n      size() {\n        return 1;\n      }\n    }, {\n      size() {\n        return 1;\n      }\n    });\n\n    // 4. Set response’s body to the result of piping response’s body through transformStream.\n    response.body = {\n      stream: response.body.stream.pipeThrough(transformStream)\n    };\n  }\n\n  // 6. If fetchParams’s process response consume body is non-null, then:\n  if (fetchParams.processResponseConsumeBody != null) {\n    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s\n    // process response consume body given response and nullOrBytes.\n    const processBody = nullOrBytes => fetchParams.processResponseConsumeBody(response, nullOrBytes);\n\n    // 2. Let processBodyError be this step: run fetchParams’s process\n    // response consume body given response and failure.\n    const processBodyError = failure => fetchParams.processResponseConsumeBody(response, failure);\n\n    // 3. If response’s body is null, then queue a fetch task to run processBody\n    // given null, with fetchParams’s task destination.\n    if (response.body == null) {\n      queueMicrotask(() => processBody(null));\n    } else {\n      // 4. Otherwise, fully read response’s body given processBody, processBodyError,\n      // and fetchParams’s task destination.\n      await fullyReadBody(response.body, processBody, processBodyError);\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch(fetchParams) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let response be null.\n  let response = null;\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null;\n\n  // 4. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo;\n\n  // 5. If request’s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request’s redirect mode is \"follow\", then set request’s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none';\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);\n\n    // 4. If request’s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (request.responseTainting === 'cors' && corsCheck(request, response) === 'failure') {\n      return makeNetworkError('cors failure');\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request’s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true;\n    }\n  }\n\n  // 7. If either request’s response tainting or response’s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request’s origin, request’s client, request’s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if ((request.responseTainting === 'opaque' || response.type === 'opaque') && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === 'blocked') {\n    return makeNetworkError('blocked');\n  }\n\n  // 8. If actualResponse’s status is a redirect status, then:\n  if (redirectStatus.includes(actualResponse.status)) {\n    // 1. If actualResponse’s status is not 303, request’s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    if (request.redirect !== 'manual') {\n      fetchParams.controller.connection.destroy();\n    }\n\n    // 2. Switch on request’s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError('unexpected redirect');\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      // NOTE(spec): On the web this would return an `opaqueredirect` response,\n      // but that doesn't make sense server side.\n      // See https://github.com/nodejs/undici/issues/1193.\n      response = actualResponse;\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch(fetchParams, response);\n    } else {\n      assert(false);\n    }\n  }\n\n  // 9. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo;\n\n  // 10. Return response.\n  return response;\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nasync function httpRedirectFetch(fetchParams, response) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response’s internal response otherwise.\n  const actualResponse = response.internalResponse ? response.internalResponse : response;\n\n  // 3. Let locationURL be actualResponse’s location URL given request’s current\n  // URL’s fragment.\n  let locationURL;\n  try {\n    locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response;\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return makeNetworkError(err);\n  }\n\n  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!urlIsHttpHttpsScheme(locationURL)) {\n    return makeNetworkError('URL scheme must be a HTTP(S) scheme');\n  }\n\n  // 7. If request’s redirect count is 20, then return a network error.\n  if (request.redirectCount === 20) {\n    return makeNetworkError('redirect count exceeded');\n  }\n\n  // 8. Increase request’s redirect count by 1.\n  request.redirectCount += 1;\n\n  // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n  // request’s origin is not same origin with locationURL’s origin, then return\n  //  a network error.\n  if (request.mode === 'cors' && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {\n    return makeNetworkError('cross origin not allowed for request mode \"cors\"');\n  }\n\n  // 10. If request’s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (request.responseTainting === 'cors' && (locationURL.username || locationURL.password)) {\n    return makeNetworkError('URL cannot contain credentials for request mode \"cors\"');\n  }\n\n  // 11. If actualResponse’s status is not 303, request’s body is non-null,\n  // and request’s body’s source is null, then return a network error.\n  if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {\n    return makeNetworkError();\n  }\n\n  // 12. If one of the following is true\n  // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n  if ([301, 302].includes(actualResponse.status) && request.method === 'POST' || actualResponse.status === 303 && !['GET', 'HEAD'].includes(request.method)) {\n    // then:\n    // 1. Set request’s method to `GET` and request’s body to null.\n    request.method = 'GET';\n    request.body = null;\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request’s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName);\n    }\n  }\n\n  // 13. If request’s current URL’s origin is not same origin with locationURL’s\n  //     origin, then for each headerName of CORS non-wildcard request-header name,\n  //     delete headerName from request’s header list.\n  if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n    request.headersList.delete('authorization');\n  }\n\n  // 14. If request’s body is non-null, then set request’s body to the first return\n  // value of safely extracting request’s body’s source.\n  if (request.body != null) {\n    assert(request.body.source != null);\n    request.body = safelyExtractBody(request.body.source)[0];\n  }\n\n  // 15. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo;\n\n  // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams’s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n\n  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n  //  redirect start time to timingInfo’s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime;\n  }\n\n  // 18. Append locationURL to request’s URL list.\n  request.urlList.push(locationURL);\n\n  // 19. Invoke set request’s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse);\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch(fetchParams, true);\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch(fetchParams) {\n  let isAuthenticationFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let isNewConnectionFetch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null;\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null;\n\n  // 4. Let response be null.\n  let response = null;\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null;\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false;\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request’s window is \"no-window\" and request’s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams;\n    httpRequest = request;\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request);\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = {\n      ...fetchParams\n    };\n\n    // 3. Set httpFetchParams’s request to httpRequest.\n    httpFetchParams.request = httpRequest;\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials = request.credentials === 'include' || request.credentials === 'same-origin' && request.responseTainting === 'basic';\n\n  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null;\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null;\n\n  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (httpRequest.body == null && ['POST', 'PUT'].includes(httpRequest.method)) {\n    contentLengthHeaderValue = '0';\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength != null) {\n    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n  //    list.\n  if (contentLengthHeaderValue != null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue);\n  }\n\n  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n  //    contentLengthHeaderValue) to httpRequest’s header list.\n\n  //    10. If contentLength is non-null and httpRequest’s keepalive is true,\n  //    then:\n  if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    11. If httpRequest’s referrer is a URL, then append\n  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n  //     to httpRequest’s header list.\n  if (httpRequest.referrer instanceof URL) {\n    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href));\n  }\n\n  //    12. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest);\n\n  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest);\n\n  //    14. If httpRequest’s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest’s header list.\n  if (!httpRequest.headersList.contains('user-agent')) {\n    httpRequest.headersList.append('user-agent', 'undici');\n  }\n\n  //    15. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest’s cache mode to \"no-store\".\n  if (httpRequest.cache === 'default' && (httpRequest.headersList.contains('if-modified-since') || httpRequest.headersList.contains('if-none-match') || httpRequest.headersList.contains('if-unmodified-since') || httpRequest.headersList.contains('if-match') || httpRequest.headersList.contains('if-range'))) {\n    httpRequest.cache = 'no-store';\n  }\n\n  //    16. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest’s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n  if (httpRequest.cache === 'no-cache' && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains('cache-control')) {\n    httpRequest.headersList.append('cache-control', 'max-age=0');\n  }\n\n  //    17. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest’s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache');\n    }\n\n    // 2. If httpRequest’s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache');\n    }\n  }\n\n  //    18. If httpRequest’s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n  if (httpRequest.headersList.contains('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity');\n  }\n\n  //    19. Modify httpRequest’s header list per HTTP. Do not append a given\n  //    header if httpRequest’s header list contains that header’s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.contains('accept-encoding')) {\n    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate');\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate');\n    }\n  }\n\n  //    20. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    21. If there’s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    22. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    23. If httpCache is null, then set httpRequest’s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store';\n  }\n\n  //    24. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then return the appropriate network error for fetchParams.\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached');\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);\n\n    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (!safeMethods.includes(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse;\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n  response.urlList = [...httpRequest.urlList];\n\n  // 12. If httpRequest’s header list contains `Range`, then set response’s\n  // range-requested flag.\n  if (httpRequest.headersList.contains('range')) {\n    response.rangeRequested = true;\n  }\n\n  // 13. Set response’s request-includes-credentials to includeCredentials.\n  response.requestIncludesCredentials = includeCredentials;\n\n  // 14. If response’s status is 401, httpRequest’s response tainting is not\n  // \"cors\", includeCredentials is true, and request’s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 15. If response’s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request’s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError();\n    }\n\n    // 2. ???\n\n    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams);\n    }\n\n    // 4. Prompt the end user as appropriate in request’s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required');\n  }\n\n  // 16. If all of the following are true\n  if (\n  // response’s status is 421\n  response.status === 421 &&\n  // isNewConnectionFetch is false\n  !isNewConnectionFetch && (\n  // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n  request.body == null || request.body.source != null)) {\n    // then:\n\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams);\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    fetchParams.controller.connection.destroy();\n    response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);\n  }\n\n  // 17. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 18. Return response.\n  return response;\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch(fetchParams) {\n  let includeCredentials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let forceNewConnection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);\n  fetchParams.controller.connection = {\n    abort: null,\n    destroyed: false,\n    destroy(err) {\n      if (!this.destroyed) {\n        this.destroyed = true;\n        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'));\n      }\n    }\n  };\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let response be null.\n  let response = null;\n\n  // 3. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo;\n\n  // 4. Let httpCache be the result of determining the HTTP cache partition,\n  // given request.\n  // TODO: cache\n  const httpCache = null;\n\n  // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n  if (httpCache == null) {\n    request.cache = 'no-store';\n  }\n\n  // 6. Let networkPartitionKey be the result of determining the network\n  // partition key given request.\n  // TODO\n\n  // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n  // \"no\".\n  const newConnection = forceNewConnection ? 'yes' : 'no'; // eslint-disable-line no-unused-vars\n\n  // 8. Switch on request’s mode:\n  if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request’s current URL.\n    // TODO\n  } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request’s current URL’s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n  }\n\n  // 9. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If connection is failure, then return a network error.\n\n  //    2. Set timingInfo’s final connection timing info to the result of\n  //    calling clamp and coarsen connection timing info with connection’s\n  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s\n  //    cross-origin isolated capability.\n\n  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,\n  //    and request’s body’s source is null, then append (`Transfer-Encoding`,\n  //    `chunked`) to request’s header list.\n\n  //    4. Set timingInfo’s final network-request start time to the coarsened\n  //    shared current time given fetchParams’s cross-origin isolated\n  //    capability.\n\n  //    5. Set response to the result of making an HTTP request over connection\n  //    using request with the following caveats:\n\n  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n  //        - If request’s body is non-null, and request’s body’s source is null,\n  //        then the user agent may have a buffer of up to 64 kibibytes and store\n  //        a part of request’s body in that buffer. If the user agent reads from\n  //        request’s body beyond that buffer’s size and the user agent needs to\n  //        resend request, then instead return a network error.\n\n  //        - Set timingInfo’s final network-response start time to the coarsened\n  //        shared current time given fetchParams’s cross-origin isolated capability,\n  //        immediately after the user agent’s HTTP parser receives the first byte\n  //        of the response (e.g., frame header bytes for HTTP/2 or response status\n  //        line for HTTP/1.x).\n\n  //        - Wait until all the headers are transmitted.\n\n  //        - Any responses whose status is in the range 100 to 199, inclusive,\n  //        and is not 101, are to be ignored, except for the purposes of setting\n  //        timingInfo’s final network-response start time above.\n\n  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and\n  //    response is transferred via HTTP/1.0 or older, then return a network\n  //    error.\n\n  //    - If the HTTP request results in a TLS client certificate dialog, then:\n\n  //        1. If request’s window is an environment settings object, make the\n  //        dialog available in request’s window.\n\n  //        2. Otherwise, return a network error.\n\n  // To transmit request’s body body, run these steps:\n  let requestBody = null;\n  // 1. If body is null and fetchParams’s process request end-of-body is\n  // non-null, then queue a fetch task given fetchParams’s process request\n  // end-of-body and fetchParams’s task destination.\n  if (request.body == null && fetchParams.processRequestEndOfBody) {\n    queueMicrotask(() => fetchParams.processRequestEndOfBody());\n  } else if (request.body != null) {\n    // 2. Otherwise, if body is non-null:\n\n    //    1. Let processBodyChunk given bytes be these steps:\n    const processBodyChunk = async function* (bytes) {\n      // 1. If the ongoing fetch is terminated, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return;\n      }\n\n      // 2. Run this step in parallel: transmit bytes.\n      yield bytes;\n\n      // 3. If fetchParams’s process request body is non-null, then run\n      // fetchParams’s process request body given bytes’s length.\n      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);\n    };\n\n    // 2. Let processEndOfBody be these steps:\n    const processEndOfBody = () => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return;\n      }\n\n      // 2. If fetchParams’s process request end-of-body is non-null,\n      // then run fetchParams’s process request end-of-body.\n      if (fetchParams.processRequestEndOfBody) {\n        fetchParams.processRequestEndOfBody();\n      }\n    };\n\n    // 3. Let processBodyError given e be these steps:\n    const processBodyError = e => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return;\n      }\n\n      // 2. If e is an \"AbortError\" DOMException, then abort fetchParams’s controller.\n      if (e.name === 'AbortError') {\n        fetchParams.controller.abort();\n      } else {\n        fetchParams.controller.terminate(e);\n      }\n    };\n\n    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,\n    // processBodyError, and fetchParams’s task destination.\n    requestBody = async function* () {\n      try {\n        for await (const bytes of request.body.stream) {\n          yield* processBodyChunk(bytes);\n        }\n        processEndOfBody();\n      } catch (err) {\n        processBodyError(err);\n      }\n    }();\n  }\n  try {\n    // socket is only provided for websockets\n    const {\n      body,\n      status,\n      statusText,\n      headersList,\n      socket\n    } = await dispatch({\n      body: requestBody\n    });\n    if (socket) {\n      response = makeResponse({\n        status,\n        statusText,\n        headersList,\n        socket\n      });\n    } else {\n      const iterator = body[Symbol.asyncIterator]();\n      fetchParams.controller.next = () => iterator.next();\n      response = makeResponse({\n        status,\n        statusText,\n        headersList\n      });\n    }\n  } catch (err) {\n    // 10. If aborted, then:\n    if (err.name === 'AbortError') {\n      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      fetchParams.controller.connection.destroy();\n\n      // 2. Return the appropriate network error for fetchParams.\n      return makeAppropriateNetworkError(fetchParams);\n    }\n    return makeNetworkError(err);\n  }\n\n  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n  // if it is suspended.\n  const pullAlgorithm = () => {\n    fetchParams.controller.resume();\n  };\n\n  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s\n  // controller with reason, given reason.\n  const cancelAlgorithm = reason => {\n    fetchParams.controller.abort(reason);\n  };\n\n  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n  // the user agent.\n  // TODO\n\n  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n  // TODO\n\n  // 15. Let stream be a new ReadableStream.\n  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,\n  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream;\n  }\n  const stream = new ReadableStream({\n    async start(controller) {\n      fetchParams.controller.controller = controller;\n    },\n    async pull(controller) {\n      await pullAlgorithm(controller);\n    },\n    async cancel(reason) {\n      await cancelAlgorithm(reason);\n    }\n  }, {\n    highWaterMark: 0,\n    size() {\n      return 1;\n    }\n  });\n\n  // 17. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. Set response’s body to a new body whose stream is stream.\n  response.body = {\n    stream\n  };\n\n  //    2. If response is not a network error and request’s cache mode is\n  //    not \"no-store\", then update response in httpCache for request.\n  //    TODO\n\n  //    3. If includeCredentials is true and the user agent is not configured\n  //    to block cookies for request (see section 7 of [COOKIES]), then run the\n  //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n  //    the value of each header whose name is a byte-case-insensitive match for\n  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.\n  //    TODO\n\n  // 18. If aborted, then:\n  // TODO\n\n  // 19. Run these steps in parallel:\n\n  //    1. Run these steps, but abort when fetchParams is canceled:\n  fetchParams.controller.on('terminated', onAborted);\n  fetchParams.controller.resume = async () => {\n    // 1. While true\n    while (true) {\n      // 1-3. See onData...\n\n      // 4. Set bytes to the result of handling content codings given\n      // codings and bytes.\n      let bytes;\n      let isFailure;\n      try {\n        const {\n          done,\n          value\n        } = await fetchParams.controller.next();\n        if (isAborted(fetchParams)) {\n          break;\n        }\n        bytes = done ? undefined : value;\n      } catch (err) {\n        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n          // zlib doesn't like empty streams.\n          bytes = undefined;\n        } else {\n          bytes = err;\n\n          // err may be propagated from the result of calling readablestream.cancel,\n          // which might not be an error. https://github.com/nodejs/undici/issues/2009\n          isFailure = true;\n        }\n      }\n      if (bytes === undefined) {\n        // 2. Otherwise, if the bytes transmission for response’s message\n        // body is done normally and stream is readable, then close\n        // stream, finalize response for fetchParams and response, and\n        // abort these in-parallel steps.\n        readableStreamClose(fetchParams.controller.controller);\n        finalizeResponse(fetchParams, response);\n        return;\n      }\n\n      // 5. Increase timingInfo’s decoded body size by bytes’s length.\n      timingInfo.decodedBodySize += bytes?.byteLength ?? 0;\n\n      // 6. If bytes is failure, then terminate fetchParams’s controller.\n      if (isFailure) {\n        fetchParams.controller.terminate(bytes);\n        return;\n      }\n\n      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n      // into stream.\n      fetchParams.controller.controller.enqueue(new Uint8Array(bytes));\n\n      // 8. If stream is errored, then terminate the ongoing fetch.\n      if (isErrored(stream)) {\n        fetchParams.controller.terminate();\n        return;\n      }\n\n      // 9. If stream doesn’t need more data ask the user agent to suspend\n      // the ongoing fetch.\n      if (!fetchParams.controller.controller.desiredSize) {\n        return;\n      }\n    }\n  };\n\n  //    2. If aborted, then:\n  function onAborted(reason) {\n    // 2. If fetchParams is aborted, then:\n    if (isAborted(fetchParams)) {\n      // 1. Set response’s aborted flag.\n      response.aborted = true;\n\n      // 2. If stream is readable, then error stream with the result of\n      //    deserialize a serialized abort reason given fetchParams’s\n      //    controller’s serialized abort reason and an\n      //    implementation-defined realm.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);\n      }\n    } else {\n      // 3. Otherwise, if stream is readable, error stream with a TypeError.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(new TypeError('terminated', {\n          cause: isErrorLike(reason) ? reason : undefined\n        }));\n      }\n    }\n\n    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n    fetchParams.controller.connection.destroy();\n  }\n\n  // 20. Return response.\n  return response;\n  async function dispatch(_ref2) {\n    let {\n      body\n    } = _ref2;\n    const url = requestCurrentURL(request);\n    /** @type {import('../..').Agent} */\n    const agent = fetchParams.controller.dispatcher;\n    return new Promise((resolve, reject) => agent.dispatch({\n      path: url.pathname + url.search,\n      origin: url.origin,\n      method: request.method,\n      body: fetchParams.controller.dispatcher.isMockActive ? request.body && request.body.source : body,\n      headers: request.headersList.entries,\n      maxRedirections: 0,\n      upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n    }, {\n      body: null,\n      abort: null,\n      onConnect(abort) {\n        // TODO (fix): Do we need connection here?\n        const {\n          connection\n        } = fetchParams.controller;\n        if (connection.destroyed) {\n          abort(new DOMException('The operation was aborted.', 'AbortError'));\n        } else {\n          fetchParams.controller.on('terminated', abort);\n          this.abort = connection.abort = abort;\n        }\n      },\n      onHeaders(status, headersList, resume, statusText) {\n        if (status < 200) {\n          return;\n        }\n        let codings = [];\n        let location = '';\n        const headers = new Headers();\n        for (let n = 0; n < headersList.length; n += 2) {\n          const key = headersList[n + 0].toString('latin1');\n          const val = headersList[n + 1].toString('latin1');\n          if (key.toLowerCase() === 'content-encoding') {\n            // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n            // \"All content-coding values are case-insensitive...\"\n            codings = val.toLowerCase().split(',').map(x => x.trim()).reverse();\n          } else if (key.toLowerCase() === 'location') {\n            location = val;\n          }\n          headers.append(key, val);\n        }\n        this.body = new Readable({\n          read: resume\n        });\n        const decoders = [];\n        const willFollow = request.redirect === 'follow' && location && redirectStatus.includes(status);\n\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n        if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n          for (const coding of codings) {\n            // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n            if (coding === 'x-gzip' || coding === 'gzip') {\n              decoders.push(zlib.createGunzip({\n                // Be less strict when decoding compressed responses, since sometimes\n                // servers send slightly invalid responses that are still accepted\n                // by common browsers.\n                // Always using Z_SYNC_FLUSH is what cURL does.\n                flush: zlib.constants.Z_SYNC_FLUSH,\n                finishFlush: zlib.constants.Z_SYNC_FLUSH\n              }));\n            } else if (coding === 'deflate') {\n              decoders.push(zlib.createInflate());\n            } else if (coding === 'br') {\n              decoders.push(zlib.createBrotliDecompress());\n            } else {\n              decoders.length = 0;\n              break;\n            }\n          }\n        }\n        resolve({\n          status,\n          statusText,\n          headersList: headers[kHeadersList],\n          body: decoders.length ? pipeline(this.body, ...decoders, () => {}) : this.body.on('error', () => {})\n        });\n        return true;\n      },\n      onData(chunk) {\n        if (fetchParams.controller.dump) {\n          return;\n        }\n\n        // 1. If one or more bytes have been transmitted from response’s\n        // message body, then:\n\n        //  1. Let bytes be the transmitted bytes.\n        const bytes = chunk;\n\n        //  2. Let codings be the result of extracting header list values\n        //  given `Content-Encoding` and response’s header list.\n        //  See pullAlgorithm.\n\n        //  3. Increase timingInfo’s encoded body size by bytes’s length.\n        timingInfo.encodedBodySize += bytes.byteLength;\n\n        //  4. See pullAlgorithm...\n\n        return this.body.push(bytes);\n      },\n      onComplete() {\n        if (this.abort) {\n          fetchParams.controller.off('terminated', this.abort);\n        }\n        fetchParams.controller.ended = true;\n        this.body.push(null);\n      },\n      onError(error) {\n        if (this.abort) {\n          fetchParams.controller.off('terminated', this.abort);\n        }\n        this.body?.destroy(error);\n        fetchParams.controller.terminate(error);\n        reject(error);\n      },\n      onUpgrade(status, headersList, socket) {\n        if (status !== 101) {\n          return;\n        }\n        const headers = new Headers();\n        for (let n = 0; n < headersList.length; n += 2) {\n          const key = headersList[n + 0].toString('latin1');\n          const val = headersList[n + 1].toString('latin1');\n          headers.append(key, val);\n        }\n        resolve({\n          status,\n          statusText: STATUS_CODES[status],\n          headersList: headers[kHeadersList],\n          socket\n        });\n        return true;\n      }\n    }));\n  }\n}\nmodule.exports = {\n  fetch,\n  Fetch,\n  fetching,\n  finalizeAndReportTiming\n};","map":{"version":3,"names":["Response","makeNetworkError","makeAppropriateNetworkError","filterResponse","makeResponse","require","Headers","Request","makeRequest","zlib","bytesMatch","makePolicyContainer","clonePolicyContainer","requestBadPort","TAOCheck","appendRequestOriginHeader","responseLocationURL","requestCurrentURL","setRequestReferrerPolicyOnRedirect","tryUpgradeRequestToAPotentiallyTrustworthyURL","createOpaqueTimingInfo","appendFetchMetadata","corsCheck","crossOriginResourcePolicyCheck","determineRequestsReferrer","coarsenedSharedCurrentTime","createDeferredPromise","isBlobLike","sameOrigin","isCancelled","isAborted","isErrorLike","fullyReadBody","readableStreamClose","isomorphicEncode","urlIsLocal","urlIsHttpHttpsScheme","urlHasHttpsScheme","kState","kHeaders","kGuard","kRealm","assert","safelyExtractBody","redirectStatus","nullBodyStatus","safeMethods","requestBodyHeader","subresource","DOMException","kHeadersList","EE","Readable","pipeline","addAbortListener","isErrored","isReadable","nodeMajor","nodeMinor","dataURLProcessor","serializeAMimeType","TransformStream","getGlobalDispatcher","webidl","STATUS_CODES","resolveObjectURL","ReadableStream","globalThis","Fetch","constructor","dispatcher","connection","dump","state","setMaxListeners","terminate","reason","destroy","emit","abort","error","serializedAbortReason","fetch","input","init","argumentLengthCheck","arguments","header","p","requestObject","e","reject","promise","request","signal","aborted","abortFetch","globalObject","client","name","serviceWorkers","responseObject","relevantRealm","locallyAborted","controller","handleFetchDone","response","finalizeAndReportTiming","processResponse","type","Object","assign","TypeError","cause","headersList","resolve","fetching","processResponseEndOfBody","initiatorType","urlList","length","originalURL","timingInfo","cacheState","timingAllowPassed","startTime","endTime","markResourceTiming","performance","href","body","stream","cancel","catch","err","code","processRequestBodyChunkLength","processRequestEndOfBody","processResponseConsumeBody","useParallelQueue","taskDestination","crossOriginIsolatedCapability","currenTime","fetchParams","window","origin","policyContainer","contains","value","append","priority","includes","destination","mainFetch","recursive","localURLsOnly","referrerPolicy","referrer","currentURL","url","responseTainting","protocol","mode","schemeFetch","redirect","httpFetch","status","internalResponse","push","timingAllowFailed","rangeRequested","headers","method","integrity","processBodyError","fetchFinale","processBody","bytes","redirectCount","scheme","blobURLEntry","search","blobURLEntryObject","toString","bodyWithType","statusText","dataURLStruct","mimeType","finalizeResponse","done","processResponseDone","queueMicrotask","identityTransformAlgorithm","chunk","enqueue","transformStream","start","transform","flush","size","pipeThrough","nullOrBytes","failure","actualResponse","httpNetworkOrCacheFetch","httpRedirectFetch","locationURL","hash","username","password","source","headerName","delete","redirectEndTime","postRedirectStartTime","redirectStartTime","isAuthenticationFetch","isNewConnectionFetch","httpFetchParams","httpRequest","httpCache","revalidatingFlag","includeCredentials","credentials","contentLength","contentLengthHeaderValue","keepalive","URL","cache","preventNoCacheCacheControlHeaderModification","forwardResponse","httpNetworkFetch","requestIncludesCredentials","forceNewConnection","destroyed","newConnection","requestBody","processBodyChunk","byteLength","processEndOfBody","socket","dispatch","iterator","Symbol","asyncIterator","next","pullAlgorithm","resume","cancelAlgorithm","pull","highWaterMark","on","onAborted","isFailure","undefined","ended","encodedBodySize","decodedBodySize","Uint8Array","desiredSize","agent","Promise","path","pathname","isMockActive","entries","maxRedirections","upgrade","onConnect","onHeaders","codings","location","n","key","val","toLowerCase","split","map","x","trim","reverse","read","decoders","willFollow","coding","createGunzip","constants","Z_SYNC_FLUSH","finishFlush","createInflate","createBrotliDecompress","onData","onComplete","off","onError","onUpgrade","module","exports"],"sources":["C:/Users/ines_/bee_v2/bee_school/frontend/node_modules/undici/lib/fetch/index.js"],"sourcesContent":["// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst {\n  Response,\n  makeNetworkError,\n  makeAppropriateNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response')\nconst { Headers } = require('./headers')\nconst { Request, makeRequest } = require('./request')\nconst zlib = require('zlib')\nconst {\n  bytesMatch,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  createOpaqueTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime,\n  createDeferredPromise,\n  isBlobLike,\n  sameOrigin,\n  isCancelled,\n  isAborted,\n  isErrorLike,\n  fullyReadBody,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlIsHttpHttpsScheme,\n  urlHasHttpsScheme\n} = require('./util')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst assert = require('assert')\nconst { safelyExtractBody } = require('./body')\nconst {\n  redirectStatus,\n  nullBodyStatus,\n  safeMethods,\n  requestBodyHeader,\n  subresource,\n  DOMException\n} = require('./constants')\nconst { kHeadersList } = require('../core/symbols')\nconst EE = require('events')\nconst { Readable, pipeline } = require('stream')\nconst { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require('../core/util')\nconst { dataURLProcessor, serializeAMimeType } = require('./dataURL')\nconst { TransformStream } = require('stream/web')\nconst { getGlobalDispatcher } = require('../global')\nconst { webidl } = require('./webidl')\nconst { STATUS_CODES } = require('http')\n\n/** @type {import('buffer').resolveObjectURL} */\nlet resolveObjectURL\nlet ReadableStream = globalThis.ReadableStream\n\nclass Fetch extends EE {\n  constructor (dispatcher) {\n    super()\n\n    this.dispatcher = dispatcher\n    this.connection = null\n    this.dump = false\n    this.state = 'ongoing'\n    // 2 terminated listeners get added per request,\n    // but only 1 gets removed. If there are 20 redirects,\n    // 21 listeners will be added.\n    // See https://github.com/nodejs/undici/issues/1711\n    // TODO (fix): Find and fix root cause for leaked listener.\n    this.setMaxListeners(21)\n  }\n\n  terminate (reason) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    this.state = 'terminated'\n    this.connection?.destroy(reason)\n    this.emit('terminated', reason)\n  }\n\n  // https://fetch.spec.whatwg.org/#fetch-controller-abort\n  abort (error) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    // 1. Set controller’s state to \"aborted\".\n    this.state = 'aborted'\n\n    // 2. Let fallbackError be an \"AbortError\" DOMException.\n    // 3. Set error to fallbackError if it is not given.\n    if (!error) {\n      error = new DOMException('The operation was aborted.', 'AbortError')\n    }\n\n    // 4. Let serializedError be StructuredSerialize(error).\n    //    If that threw an exception, catch it, and let\n    //    serializedError be StructuredSerialize(fallbackError).\n\n    // 5. Set controller’s serialized abort reason to serializedError.\n    this.serializedAbortReason = error\n\n    this.connection?.destroy(error)\n    this.emit('terminated', error)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-method\nasync function fetch (input, init = {}) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })\n\n  // 1. Let p be a new promise.\n  const p = createDeferredPromise()\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  let requestObject\n\n  try {\n    requestObject = new Request(input, init)\n  } catch (e) {\n    p.reject(e)\n    return p.promise\n  }\n\n  // 3. Let request be requestObject’s request.\n  const request = requestObject[kState]\n\n  // 4. If requestObject’s signal’s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort the fetch() call with p, request, null, and\n    //    requestObject’s signal’s abort reason.\n    abortFetch(p, request, null, requestObject.signal.reason)\n\n    // 2. Return p.\n    return p.promise\n  }\n\n  // 5. Let globalObject be request’s client’s global object.\n  const globalObject = request.client.globalObject\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request’s service-workers mode to \"none\".\n  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n    request.serviceWorkers = 'none'\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null\n\n  // 8. Let relevantRealm be this’s relevant Realm.\n  const relevantRealm = null\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false\n\n  // 10. Let controller be null.\n  let controller = null\n\n  // 11. Add the following abort steps to requestObject’s signal:\n  addAbortListener(\n    requestObject.signal,\n    () => {\n      // 1. Set locallyAborted to true.\n      locallyAborted = true\n\n      // 2. Assert: controller is non-null.\n      assert(controller != null)\n\n      // 3. Abort controller with requestObject’s signal’s abort reason.\n      controller.abort(requestObject.signal.reason)\n\n      // 4. Abort the fetch() call with p, request, responseObject,\n      //    and requestObject’s signal’s abort reason.\n      abortFetch(p, request, responseObject, requestObject.signal.reason)\n    }\n  )\n\n  // 12. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  const handleFetchDone = (response) =>\n    finalizeAndReportTiming(response, 'fetch')\n\n  // 13. Set controller to the result of calling fetch given request,\n  // with processResponseEndOfBody set to handleFetchDone, and processResponse\n  // given response being these substeps:\n\n  const processResponse = (response) => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return\n    }\n\n    // 2. If response’s aborted flag is set, then:\n    if (response.aborted) {\n      // 1. Let deserializedError be the result of deserialize a serialized\n      //    abort reason given controller’s serialized abort reason and\n      //    relevantRealm.\n\n      // 2. Abort the fetch() call with p, request, responseObject, and\n      //    deserializedError.\n\n      abortFetch(p, request, responseObject, controller.serializedAbortReason)\n      return\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(\n        Object.assign(new TypeError('fetch failed'), { cause: response.error })\n      )\n      return\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new Response()\n    responseObject[kState] = response\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = response.headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject)\n  }\n\n  controller = fetching({\n    request,\n    processResponseEndOfBody: handleFetchDone,\n    processResponse,\n    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici\n  })\n\n  // 14. Return p.\n  return p.promise\n}\n\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming (response, initiatorType = 'other') {\n  // 1. If response is an aborted network error, then return.\n  if (response.type === 'error' && response.aborted) {\n    return\n  }\n\n  // 2. If response’s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return\n  }\n\n  // 3. Let originalURL be response’s URL list[0].\n  const originalURL = response.urlList[0]\n\n  // 4. Let timingInfo be response’s timing info.\n  let timingInfo = response.timingInfo\n\n  // 5. Let cacheState be response’s cache state.\n  let cacheState = response.cacheState\n\n  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.\n  if (!urlIsHttpHttpsScheme(originalURL)) {\n    return\n  }\n\n  // 7. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return\n  }\n\n  // 8. If response’s timing allow passed flag is not set, then:\n  if (!timingInfo.timingAllowPassed) {\n    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n    timingInfo = createOpaqueTimingInfo({\n      startTime: timingInfo.startTime\n    })\n\n    //  2. Set cacheState to the empty string.\n    cacheState = ''\n  }\n\n  // 9. Set timingInfo’s end time to the coarsened shared current time\n  // given global’s relevant settings object’s cross-origin isolated\n  // capability.\n  // TODO: given global’s relevant settings object’s cross-origin isolated\n  // capability?\n  timingInfo.endTime = coarsenedSharedCurrentTime()\n\n  // 10. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(\n    timingInfo,\n    originalURL,\n    initiatorType,\n    globalThis,\n    cacheState\n  )\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {\n  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {\n    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch (p, request, responseObject, error) {\n  // Note: AbortSignal.reason was added in node v17.2.0\n  // which would give us an undefined error to reject with.\n  // Remove this once node v16 is no longer supported.\n  if (!error) {\n    error = new DOMException('The operation was aborted.', 'AbortError')\n  }\n\n  // 1. Reject promise with error.\n  p.reject(error)\n\n  // 2. If request’s body is not null and is readable, then cancel request’s\n  // body with error.\n  if (request.body != null && isReadable(request.body?.stream)) {\n    request.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n\n  // 3. If responseObject is null, then return.\n  if (responseObject == null) {\n    return\n  }\n\n  // 4. Let response be responseObject’s response.\n  const response = responseObject[kState]\n\n  // 5. If response’s body is not null and is readable, then error response’s\n  // body with error.\n  if (response.body != null && isReadable(response.body?.stream)) {\n    response.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching ({\n  request,\n  processRequestBodyChunkLength,\n  processRequestEndOfBody,\n  processResponse,\n  processResponseEndOfBody,\n  processResponseConsumeBody,\n  useParallelQueue = false,\n  dispatcher // undici\n}) {\n  // 1. Let taskDestination be null.\n  let taskDestination = null\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false\n\n  // 3. If request’s client is non-null, then:\n  if (request.client != null) {\n    // 1. Set taskDestination to request’s client’s global object.\n    taskDestination = request.client.globalObject\n\n    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability =\n      request.client.crossOriginIsolatedCapability\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)\n  const timingInfo = createOpaqueTimingInfo({\n    startTime: currenTime\n  })\n\n  // 6. Let fetchParams be a new fetch params whose\n  // request is request,\n  // timing info is timingInfo,\n  // process request body chunk length is processRequestBodyChunkLength,\n  // process request end-of-body is processRequestEndOfBody,\n  // process response is processResponse,\n  // process response consume body is processResponseConsumeBody,\n  // process response end-of-body is processResponseEndOfBody,\n  // task destination is taskDestination,\n  // and cross-origin isolated capability is crossOriginIsolatedCapability.\n  const fetchParams = {\n    controller: new Fetch(dispatcher),\n    request,\n    timingInfo,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseConsumeBody,\n    processResponseEndOfBody,\n    taskDestination,\n    crossOriginIsolatedCapability\n  }\n\n  // 7. If request’s body is a byte sequence, then set request’s body to\n  //    request’s body as a body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream)\n\n  // 8. If request’s window is \"client\", then set request’s window to request’s\n  // client, if request’s client’s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window =\n      request.client?.globalObject?.constructor?.name === 'Window'\n        ? request.client\n        : 'no-window'\n  }\n\n  // 9. If request’s origin is \"client\", then set request’s origin to request’s\n  // client’s origin.\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin\n  }\n\n  // 10. If all of the following conditions are true:\n  // TODO\n\n  // 11. If request’s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request’s client is non-null, then set request’s policy\n    // container to a clone of request’s client’s policy container. [HTML]\n    if (request.client != null) {\n      request.policyContainer = clonePolicyContainer(\n        request.client.policyContainer\n      )\n    } else {\n      // 2. Otherwise, set request’s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer()\n    }\n  }\n\n  // 12. If request’s header list does not contain `Accept`, then:\n  if (!request.headersList.contains('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*'\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request’s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request’s header list.\n    request.headersList.append('accept', value)\n  }\n\n  // 13. If request’s header list does not contain `Accept-Language`, then\n  // user agents should append `Accept-Language`/an appropriate value to\n  // request’s header list.\n  if (!request.headersList.contains('accept-language')) {\n    request.headersList.append('accept-language', '*')\n  }\n\n  // 14. If request’s priority is null, then use request’s initiator and\n  // destination appropriately in setting request’s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 15. If request is a subresource request, then:\n  if (subresource.includes(request.destination)) {\n    // TODO\n  }\n\n  // 16. Run main fetch given fetchParams.\n  mainFetch(fetchParams)\n    .catch(err => {\n      fetchParams.controller.terminate(err)\n    })\n\n  // 17. Return fetchParam's controller\n  return fetchParams.controller\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch (fetchParams, recursive = false) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. If request’s local-URLs-only flag is set and request’s current URL is\n  // not local, then set response to a network error.\n  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n    response = makeNetworkError('local URLs only')\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    response = makeNetworkError('bad port')\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request’s referrer policy is the empty string, then set request’s\n  // referrer policy to request’s policy container’s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy\n  }\n\n  // 8. If request’s referrer is not \"no-referrer\", then set request’s\n  // referrer to the result of invoking determine request’s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request)\n  }\n\n  // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request’s current URL’s scheme is \"http\"\n  // - request’s current URL’s host is a domain\n  // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      const currentURL = requestCurrentURL(request)\n\n      if (\n        // - request’s current URL’s origin is same origin with request’s origin,\n        //   and request’s response tainting is \"basic\"\n        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||\n        // request’s current URL’s scheme is \"data\"\n        (currentURL.protocol === 'data:') ||\n        // - request’s mode is \"navigate\" or \"websocket\"\n        (request.mode === 'navigate' || request.mode === 'websocket')\n      ) {\n        // 1. Set request’s response tainting to \"basic\".\n        request.responseTainting = 'basic'\n\n        // 2. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request’s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"')\n      }\n\n      // request’s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request’s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError(\n            'redirect mode cannot be \"follow\" for \"no-cors\" request'\n          )\n        }\n\n        // 2. Set request’s response tainting to \"opaque\".\n        request.responseTainting = 'opaque'\n\n        // 3. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request’s current URL’s scheme is not an HTTP(S) scheme\n      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n      }\n\n      // - request’s use-CORS-preflight flag is set\n      // - request’s unsafe-request flag is set and either request’s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request’s header list is not empty\n      //    1. Set request’s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request’s response tainting to \"cors\".\n      request.responseTainting = 'cors'\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch(fetchParams)\n    })()\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request’s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response’s header list.\n      // TODO\n      // 2. If request’s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response’s CORS-exposed header-name list to\n      // all unique header names in response’s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response’s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic')\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors')\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque')\n    } else {\n      assert(false)\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response’s internal response otherwise.\n  let internalResponse =\n    response.status === 0 ? response : response.internalResponse\n\n  // 15. If internalResponse’s URL list is empty, then set it to a clone of\n  // request’s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList)\n  }\n\n  // 16. If request’s timing allow failed flag is unset, then set\n  // internalResponse’s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n  // internalResponse’s range-requested flag is set, and request’s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (\n    response.type === 'opaque' &&\n    internalResponse.status === 206 &&\n    internalResponse.rangeRequested &&\n    !request.headers.contains('range')\n  ) {\n    response = internalResponse = makeNetworkError()\n  }\n\n  // 19. If response is not a network error and either request’s method is\n  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n  // set internalResponse’s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (\n    response.status !== 0 &&\n    (request.method === 'HEAD' ||\n      request.method === 'CONNECT' ||\n      nullBodyStatus.includes(internalResponse.status))\n  ) {\n    internalResponse.body = null\n    fetchParams.controller.dump = true\n  }\n\n  // 20. If request’s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = (reason) =>\n      fetchFinale(fetchParams, makeNetworkError(reason))\n\n    // 2. If request’s response tainting is \"opaque\", or response’s body is null,\n    // then run processBodyError and abort these steps.\n    if (request.responseTainting === 'opaque' || response.body == null) {\n      processBodyError(response.error)\n      return\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = (bytes) => {\n      // 1. If bytes do not match request’s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!bytesMatch(bytes, request.integrity)) {\n        processBodyError('integrity mismatch')\n        return\n      }\n\n      // 2. Set response’s body to bytes as a body.\n      response.body = safelyExtractBody(bytes)[0]\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response)\n    }\n\n    // 4. Fully read response’s body given processBody and processBodyError.\n    await fullyReadBody(response.body, processBody, processBodyError)\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nasync function schemeFetch (fetchParams) {\n  // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n  // cancelled state, we do not want this condition to trigger *unless* there have been\n  // no redirects. See https://github.com/nodejs/undici/issues/1776\n  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n    return makeAppropriateNetworkError(fetchParams)\n  }\n\n  // 2. Let request be fetchParams’s request.\n  const { request } = fetchParams\n\n  const { protocol: scheme } = requestCurrentURL(request)\n\n  // 3. Switch on request’s current URL’s scheme and run the associated steps:\n  switch (scheme) {\n    case 'about:': {\n      // If request’s current URL’s path is the string \"blank\", then return a new response\n      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,\n      // and body is the empty byte sequence as a body.\n\n      // Otherwise, return a network error.\n      return makeNetworkError('about scheme is not supported')\n    }\n    case 'blob:': {\n      if (!resolveObjectURL) {\n        resolveObjectURL = require('buffer').resolveObjectURL\n      }\n\n      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.\n      const blobURLEntry = requestCurrentURL(request)\n\n      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n      // Buffer.resolveObjectURL does not ignore URL queries.\n      if (blobURLEntry.search.length !== 0) {\n        return makeNetworkError('NetworkError when attempting to fetch resource.')\n      }\n\n      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())\n\n      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s\n      //    object is not a Blob object, then return a network error.\n      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {\n        return makeNetworkError('invalid method')\n      }\n\n      // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.\n      const bodyWithType = safelyExtractBody(blobURLEntryObject)\n\n      // 4. Let body be bodyWithType’s body.\n      const body = bodyWithType[0]\n\n      // 5. Let length be body’s length, serialized and isomorphic encoded.\n      const length = isomorphicEncode(`${body.length}`)\n\n      // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.\n      const type = bodyWithType[1] ?? ''\n\n      // 7. Return a new response whose status message is `OK`, header list is\n      //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.\n      const response = makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-length', { name: 'Content-Length', value: length }],\n          ['content-type', { name: 'Content-Type', value: type }]\n        ]\n      })\n\n      response.body = body\n\n      return response\n    }\n    case 'data:': {\n      // 1. Let dataURLStruct be the result of running the\n      //    data: URL processor on request’s current URL.\n      const currentURL = requestCurrentURL(request)\n      const dataURLStruct = dataURLProcessor(currentURL)\n\n      // 2. If dataURLStruct is failure, then return a\n      //    network error.\n      if (dataURLStruct === 'failure') {\n        return makeNetworkError('failed to fetch the data URL')\n      }\n\n      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.\n      const mimeType = serializeAMimeType(dataURLStruct.mimeType)\n\n      // 4. Return a response whose status message is `OK`,\n      //    header list is « (`Content-Type`, mimeType) »,\n      //    and body is dataURLStruct’s body as a body.\n      return makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-type', { name: 'Content-Type', value: mimeType }]\n        ],\n        body: safelyExtractBody(dataURLStruct.body)[0]\n      })\n    }\n    case 'file:': {\n      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n      // When in doubt, return a network error.\n      return makeNetworkError('not implemented... yet...')\n    }\n    case 'http:':\n    case 'https:': {\n      // Return the result of running HTTP fetch given fetchParams.\n\n      return await httpFetch(fetchParams)\n        .catch((err) => makeNetworkError(err))\n    }\n    default: {\n      return makeNetworkError('unknown scheme')\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse (fetchParams, response) {\n  // 1. Set fetchParams’s request’s done flag.\n  fetchParams.request.done = true\n\n  // 2, If fetchParams’s process response done is not null, then queue a fetch\n  // task to run fetchParams’s process response done given response, with\n  // fetchParams’s task destination.\n  if (fetchParams.processResponseDone != null) {\n    queueMicrotask(() => fetchParams.processResponseDone(response))\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nasync function fetchFinale (fetchParams, response) {\n  // 1. If response is a network error, then:\n  if (response.type === 'error') {\n    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».\n    response.urlList = [fetchParams.request.urlList[0]]\n\n    // 2. Set response’s timing info to the result of creating an opaque timing\n    // info for fetchParams’s timing info.\n    response.timingInfo = createOpaqueTimingInfo({\n      startTime: fetchParams.timingInfo.startTime\n    })\n  }\n\n  // 2. Let processResponseEndOfBody be the following steps:\n  const processResponseEndOfBody = () => {\n    // 1. Set fetchParams’s request’s done flag.\n    fetchParams.request.done = true\n\n    // If fetchParams’s process response end-of-body is not null,\n    // then queue a fetch task to run fetchParams’s process response\n    // end-of-body given response with fetchParams’s task destination.\n    if (fetchParams.processResponseEndOfBody != null) {\n      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))\n    }\n  }\n\n  // 3. If fetchParams’s process response is non-null, then queue a fetch task\n  // to run fetchParams’s process response given response, with fetchParams’s\n  // task destination.\n  if (fetchParams.processResponse != null) {\n    queueMicrotask(() => fetchParams.processResponse(response))\n  }\n\n  // 4. If response’s body is null, then run processResponseEndOfBody.\n  if (response.body == null) {\n    processResponseEndOfBody()\n  } else {\n  // 5. Otherwise:\n\n    // 1. Let transformStream be a new a TransformStream.\n\n    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,\n    // enqueues chunk in transformStream.\n    const identityTransformAlgorithm = (chunk, controller) => {\n      controller.enqueue(chunk)\n    }\n\n    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm\n    // and flushAlgorithm set to processResponseEndOfBody.\n    const transformStream = new TransformStream({\n      start () {},\n      transform: identityTransformAlgorithm,\n      flush: processResponseEndOfBody\n    }, {\n      size () {\n        return 1\n      }\n    }, {\n      size () {\n        return 1\n      }\n    })\n\n    // 4. Set response’s body to the result of piping response’s body through transformStream.\n    response.body = { stream: response.body.stream.pipeThrough(transformStream) }\n  }\n\n  // 6. If fetchParams’s process response consume body is non-null, then:\n  if (fetchParams.processResponseConsumeBody != null) {\n    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s\n    // process response consume body given response and nullOrBytes.\n    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)\n\n    // 2. Let processBodyError be this step: run fetchParams’s process\n    // response consume body given response and failure.\n    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)\n\n    // 3. If response’s body is null, then queue a fetch task to run processBody\n    // given null, with fetchParams’s task destination.\n    if (response.body == null) {\n      queueMicrotask(() => processBody(null))\n    } else {\n      // 4. Otherwise, fully read response’s body given processBody, processBodyError,\n      // and fetchParams’s task destination.\n      await fullyReadBody(response.body, processBody, processBodyError)\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch (fetchParams) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null\n\n  // 4. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 5. If request’s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request’s redirect mode is \"follow\", then set request’s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none'\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)\n\n    // 4. If request’s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (\n      request.responseTainting === 'cors' &&\n      corsCheck(request, response) === 'failure'\n    ) {\n      return makeNetworkError('cors failure')\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request’s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true\n    }\n  }\n\n  // 7. If either request’s response tainting or response’s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request’s origin, request’s client, request’s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if (\n    (request.responseTainting === 'opaque' || response.type === 'opaque') &&\n    crossOriginResourcePolicyCheck(\n      request.origin,\n      request.client,\n      request.destination,\n      actualResponse\n    ) === 'blocked'\n  ) {\n    return makeNetworkError('blocked')\n  }\n\n  // 8. If actualResponse’s status is a redirect status, then:\n  if (redirectStatus.includes(actualResponse.status)) {\n    // 1. If actualResponse’s status is not 303, request’s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    if (request.redirect !== 'manual') {\n      fetchParams.controller.connection.destroy()\n    }\n\n    // 2. Switch on request’s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError('unexpected redirect')\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      // NOTE(spec): On the web this would return an `opaqueredirect` response,\n      // but that doesn't make sense server side.\n      // See https://github.com/nodejs/undici/issues/1193.\n      response = actualResponse\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch(fetchParams, response)\n    } else {\n      assert(false)\n    }\n  }\n\n  // 9. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 10. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nasync function httpRedirectFetch (fetchParams, response) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response’s internal response otherwise.\n  const actualResponse = response.internalResponse\n    ? response.internalResponse\n    : response\n\n  // 3. Let locationURL be actualResponse’s location URL given request’s current\n  // URL’s fragment.\n  let locationURL\n\n  try {\n    locationURL = responseLocationURL(\n      actualResponse,\n      requestCurrentURL(request).hash\n    )\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return makeNetworkError(err)\n  }\n\n  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!urlIsHttpHttpsScheme(locationURL)) {\n    return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n  }\n\n  // 7. If request’s redirect count is 20, then return a network error.\n  if (request.redirectCount === 20) {\n    return makeNetworkError('redirect count exceeded')\n  }\n\n  // 8. Increase request’s redirect count by 1.\n  request.redirectCount += 1\n\n  // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n  // request’s origin is not same origin with locationURL’s origin, then return\n  //  a network error.\n  if (\n    request.mode === 'cors' &&\n    (locationURL.username || locationURL.password) &&\n    !sameOrigin(request, locationURL)\n  ) {\n    return makeNetworkError('cross origin not allowed for request mode \"cors\"')\n  }\n\n  // 10. If request’s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (\n    request.responseTainting === 'cors' &&\n    (locationURL.username || locationURL.password)\n  ) {\n    return makeNetworkError(\n      'URL cannot contain credentials for request mode \"cors\"'\n    )\n  }\n\n  // 11. If actualResponse’s status is not 303, request’s body is non-null,\n  // and request’s body’s source is null, then return a network error.\n  if (\n    actualResponse.status !== 303 &&\n    request.body != null &&\n    request.body.source == null\n  ) {\n    return makeNetworkError()\n  }\n\n  // 12. If one of the following is true\n  // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n  if (\n    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||\n    (actualResponse.status === 303 &&\n      !['GET', 'HEAD'].includes(request.method))\n  ) {\n    // then:\n    // 1. Set request’s method to `GET` and request’s body to null.\n    request.method = 'GET'\n    request.body = null\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request’s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName)\n    }\n  }\n\n  // 13. If request’s current URL’s origin is not same origin with locationURL’s\n  //     origin, then for each headerName of CORS non-wildcard request-header name,\n  //     delete headerName from request’s header list.\n  if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n    request.headersList.delete('authorization')\n  }\n\n  // 14. If request’s body is non-null, then set request’s body to the first return\n  // value of safely extracting request’s body’s source.\n  if (request.body != null) {\n    assert(request.body.source != null)\n    request.body = safelyExtractBody(request.body.source)[0]\n  }\n\n  // 15. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams’s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =\n    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)\n\n  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n  //  redirect start time to timingInfo’s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime\n  }\n\n  // 18. Append locationURL to request’s URL list.\n  request.urlList.push(locationURL)\n\n  // 19. Invoke set request’s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse)\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch(fetchParams, true)\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch (\n  fetchParams,\n  isAuthenticationFetch = false,\n  isNewConnectionFetch = false\n) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null\n\n  // 4. Let response be null.\n  let response = null\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request’s window is \"no-window\" and request’s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams\n    httpRequest = request\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request)\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = { ...fetchParams }\n\n    // 3. Set httpFetchParams’s request to httpRequest.\n    httpFetchParams.request = httpRequest\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials =\n    request.credentials === 'include' ||\n    (request.credentials === 'same-origin' &&\n      request.responseTainting === 'basic')\n\n  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null\n\n  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (\n    httpRequest.body == null &&\n    ['POST', 'PUT'].includes(httpRequest.method)\n  ) {\n    contentLengthHeaderValue = '0'\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength != null) {\n    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n  //    list.\n  if (contentLengthHeaderValue != null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue)\n  }\n\n  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n  //    contentLengthHeaderValue) to httpRequest’s header list.\n\n  //    10. If contentLength is non-null and httpRequest’s keepalive is true,\n  //    then:\n  if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    11. If httpRequest’s referrer is a URL, then append\n  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n  //     to httpRequest’s header list.\n  if (httpRequest.referrer instanceof URL) {\n    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))\n  }\n\n  //    12. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest)\n\n  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest)\n\n  //    14. If httpRequest’s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest’s header list.\n  if (!httpRequest.headersList.contains('user-agent')) {\n    httpRequest.headersList.append('user-agent', 'undici')\n  }\n\n  //    15. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest’s cache mode to \"no-store\".\n  if (\n    httpRequest.cache === 'default' &&\n    (httpRequest.headersList.contains('if-modified-since') ||\n      httpRequest.headersList.contains('if-none-match') ||\n      httpRequest.headersList.contains('if-unmodified-since') ||\n      httpRequest.headersList.contains('if-match') ||\n      httpRequest.headersList.contains('if-range'))\n  ) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    16. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest’s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n  if (\n    httpRequest.cache === 'no-cache' &&\n    !httpRequest.preventNoCacheCacheControlHeaderModification &&\n    !httpRequest.headersList.contains('cache-control')\n  ) {\n    httpRequest.headersList.append('cache-control', 'max-age=0')\n  }\n\n  //    17. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest’s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache')\n    }\n\n    // 2. If httpRequest’s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache')\n    }\n  }\n\n  //    18. If httpRequest’s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n  if (httpRequest.headersList.contains('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity')\n  }\n\n  //    19. Modify httpRequest’s header list per HTTP. Do not append a given\n  //    header if httpRequest’s header list contains that header’s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.contains('accept-encoding')) {\n    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')\n    }\n  }\n\n  //    20. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    21. If there’s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    22. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    23. If httpCache is null, then set httpRequest’s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    24. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then return the appropriate network error for fetchParams.\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached')\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch(\n      httpFetchParams,\n      includeCredentials,\n      isNewConnectionFetch\n    )\n\n    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (\n      !safeMethods.includes(httpRequest.method) &&\n      forwardResponse.status >= 200 &&\n      forwardResponse.status <= 399\n    ) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n  response.urlList = [...httpRequest.urlList]\n\n  // 12. If httpRequest’s header list contains `Range`, then set response’s\n  // range-requested flag.\n  if (httpRequest.headersList.contains('range')) {\n    response.rangeRequested = true\n  }\n\n  // 13. Set response’s request-includes-credentials to includeCredentials.\n  response.requestIncludesCredentials = includeCredentials\n\n  // 14. If response’s status is 401, httpRequest’s response tainting is not\n  // \"cors\", includeCredentials is true, and request’s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 15. If response’s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request’s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError()\n    }\n\n    // 2. ???\n\n    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 4. Prompt the end user as appropriate in request’s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required')\n  }\n\n  // 16. If all of the following are true\n  if (\n    // response’s status is 421\n    response.status === 421 &&\n    // isNewConnectionFetch is false\n    !isNewConnectionFetch &&\n    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n    (request.body == null || request.body.source != null)\n  ) {\n    // then:\n\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    fetchParams.controller.connection.destroy()\n\n    response = await httpNetworkOrCacheFetch(\n      fetchParams,\n      isAuthenticationFetch,\n      true\n    )\n  }\n\n  // 17. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 18. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch (\n  fetchParams,\n  includeCredentials = false,\n  forceNewConnection = false\n) {\n  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)\n\n  fetchParams.controller.connection = {\n    abort: null,\n    destroyed: false,\n    destroy (err) {\n      if (!this.destroyed) {\n        this.destroyed = true\n        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))\n      }\n    }\n  }\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 4. Let httpCache be the result of determining the HTTP cache partition,\n  // given request.\n  // TODO: cache\n  const httpCache = null\n\n  // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n  if (httpCache == null) {\n    request.cache = 'no-store'\n  }\n\n  // 6. Let networkPartitionKey be the result of determining the network\n  // partition key given request.\n  // TODO\n\n  // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n  // \"no\".\n  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars\n\n  // 8. Switch on request’s mode:\n  if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request’s current URL.\n    // TODO\n  } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request’s current URL’s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n  }\n\n  // 9. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If connection is failure, then return a network error.\n\n  //    2. Set timingInfo’s final connection timing info to the result of\n  //    calling clamp and coarsen connection timing info with connection’s\n  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s\n  //    cross-origin isolated capability.\n\n  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,\n  //    and request’s body’s source is null, then append (`Transfer-Encoding`,\n  //    `chunked`) to request’s header list.\n\n  //    4. Set timingInfo’s final network-request start time to the coarsened\n  //    shared current time given fetchParams’s cross-origin isolated\n  //    capability.\n\n  //    5. Set response to the result of making an HTTP request over connection\n  //    using request with the following caveats:\n\n  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n  //        - If request’s body is non-null, and request’s body’s source is null,\n  //        then the user agent may have a buffer of up to 64 kibibytes and store\n  //        a part of request’s body in that buffer. If the user agent reads from\n  //        request’s body beyond that buffer’s size and the user agent needs to\n  //        resend request, then instead return a network error.\n\n  //        - Set timingInfo’s final network-response start time to the coarsened\n  //        shared current time given fetchParams’s cross-origin isolated capability,\n  //        immediately after the user agent’s HTTP parser receives the first byte\n  //        of the response (e.g., frame header bytes for HTTP/2 or response status\n  //        line for HTTP/1.x).\n\n  //        - Wait until all the headers are transmitted.\n\n  //        - Any responses whose status is in the range 100 to 199, inclusive,\n  //        and is not 101, are to be ignored, except for the purposes of setting\n  //        timingInfo’s final network-response start time above.\n\n  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and\n  //    response is transferred via HTTP/1.0 or older, then return a network\n  //    error.\n\n  //    - If the HTTP request results in a TLS client certificate dialog, then:\n\n  //        1. If request’s window is an environment settings object, make the\n  //        dialog available in request’s window.\n\n  //        2. Otherwise, return a network error.\n\n  // To transmit request’s body body, run these steps:\n  let requestBody = null\n  // 1. If body is null and fetchParams’s process request end-of-body is\n  // non-null, then queue a fetch task given fetchParams’s process request\n  // end-of-body and fetchParams’s task destination.\n  if (request.body == null && fetchParams.processRequestEndOfBody) {\n    queueMicrotask(() => fetchParams.processRequestEndOfBody())\n  } else if (request.body != null) {\n    // 2. Otherwise, if body is non-null:\n\n    //    1. Let processBodyChunk given bytes be these steps:\n    const processBodyChunk = async function * (bytes) {\n      // 1. If the ongoing fetch is terminated, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. Run this step in parallel: transmit bytes.\n      yield bytes\n\n      // 3. If fetchParams’s process request body is non-null, then run\n      // fetchParams’s process request body given bytes’s length.\n      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)\n    }\n\n    // 2. Let processEndOfBody be these steps:\n    const processEndOfBody = () => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If fetchParams’s process request end-of-body is non-null,\n      // then run fetchParams’s process request end-of-body.\n      if (fetchParams.processRequestEndOfBody) {\n        fetchParams.processRequestEndOfBody()\n      }\n    }\n\n    // 3. Let processBodyError given e be these steps:\n    const processBodyError = (e) => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If e is an \"AbortError\" DOMException, then abort fetchParams’s controller.\n      if (e.name === 'AbortError') {\n        fetchParams.controller.abort()\n      } else {\n        fetchParams.controller.terminate(e)\n      }\n    }\n\n    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,\n    // processBodyError, and fetchParams’s task destination.\n    requestBody = (async function * () {\n      try {\n        for await (const bytes of request.body.stream) {\n          yield * processBodyChunk(bytes)\n        }\n        processEndOfBody()\n      } catch (err) {\n        processBodyError(err)\n      }\n    })()\n  }\n\n  try {\n    // socket is only provided for websockets\n    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })\n\n    if (socket) {\n      response = makeResponse({ status, statusText, headersList, socket })\n    } else {\n      const iterator = body[Symbol.asyncIterator]()\n      fetchParams.controller.next = () => iterator.next()\n\n      response = makeResponse({ status, statusText, headersList })\n    }\n  } catch (err) {\n    // 10. If aborted, then:\n    if (err.name === 'AbortError') {\n      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      fetchParams.controller.connection.destroy()\n\n      // 2. Return the appropriate network error for fetchParams.\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    return makeNetworkError(err)\n  }\n\n  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n  // if it is suspended.\n  const pullAlgorithm = () => {\n    fetchParams.controller.resume()\n  }\n\n  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s\n  // controller with reason, given reason.\n  const cancelAlgorithm = (reason) => {\n    fetchParams.controller.abort(reason)\n  }\n\n  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n  // the user agent.\n  // TODO\n\n  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n  // TODO\n\n  // 15. Let stream be a new ReadableStream.\n  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,\n  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  const stream = new ReadableStream(\n    {\n      async start (controller) {\n        fetchParams.controller.controller = controller\n      },\n      async pull (controller) {\n        await pullAlgorithm(controller)\n      },\n      async cancel (reason) {\n        await cancelAlgorithm(reason)\n      }\n    },\n    {\n      highWaterMark: 0,\n      size () {\n        return 1\n      }\n    }\n  )\n\n  // 17. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. Set response’s body to a new body whose stream is stream.\n  response.body = { stream }\n\n  //    2. If response is not a network error and request’s cache mode is\n  //    not \"no-store\", then update response in httpCache for request.\n  //    TODO\n\n  //    3. If includeCredentials is true and the user agent is not configured\n  //    to block cookies for request (see section 7 of [COOKIES]), then run the\n  //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n  //    the value of each header whose name is a byte-case-insensitive match for\n  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.\n  //    TODO\n\n  // 18. If aborted, then:\n  // TODO\n\n  // 19. Run these steps in parallel:\n\n  //    1. Run these steps, but abort when fetchParams is canceled:\n  fetchParams.controller.on('terminated', onAborted)\n  fetchParams.controller.resume = async () => {\n    // 1. While true\n    while (true) {\n      // 1-3. See onData...\n\n      // 4. Set bytes to the result of handling content codings given\n      // codings and bytes.\n      let bytes\n      let isFailure\n      try {\n        const { done, value } = await fetchParams.controller.next()\n\n        if (isAborted(fetchParams)) {\n          break\n        }\n\n        bytes = done ? undefined : value\n      } catch (err) {\n        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n          // zlib doesn't like empty streams.\n          bytes = undefined\n        } else {\n          bytes = err\n\n          // err may be propagated from the result of calling readablestream.cancel,\n          // which might not be an error. https://github.com/nodejs/undici/issues/2009\n          isFailure = true\n        }\n      }\n\n      if (bytes === undefined) {\n        // 2. Otherwise, if the bytes transmission for response’s message\n        // body is done normally and stream is readable, then close\n        // stream, finalize response for fetchParams and response, and\n        // abort these in-parallel steps.\n        readableStreamClose(fetchParams.controller.controller)\n\n        finalizeResponse(fetchParams, response)\n\n        return\n      }\n\n      // 5. Increase timingInfo’s decoded body size by bytes’s length.\n      timingInfo.decodedBodySize += bytes?.byteLength ?? 0\n\n      // 6. If bytes is failure, then terminate fetchParams’s controller.\n      if (isFailure) {\n        fetchParams.controller.terminate(bytes)\n        return\n      }\n\n      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n      // into stream.\n      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))\n\n      // 8. If stream is errored, then terminate the ongoing fetch.\n      if (isErrored(stream)) {\n        fetchParams.controller.terminate()\n        return\n      }\n\n      // 9. If stream doesn’t need more data ask the user agent to suspend\n      // the ongoing fetch.\n      if (!fetchParams.controller.controller.desiredSize) {\n        return\n      }\n    }\n  }\n\n  //    2. If aborted, then:\n  function onAborted (reason) {\n    // 2. If fetchParams is aborted, then:\n    if (isAborted(fetchParams)) {\n      // 1. Set response’s aborted flag.\n      response.aborted = true\n\n      // 2. If stream is readable, then error stream with the result of\n      //    deserialize a serialized abort reason given fetchParams’s\n      //    controller’s serialized abort reason and an\n      //    implementation-defined realm.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(\n          fetchParams.controller.serializedAbortReason\n        )\n      }\n    } else {\n      // 3. Otherwise, if stream is readable, error stream with a TypeError.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(new TypeError('terminated', {\n          cause: isErrorLike(reason) ? reason : undefined\n        }))\n      }\n    }\n\n    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n    fetchParams.controller.connection.destroy()\n  }\n\n  // 20. Return response.\n  return response\n\n  async function dispatch ({ body }) {\n    const url = requestCurrentURL(request)\n    /** @type {import('../..').Agent} */\n    const agent = fetchParams.controller.dispatcher\n\n    return new Promise((resolve, reject) => agent.dispatch(\n      {\n        path: url.pathname + url.search,\n        origin: url.origin,\n        method: request.method,\n        body: fetchParams.controller.dispatcher.isMockActive ? request.body && request.body.source : body,\n        headers: request.headersList.entries,\n        maxRedirections: 0,\n        upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n      },\n      {\n        body: null,\n        abort: null,\n\n        onConnect (abort) {\n          // TODO (fix): Do we need connection here?\n          const { connection } = fetchParams.controller\n\n          if (connection.destroyed) {\n            abort(new DOMException('The operation was aborted.', 'AbortError'))\n          } else {\n            fetchParams.controller.on('terminated', abort)\n            this.abort = connection.abort = abort\n          }\n        },\n\n        onHeaders (status, headersList, resume, statusText) {\n          if (status < 200) {\n            return\n          }\n\n          let codings = []\n          let location = ''\n\n          const headers = new Headers()\n          for (let n = 0; n < headersList.length; n += 2) {\n            const key = headersList[n + 0].toString('latin1')\n            const val = headersList[n + 1].toString('latin1')\n\n            if (key.toLowerCase() === 'content-encoding') {\n              // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n              // \"All content-coding values are case-insensitive...\"\n              codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()\n            } else if (key.toLowerCase() === 'location') {\n              location = val\n            }\n\n            headers.append(key, val)\n          }\n\n          this.body = new Readable({ read: resume })\n\n          const decoders = []\n\n          const willFollow = request.redirect === 'follow' &&\n            location &&\n            redirectStatus.includes(status)\n\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n            for (const coding of codings) {\n              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n              if (coding === 'x-gzip' || coding === 'gzip') {\n                decoders.push(zlib.createGunzip({\n                  // Be less strict when decoding compressed responses, since sometimes\n                  // servers send slightly invalid responses that are still accepted\n                  // by common browsers.\n                  // Always using Z_SYNC_FLUSH is what cURL does.\n                  flush: zlib.constants.Z_SYNC_FLUSH,\n                  finishFlush: zlib.constants.Z_SYNC_FLUSH\n                }))\n              } else if (coding === 'deflate') {\n                decoders.push(zlib.createInflate())\n              } else if (coding === 'br') {\n                decoders.push(zlib.createBrotliDecompress())\n              } else {\n                decoders.length = 0\n                break\n              }\n            }\n          }\n\n          resolve({\n            status,\n            statusText,\n            headersList: headers[kHeadersList],\n            body: decoders.length\n              ? pipeline(this.body, ...decoders, () => { })\n              : this.body.on('error', () => {})\n          })\n\n          return true\n        },\n\n        onData (chunk) {\n          if (fetchParams.controller.dump) {\n            return\n          }\n\n          // 1. If one or more bytes have been transmitted from response’s\n          // message body, then:\n\n          //  1. Let bytes be the transmitted bytes.\n          const bytes = chunk\n\n          //  2. Let codings be the result of extracting header list values\n          //  given `Content-Encoding` and response’s header list.\n          //  See pullAlgorithm.\n\n          //  3. Increase timingInfo’s encoded body size by bytes’s length.\n          timingInfo.encodedBodySize += bytes.byteLength\n\n          //  4. See pullAlgorithm...\n\n          return this.body.push(bytes)\n        },\n\n        onComplete () {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          fetchParams.controller.ended = true\n\n          this.body.push(null)\n        },\n\n        onError (error) {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          this.body?.destroy(error)\n\n          fetchParams.controller.terminate(error)\n\n          reject(error)\n        },\n\n        onUpgrade (status, headersList, socket) {\n          if (status !== 101) {\n            return\n          }\n\n          const headers = new Headers()\n\n          for (let n = 0; n < headersList.length; n += 2) {\n            const key = headersList[n + 0].toString('latin1')\n            const val = headersList[n + 1].toString('latin1')\n\n            headers.append(key, val)\n          }\n\n          resolve({\n            status,\n            statusText: STATUS_CODES[status],\n            headersList: headers[kHeadersList],\n            socket\n          })\n\n          return true\n        }\n      }\n    ))\n  }\n}\n\nmodule.exports = {\n  fetch,\n  Fetch,\n  fetching,\n  finalizeAndReportTiming\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}