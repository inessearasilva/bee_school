{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\nvar invariant = require(\"./invariant\");\n/**\r\n * Convert array-like objects to arrays.\r\n *\r\n * This API assumes the caller knows the contents of the data type. For less\r\n * well defined inputs use createArrayFromMixed.\r\n *\r\n * @param {object|function|filelist} obj\r\n * @return {array}\r\n */\n\nfunction toArray(obj) {\n  var length = obj.length; // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n  !(typeof length === 'number') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0; // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {// IE < 9 does not support Array#slice on collections objects\n    }\n  } // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n/**\r\n * Perform a heuristic test to determine if an object is \"array-like\".\r\n *\r\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\r\n *   Joshu replied: \"Mu.\"\r\n *\r\n * This function determines if its argument has \"array nature\": it returns\r\n * true if the argument is an actual array, an `arguments' object, or an\r\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\r\n *\r\n * It will return false for other array-like objects like Filelist.\r\n *\r\n * @param {*} obj\r\n * @return {boolean}\r\n */\n\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n/**\r\n * Ensure that the argument is an array by wrapping it in an array if it is not.\r\n * Creates a copy of the argument if it is already an array.\r\n *\r\n * This is mostly useful idiomatically:\r\n *\r\n *   var createArrayFromMixed = require('createArrayFromMixed');\r\n *\r\n *   function takesOneOrMoreThings(things) {\r\n *     things = createArrayFromMixed(things);\r\n *     ...\r\n *   }\r\n *\r\n * This allows you to treat `things' as an array, but accept scalars in the API.\r\n *\r\n * If you need to convert an array-like object, like `arguments`, into an array\r\n * use toArray instead.\r\n *\r\n * @param {*} obj\r\n * @return {array}\r\n */\n\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\nmodule.exports = createArrayFromMixed;","map":{"version":3,"names":["invariant","require","toArray","obj","length","Array","isArray","process","env","NODE_ENV","callee","hasOwnProperty","prototype","slice","call","e","ret","ii","hasArrayNature","nodeType","createArrayFromMixed","module","exports"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/fbjs/lib/createArrayFromMixed.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\r\nvar invariant = require(\"./invariant\");\r\n/**\r\n * Convert array-like objects to arrays.\r\n *\r\n * This API assumes the caller knows the contents of the data type. For less\r\n * well defined inputs use createArrayFromMixed.\r\n *\r\n * @param {object|function|filelist} obj\r\n * @return {array}\r\n */\r\n\r\n\r\nfunction toArray(obj) {\r\n  var length = obj.length; // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\r\n  // in old versions of Safari).\r\n\r\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\r\n  !(typeof length === 'number') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\r\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\r\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0; // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\r\n  // without method will throw during the slice call and skip straight to the\r\n  // fallback.\r\n\r\n  if (obj.hasOwnProperty) {\r\n    try {\r\n      return Array.prototype.slice.call(obj);\r\n    } catch (e) {// IE < 9 does not support Array#slice on collections objects\r\n    }\r\n  } // Fall back to copying key by key. This assumes all keys have a value,\r\n  // so will not preserve sparsely populated inputs.\r\n\r\n\r\n  var ret = Array(length);\r\n\r\n  for (var ii = 0; ii < length; ii++) {\r\n    ret[ii] = obj[ii];\r\n  }\r\n\r\n  return ret;\r\n}\r\n/**\r\n * Perform a heuristic test to determine if an object is \"array-like\".\r\n *\r\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\r\n *   Joshu replied: \"Mu.\"\r\n *\r\n * This function determines if its argument has \"array nature\": it returns\r\n * true if the argument is an actual array, an `arguments' object, or an\r\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\r\n *\r\n * It will return false for other array-like objects like Filelist.\r\n *\r\n * @param {*} obj\r\n * @return {boolean}\r\n */\r\n\r\n\r\nfunction hasArrayNature(obj) {\r\n  return (// not null/false\r\n    !!obj && ( // arrays are objects, NodeLists are functions in Safari\r\n    typeof obj == 'object' || typeof obj == 'function') && // quacks like an array\r\n    'length' in obj && // not window\r\n    !('setInterval' in obj) && // no DOM node should be considered an array-like\r\n    // a 'select' element has 'length' and 'item' properties on IE8\r\n    typeof obj.nodeType != 'number' && ( // a real array\r\n    Array.isArray(obj) || // arguments\r\n    'callee' in obj || // HTMLCollection/NodeList\r\n    'item' in obj)\r\n  );\r\n}\r\n/**\r\n * Ensure that the argument is an array by wrapping it in an array if it is not.\r\n * Creates a copy of the argument if it is already an array.\r\n *\r\n * This is mostly useful idiomatically:\r\n *\r\n *   var createArrayFromMixed = require('createArrayFromMixed');\r\n *\r\n *   function takesOneOrMoreThings(things) {\r\n *     things = createArrayFromMixed(things);\r\n *     ...\r\n *   }\r\n *\r\n * This allows you to treat `things' as an array, but accept scalars in the API.\r\n *\r\n * If you need to convert an array-like object, like `arguments`, into an array\r\n * use toArray instead.\r\n *\r\n * @param {*} obj\r\n * @return {array}\r\n */\r\n\r\n\r\nfunction createArrayFromMixed(obj) {\r\n  if (!hasArrayNature(obj)) {\r\n    return [obj];\r\n  } else if (Array.isArray(obj)) {\r\n    return obj.slice();\r\n  } else {\r\n    return toArray(obj);\r\n  }\r\n}\r\n\r\nmodule.exports = createArrayFromMixed;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}