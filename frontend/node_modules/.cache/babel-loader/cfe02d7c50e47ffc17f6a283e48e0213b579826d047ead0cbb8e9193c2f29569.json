{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n  /** Stack of the arrays we are looking at. */\n  var nodeStack = [nodes];\n  /** Stack of the indices within the arrays. */\n  var indexStack = [0];\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    var elem = nodeStack[0][indexStack[0]++];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  var elem = null;\n  for (var i = 0; i < nodes.length && !elem; i++) {\n    var node = nodes[i];\n    if (!(0, domhandler_1.isTag)(node)) {\n      continue;\n    } else if (test(node)) {\n      elem = node;\n    } else if (recurse && node.children.length > 0) {\n      elem = findOne(test, node.children, true);\n    }\n  }\n  return elem;\n}\nexports.findOne = findOne;\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nfunction existsOne(test, nodes) {\n  return nodes.some(function (checked) {\n    return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));\n  });\n}\nexports.existsOne = existsOne;\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n  var result = [];\n  var nodeStack = [nodes];\n  var indexStack = [0];\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    var elem = nodeStack[0][indexStack[0]++];\n    if (!(0, domhandler_1.isTag)(elem)) continue;\n    if (test(elem)) result.push(elem);\n    if (elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\nexports.findAll = findAll;","map":{"version":3,"mappings":"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","names":["filter","test","node","recurse","limit","find","Array","isArray","exports","nodes","result","nodeStack","indexStack","length","shift","elem","push","children","unshift","findOneChild","findOne","i","existsOne","some","checked","findAll"],"sources":["https://raw.githubusercontent.com/fb55/domutils/96c989e159c98218958f375ea04210f2d1b43c0c/src/querying.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}