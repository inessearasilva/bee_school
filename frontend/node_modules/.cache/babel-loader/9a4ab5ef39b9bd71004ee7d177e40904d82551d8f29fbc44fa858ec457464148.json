{"ast":null,"code":"import React, { useContext } from \"react\";\nimport Quantity from \"../../../../../components/Datatypes/Quantity/Quantity\";\nimport QuantitySingleUnit from \"../../../../../components/Datatypes/QuantitySingleUnit/QuantitySingleUnit\";\nimport { buildValidationEditMode } from \"../../../FormValidation/BuildValidation/BuildValidation\";\nimport { buildInitialValueEditMode } from \"../../../FormInitialValues/BuildInitialValue/BuildInitialValue\";\nimport { handleIsVisible } from \"../../../../../assets/functions/HandleTasks/handleIsVisible\";\nimport { handleIsEditable } from \"../../../../../assets/functions/HandleTasks/handleIsEditable\";\nimport { handleRules } from \"../../../../../assets/functions/HandleRules/handleRules\";\nimport { firstAnyItem } from \"../../../../../assets/functions/FirstAnyItem/FirstAnyItem\";\nimport CombinedContext from \"../../../../../contexts/CombinedContext\";\nimport { getParent } from \"../../../../../assets/functions/GetParentItem/getParent\";\nconst BuildQuantityEditMode = (item, itemIndex, pathArray, setFieldValue, values, errors, touched, setFieldTouched, isAny, cardinalityObject, sectionValidation, initialValues, validationSchema, itemSection, multipleSections, professionalTasks, order) => {\n  const context = useContext(CombinedContext);\n  let isVisible;\n  if (!item.TaskVisible) {\n    isVisible = false;\n  } else {\n    isVisible = handleIsVisible(item, professionalTasks);\n  }\n  let isEditable;\n  if (!item.TaskEditable) {\n    isEditable = false;\n  } else {\n    isEditable = handleIsEditable(item, professionalTasks);\n  }\n  const isRM = pathArray[0] === \"rm\";\n  const parentSection = isRM ? getParent(item.parentPath.split(\".\"), context.composition.template) : getParent(pathArray, context.composition.template);\n  const parentSectionVisibility = parentSection === \"parentless\" ? true : parentSection.TaskVisible.indexOf(\"All\") > -1 ? true : false;\n  if (isVisible || item.value.unit !== null && item.value.value !== null) {\n    const label = isRM ? item.itemName : item.node === null ? item.text : item.node.text;\n    let arrayUnit = [];\n    let arrayQuantity = [];\n    arrayUnit.push(\"value\", \"unit\");\n    arrayQuantity.push(\"value\", \"value\");\n    const pathLabelUnit = pathArray.concat(arrayUnit).join(\"-\");\n    const pathLabelQuantity = pathArray.concat(arrayQuantity).join(\"-\");\n    buildInitialValueEditMode(item, pathLabelUnit, initialValues);\n    buildInitialValueEditMode(item, pathLabelQuantity, initialValues);\n    let unitsList = [];\n    if (Array.isArray(item.units)) {\n      item.units.forEach(obj => {\n        unitsList.push(obj.unit);\n      });\n    } else {\n      unitsList.push(item.units.unit);\n    }\n    let ruleVisibility;\n    if (!item.ruleVisibility) {\n      ruleVisibility = true;\n    } else {\n      ruleVisibility = handleRules(item, values, \"visibility\");\n    }\n    if (isEditable && parentSectionVisibility) {\n      // Só processo a validação das unidades caso tiver mais do que uma unidade na unitList\n      if (unitsList.length > 1) {\n        buildValidationEditMode(item, pathLabelUnit, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections);\n      }\n      buildValidationEditMode(item, pathLabelQuantity, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections);\n    }\n    if (isVisible && ruleVisibility) {\n      if (isEditable) {\n        const ruleMandatory = handleRules(item, values, \"mandatory\");\n        if (unitsList.length > 1) {\n          return /*#__PURE__*/React.createElement(Quantity, {\n            key: itemIndex,\n            showLabel: !isAny || (order ? firstAnyItem(order, pathArray, isAny) : itemIndex === 0),\n            editMode: true,\n            valueUnit: values[pathLabelUnit],\n            valueQuantity: values[pathLabelQuantity],\n            onQuantityChange: setFieldValue,\n            label: label,\n            path: pathArray.join(\".\"),\n            pathLabelUnit: pathLabelUnit,\n            pathLabelQuantity: pathLabelQuantity,\n            errorUnit: touched[pathLabelUnit] && errors[pathLabelUnit] || touched[pathLabelQuantity] && errors[pathLabelUnit],\n            errorQuantity: touched[pathLabelQuantity] && errors[pathLabelQuantity] || touched[pathLabelUnit] && errors[pathLabelQuantity],\n            onTouch: setFieldTouched,\n            unitsList: unitsList,\n            sectionOccurrence: itemSection[itemSection.length - 1],\n            optional: item.occurrences.lowerOccurrences === 0,\n            optionalMandatory: !ruleMandatory,\n            description: isRM ? item.description : item.node === null ? \"\" : item.node.description,\n            order: order ? order[pathArray.join(\".\")] : null\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(QuantitySingleUnit, {\n            key: itemIndex,\n            showLabel: !isAny || (order ? firstAnyItem(order, pathArray, isAny) : itemIndex === 0),\n            editMode: true,\n            valueQuantity: values[pathLabelQuantity],\n            onQuantityChange: setFieldValue,\n            label: label,\n            path: pathArray.join(\".\"),\n            pathLabelQuantity: pathLabelQuantity,\n            pathLabelUnit: pathLabelUnit,\n            errorQuantity: touched[pathLabelQuantity] && errors[pathLabelQuantity],\n            onTouch: setFieldTouched,\n            unitsList: unitsList,\n            sectionOccurrence: itemSection[itemSection.length - 1],\n            optional: item.occurrences.lowerOccurrences === 0,\n            optionalMandatory: !ruleMandatory,\n            description: isRM ? item.description : item.node === null ? \"\" : item.node.description,\n            order: order ? order[pathArray.join(\".\")] : null\n          });\n        }\n      } else {\n        return /*#__PURE__*/React.createElement(Quantity, {\n          key: itemIndex,\n          showLabel: !isAny || (order ? firstAnyItem(order, pathArray, isAny) : itemIndex === 0),\n          editMode: false,\n          path: pathArray.join(\".\"),\n          value: values[pathLabelQuantity] === \"\" ? \"\" : values[pathLabelQuantity] + \" \" + values[pathLabelUnit],\n          label: label,\n          description: isRM ? item.description : item.node === null ? \"\" : item.node.description,\n          order: order ? order[pathArray.join(\".\")] : null\n        });\n      }\n    }\n  }\n};\nexport default BuildQuantityEditMode;","map":{"version":3,"names":["React","useContext","Quantity","QuantitySingleUnit","buildValidationEditMode","buildInitialValueEditMode","handleIsVisible","handleIsEditable","handleRules","firstAnyItem","CombinedContext","getParent","BuildQuantityEditMode","item","itemIndex","pathArray","setFieldValue","values","errors","touched","setFieldTouched","isAny","cardinalityObject","sectionValidation","initialValues","validationSchema","itemSection","multipleSections","professionalTasks","order","context","isVisible","TaskVisible","isEditable","TaskEditable","isRM","parentSection","parentPath","split","composition","template","parentSectionVisibility","indexOf","value","unit","label","itemName","node","text","arrayUnit","arrayQuantity","push","pathLabelUnit","concat","join","pathLabelQuantity","unitsList","Array","isArray","units","forEach","obj","ruleVisibility","length","ruleMandatory","createElement","key","showLabel","editMode","valueUnit","valueQuantity","onQuantityChange","path","errorUnit","errorQuantity","onTouch","sectionOccurrence","optional","occurrences","lowerOccurrences","optionalMandatory","description"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/BuildItems/BuildItemEditMode/BuildQuantity/BuildQuantity.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport Quantity from \"../../../../../components/Datatypes/Quantity/Quantity\";\nimport QuantitySingleUnit from \"../../../../../components/Datatypes/QuantitySingleUnit/QuantitySingleUnit\";\nimport { buildValidationEditMode } from \"../../../FormValidation/BuildValidation/BuildValidation\";\nimport { buildInitialValueEditMode } from \"../../../FormInitialValues/BuildInitialValue/BuildInitialValue\";\nimport { handleIsVisible } from \"../../../../../assets/functions/HandleTasks/handleIsVisible\";\nimport { handleIsEditable } from \"../../../../../assets/functions/HandleTasks/handleIsEditable\";\nimport { handleRules } from \"../../../../../assets/functions/HandleRules/handleRules\";\nimport { firstAnyItem } from \"../../../../../assets/functions/FirstAnyItem/FirstAnyItem\";\nimport CombinedContext from \"../../../../../contexts/CombinedContext\";\nimport { getParent } from \"../../../../../assets/functions/GetParentItem/getParent\";\n\nconst BuildQuantityEditMode = (item, itemIndex, pathArray, setFieldValue, values, errors, touched, setFieldTouched, isAny, cardinalityObject, sectionValidation, initialValues, validationSchema, itemSection, multipleSections, professionalTasks, order) => {\n  const context = useContext(CombinedContext);\n  let isVisible;\n\n  if (!item.TaskVisible) {\n    isVisible = false;\n  } else {\n    isVisible = handleIsVisible(item, professionalTasks);\n  }\n\n  let isEditable;\n\n  if (!item.TaskEditable) {\n    isEditable = false;\n  } else {\n    isEditable = handleIsEditable(item, professionalTasks);\n  }\n\n  const isRM = pathArray[0] === \"rm\";\n  const parentSection = isRM ? getParent(item.parentPath.split(\".\"), context.composition.template) : getParent(pathArray, context.composition.template);\n  const parentSectionVisibility = parentSection === \"parentless\" ? true : parentSection.TaskVisible.indexOf(\"All\") > -1 ? true : false;\n\n  if (isVisible || item.value.unit !== null && item.value.value !== null) {\n    const label = isRM ? item.itemName : item.node === null ? item.text : item.node.text;\n    let arrayUnit = [];\n    let arrayQuantity = [];\n    arrayUnit.push(\"value\", \"unit\");\n    arrayQuantity.push(\"value\", \"value\");\n    const pathLabelUnit = pathArray.concat(arrayUnit).join(\"-\");\n    const pathLabelQuantity = pathArray.concat(arrayQuantity).join(\"-\");\n    buildInitialValueEditMode(item, pathLabelUnit, initialValues);\n    buildInitialValueEditMode(item, pathLabelQuantity, initialValues);\n    let unitsList = [];\n\n    if (Array.isArray(item.units)) {\n      item.units.forEach(obj => {\n        unitsList.push(obj.unit);\n      });\n    } else {\n      unitsList.push(item.units.unit);\n    }\n\n    let ruleVisibility;\n\n    if (!item.ruleVisibility) {\n      ruleVisibility = true;\n    } else {\n      ruleVisibility = handleRules(item, values, \"visibility\");\n    }\n\n    if (isEditable && parentSectionVisibility) {\n      // Só processo a validação das unidades caso tiver mais do que uma unidade na unitList\n      if (unitsList.length > 1) {\n        buildValidationEditMode(item, pathLabelUnit, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections);\n      }\n\n      buildValidationEditMode(item, pathLabelQuantity, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections);\n    }\n\n    if (isVisible && ruleVisibility) {\n      if (isEditable) {\n        const ruleMandatory = handleRules(item, values, \"mandatory\");\n\n        if (unitsList.length > 1) {\n          return /*#__PURE__*/React.createElement(Quantity, {\n            key: itemIndex,\n            showLabel: !isAny || (order ? firstAnyItem(order, pathArray, isAny) : itemIndex === 0),\n            editMode: true,\n            valueUnit: values[pathLabelUnit],\n            valueQuantity: values[pathLabelQuantity],\n            onQuantityChange: setFieldValue,\n            label: label,\n            path: pathArray.join(\".\"),\n            pathLabelUnit: pathLabelUnit,\n            pathLabelQuantity: pathLabelQuantity,\n            errorUnit: touched[pathLabelUnit] && errors[pathLabelUnit] || touched[pathLabelQuantity] && errors[pathLabelUnit],\n            errorQuantity: touched[pathLabelQuantity] && errors[pathLabelQuantity] || touched[pathLabelUnit] && errors[pathLabelQuantity],\n            onTouch: setFieldTouched,\n            unitsList: unitsList,\n            sectionOccurrence: itemSection[itemSection.length - 1],\n            optional: item.occurrences.lowerOccurrences === 0,\n            optionalMandatory: !ruleMandatory,\n            description: isRM ? item.description : item.node === null ? \"\" : item.node.description,\n            order: order ? order[pathArray.join(\".\")] : null\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(QuantitySingleUnit, {\n            key: itemIndex,\n            showLabel: !isAny || (order ? firstAnyItem(order, pathArray, isAny) : itemIndex === 0),\n            editMode: true,\n            valueQuantity: values[pathLabelQuantity],\n            onQuantityChange: setFieldValue,\n            label: label,\n            path: pathArray.join(\".\"),\n            pathLabelQuantity: pathLabelQuantity,\n            pathLabelUnit: pathLabelUnit,\n            errorQuantity: touched[pathLabelQuantity] && errors[pathLabelQuantity],\n            onTouch: setFieldTouched,\n            unitsList: unitsList,\n            sectionOccurrence: itemSection[itemSection.length - 1],\n            optional: item.occurrences.lowerOccurrences === 0,\n            optionalMandatory: !ruleMandatory,\n            description: isRM ? item.description : item.node === null ? \"\" : item.node.description,\n            order: order ? order[pathArray.join(\".\")] : null\n          });\n        }\n      } else {\n        return /*#__PURE__*/React.createElement(Quantity, {\n          key: itemIndex,\n          showLabel: !isAny || (order ? firstAnyItem(order, pathArray, isAny) : itemIndex === 0),\n          editMode: false,\n          path: pathArray.join(\".\"),\n          value: values[pathLabelQuantity] === \"\" ? \"\" : values[pathLabelQuantity] + \" \" + values[pathLabelUnit],\n          label: label,\n          description: isRM ? item.description : item.node === null ? \"\" : item.node.description,\n          order: order ? order[pathArray.join(\".\")] : null\n        });\n      }\n    }\n  }\n};\n\nexport default BuildQuantityEditMode;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,QAAQ,MAAM,uDAAuD;AAC5E,OAAOC,kBAAkB,MAAM,2EAA2E;AAC1G,SAASC,uBAAuB,QAAQ,yDAAyD;AACjG,SAASC,yBAAyB,QAAQ,gEAAgE;AAC1G,SAASC,eAAe,QAAQ,6DAA6D;AAC7F,SAASC,gBAAgB,QAAQ,8DAA8D;AAC/F,SAASC,WAAW,QAAQ,yDAAyD;AACrF,SAASC,YAAY,QAAQ,2DAA2D;AACxF,OAAOC,eAAe,MAAM,yCAAyC;AACrE,SAASC,SAAS,QAAQ,yDAAyD;AAEnF,MAAMC,qBAAqB,GAAG,CAACC,IAAI,EAAEC,SAAS,EAAEC,SAAS,EAAEC,aAAa,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,eAAe,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,KAAK,KAAK;EAC5P,MAAMC,OAAO,GAAG7B,UAAU,CAACS,eAAe,CAAC;EAC3C,IAAIqB,SAAS;EAEb,IAAI,CAAClB,IAAI,CAACmB,WAAW,EAAE;IACrBD,SAAS,GAAG,KAAK;EACnB,CAAC,MAAM;IACLA,SAAS,GAAGzB,eAAe,CAACO,IAAI,EAAEe,iBAAiB,CAAC;EACtD;EAEA,IAAIK,UAAU;EAEd,IAAI,CAACpB,IAAI,CAACqB,YAAY,EAAE;IACtBD,UAAU,GAAG,KAAK;EACpB,CAAC,MAAM;IACLA,UAAU,GAAG1B,gBAAgB,CAACM,IAAI,EAAEe,iBAAiB,CAAC;EACxD;EAEA,MAAMO,IAAI,GAAGpB,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI;EAClC,MAAMqB,aAAa,GAAGD,IAAI,GAAGxB,SAAS,CAACE,IAAI,CAACwB,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,EAAER,OAAO,CAACS,WAAW,CAACC,QAAQ,CAAC,GAAG7B,SAAS,CAACI,SAAS,EAAEe,OAAO,CAACS,WAAW,CAACC,QAAQ,CAAC;EACrJ,MAAMC,uBAAuB,GAAGL,aAAa,KAAK,YAAY,GAAG,IAAI,GAAGA,aAAa,CAACJ,WAAW,CAACU,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK;EAEpI,IAAIX,SAAS,IAAIlB,IAAI,CAAC8B,KAAK,CAACC,IAAI,KAAK,IAAI,IAAI/B,IAAI,CAAC8B,KAAK,CAACA,KAAK,KAAK,IAAI,EAAE;IACtE,MAAME,KAAK,GAAGV,IAAI,GAAGtB,IAAI,CAACiC,QAAQ,GAAGjC,IAAI,CAACkC,IAAI,KAAK,IAAI,GAAGlC,IAAI,CAACmC,IAAI,GAAGnC,IAAI,CAACkC,IAAI,CAACC,IAAI;IACpF,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,aAAa,GAAG,EAAE;IACtBD,SAAS,CAACE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;IAC/BD,aAAa,CAACC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;IACpC,MAAMC,aAAa,GAAGrC,SAAS,CAACsC,MAAM,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;IAC3D,MAAMC,iBAAiB,GAAGxC,SAAS,CAACsC,MAAM,CAACH,aAAa,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;IACnEjD,yBAAyB,CAACQ,IAAI,EAAEuC,aAAa,EAAE5B,aAAa,CAAC;IAC7DnB,yBAAyB,CAACQ,IAAI,EAAE0C,iBAAiB,EAAE/B,aAAa,CAAC;IACjE,IAAIgC,SAAS,GAAG,EAAE;IAElB,IAAIC,KAAK,CAACC,OAAO,CAAC7C,IAAI,CAAC8C,KAAK,CAAC,EAAE;MAC7B9C,IAAI,CAAC8C,KAAK,CAACC,OAAO,CAACC,GAAG,IAAI;QACxBL,SAAS,CAACL,IAAI,CAACU,GAAG,CAACjB,IAAI,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,MAAM;MACLY,SAAS,CAACL,IAAI,CAACtC,IAAI,CAAC8C,KAAK,CAACf,IAAI,CAAC;IACjC;IAEA,IAAIkB,cAAc;IAElB,IAAI,CAACjD,IAAI,CAACiD,cAAc,EAAE;MACxBA,cAAc,GAAG,IAAI;IACvB,CAAC,MAAM;MACLA,cAAc,GAAGtD,WAAW,CAACK,IAAI,EAAEI,MAAM,EAAE,YAAY,CAAC;IAC1D;IAEA,IAAIgB,UAAU,IAAIQ,uBAAuB,EAAE;MACzC;MACA,IAAIe,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;QACxB3D,uBAAuB,CAACS,IAAI,EAAEuC,aAAa,EAAE9B,iBAAiB,EAAEG,gBAAgB,EAAEC,WAAW,EAAEH,iBAAiB,EAAEI,gBAAgB,CAAC;MACrI;MAEAvB,uBAAuB,CAACS,IAAI,EAAE0C,iBAAiB,EAAEjC,iBAAiB,EAAEG,gBAAgB,EAAEC,WAAW,EAAEH,iBAAiB,EAAEI,gBAAgB,CAAC;IACzI;IAEA,IAAII,SAAS,IAAI+B,cAAc,EAAE;MAC/B,IAAI7B,UAAU,EAAE;QACd,MAAM+B,aAAa,GAAGxD,WAAW,CAACK,IAAI,EAAEI,MAAM,EAAE,WAAW,CAAC;QAE5D,IAAIuC,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;UACxB,OAAO,aAAa/D,KAAK,CAACiE,aAAa,CAAC/D,QAAQ,EAAE;YAChDgE,GAAG,EAAEpD,SAAS;YACdqD,SAAS,EAAE,CAAC9C,KAAK,KAAKQ,KAAK,GAAGpB,YAAY,CAACoB,KAAK,EAAEd,SAAS,EAAEM,KAAK,CAAC,GAAGP,SAAS,KAAK,CAAC,CAAC;YACtFsD,QAAQ,EAAE,IAAI;YACdC,SAAS,EAAEpD,MAAM,CAACmC,aAAa,CAAC;YAChCkB,aAAa,EAAErD,MAAM,CAACsC,iBAAiB,CAAC;YACxCgB,gBAAgB,EAAEvD,aAAa;YAC/B6B,KAAK,EAAEA,KAAK;YACZ2B,IAAI,EAAEzD,SAAS,CAACuC,IAAI,CAAC,GAAG,CAAC;YACzBF,aAAa,EAAEA,aAAa;YAC5BG,iBAAiB,EAAEA,iBAAiB;YACpCkB,SAAS,EAAEtD,OAAO,CAACiC,aAAa,CAAC,IAAIlC,MAAM,CAACkC,aAAa,CAAC,IAAIjC,OAAO,CAACoC,iBAAiB,CAAC,IAAIrC,MAAM,CAACkC,aAAa,CAAC;YACjHsB,aAAa,EAAEvD,OAAO,CAACoC,iBAAiB,CAAC,IAAIrC,MAAM,CAACqC,iBAAiB,CAAC,IAAIpC,OAAO,CAACiC,aAAa,CAAC,IAAIlC,MAAM,CAACqC,iBAAiB,CAAC;YAC7HoB,OAAO,EAAEvD,eAAe;YACxBoC,SAAS,EAAEA,SAAS;YACpBoB,iBAAiB,EAAElD,WAAW,CAACA,WAAW,CAACqC,MAAM,GAAG,CAAC,CAAC;YACtDc,QAAQ,EAAEhE,IAAI,CAACiE,WAAW,CAACC,gBAAgB,KAAK,CAAC;YACjDC,iBAAiB,EAAE,CAAChB,aAAa;YACjCiB,WAAW,EAAE9C,IAAI,GAAGtB,IAAI,CAACoE,WAAW,GAAGpE,IAAI,CAACkC,IAAI,KAAK,IAAI,GAAG,EAAE,GAAGlC,IAAI,CAACkC,IAAI,CAACkC,WAAW;YACtFpD,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAACd,SAAS,CAACuC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;UAC9C,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,OAAO,aAAatD,KAAK,CAACiE,aAAa,CAAC9D,kBAAkB,EAAE;YAC1D+D,GAAG,EAAEpD,SAAS;YACdqD,SAAS,EAAE,CAAC9C,KAAK,KAAKQ,KAAK,GAAGpB,YAAY,CAACoB,KAAK,EAAEd,SAAS,EAAEM,KAAK,CAAC,GAAGP,SAAS,KAAK,CAAC,CAAC;YACtFsD,QAAQ,EAAE,IAAI;YACdE,aAAa,EAAErD,MAAM,CAACsC,iBAAiB,CAAC;YACxCgB,gBAAgB,EAAEvD,aAAa;YAC/B6B,KAAK,EAAEA,KAAK;YACZ2B,IAAI,EAAEzD,SAAS,CAACuC,IAAI,CAAC,GAAG,CAAC;YACzBC,iBAAiB,EAAEA,iBAAiB;YACpCH,aAAa,EAAEA,aAAa;YAC5BsB,aAAa,EAAEvD,OAAO,CAACoC,iBAAiB,CAAC,IAAIrC,MAAM,CAACqC,iBAAiB,CAAC;YACtEoB,OAAO,EAAEvD,eAAe;YACxBoC,SAAS,EAAEA,SAAS;YACpBoB,iBAAiB,EAAElD,WAAW,CAACA,WAAW,CAACqC,MAAM,GAAG,CAAC,CAAC;YACtDc,QAAQ,EAAEhE,IAAI,CAACiE,WAAW,CAACC,gBAAgB,KAAK,CAAC;YACjDC,iBAAiB,EAAE,CAAChB,aAAa;YACjCiB,WAAW,EAAE9C,IAAI,GAAGtB,IAAI,CAACoE,WAAW,GAAGpE,IAAI,CAACkC,IAAI,KAAK,IAAI,GAAG,EAAE,GAAGlC,IAAI,CAACkC,IAAI,CAACkC,WAAW;YACtFpD,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAACd,SAAS,CAACuC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;UAC9C,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACL,OAAO,aAAatD,KAAK,CAACiE,aAAa,CAAC/D,QAAQ,EAAE;UAChDgE,GAAG,EAAEpD,SAAS;UACdqD,SAAS,EAAE,CAAC9C,KAAK,KAAKQ,KAAK,GAAGpB,YAAY,CAACoB,KAAK,EAAEd,SAAS,EAAEM,KAAK,CAAC,GAAGP,SAAS,KAAK,CAAC,CAAC;UACtFsD,QAAQ,EAAE,KAAK;UACfI,IAAI,EAAEzD,SAAS,CAACuC,IAAI,CAAC,GAAG,CAAC;UACzBX,KAAK,EAAE1B,MAAM,CAACsC,iBAAiB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAGtC,MAAM,CAACsC,iBAAiB,CAAC,GAAG,GAAG,GAAGtC,MAAM,CAACmC,aAAa,CAAC;UACtGP,KAAK,EAAEA,KAAK;UACZoC,WAAW,EAAE9C,IAAI,GAAGtB,IAAI,CAACoE,WAAW,GAAGpE,IAAI,CAACkC,IAAI,KAAK,IAAI,GAAG,EAAE,GAAGlC,IAAI,CAACkC,IAAI,CAACkC,WAAW;UACtFpD,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAACd,SAAS,CAACuC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;QAC9C,CAAC,CAAC;MACJ;IACF;EACF;AACF,CAAC;AAED,eAAe1C,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}