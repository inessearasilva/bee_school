{"ast":null,"code":"import _objectSpread from\"C:/Users/ines_/fisiosys/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import objPath from\"object-path\";var replaceValuesJDT=function replaceValuesJDT(jdt,composition){if(!composition){// handle the case where composition is undefined or null\nreturn jdt;}// make a copy of the jdt\nvar newJDT=_objectSpread({},jdt);// regular expression to remove everything in the composition except the itemPath\nvar regex=/((?!value|start|end|date|time|unit).)*/g;// get all itemPaths from the composition using the regular expression\nvar compositionKeys=Object.keys(composition).map(function(key){return key.match(regex)[0].slice(0,-1);});// array to hold the values of selected options\nvar selectedOptionValues=[];// iterate through each itemPath in the composition\nfor(var index in compositionKeys){var itemPath=compositionKeys[index];// get the corresponding item in the JDT\nvar obj=objPath.get(newJDT,itemPath);// if the item is found, replace its value with the value from the composition\nif(obj!==undefined){switch(obj.dataType){case\"DV_DATE_TIME\":obj.value.date=composition[itemPath.concat(\".value.date\")];obj.value.time=composition[itemPath.concat(\".value.time\")];break;case\"DV_DURATION\":case\"DV_QUANTITY\":obj.value.value=composition[itemPath.concat(\".value.value\")];obj.value.unit=composition[itemPath.concat(\".value.unit\")];break;case\"DV_INTERVAL<DV_DATE>\":case\"DV_INTERVAL<DV_COUNT>\":case\"DV_INTERVAL<DV_TIME>\":obj.value.start=composition[itemPath.concat(\".value.start\")];obj.value.end=composition[itemPath.concat(\".value.end\")];break;case\"DV_INTERVAL<DV_DATE_TIME>\":obj.value.date.start=composition[itemPath.concat(\".value.date.start\")];obj.value.date.end=composition[itemPath.concat(\".value.date.end\")];obj.value.time.start=composition[itemPath.concat(\".value.time.start\")];obj.value.time.end=composition[itemPath.concat(\".value.time.end\")];break;case\"DV_INTERVAL<DV_QUANTITY>\":obj.value.value.start=composition[itemPath.concat(\".value.value.start\")];obj.value.value.end=composition[itemPath.concat(\".value.value.end\")];obj.value.unit=composition[itemPath.concat(\".value.unit\")];break;default:// for all other data types, replace the value property\nif(composition[itemPath.concat(\".value\")]){obj.value=composition[itemPath.concat(\".value\")];// if the value property is a number, add it to the selectedOptionValues array\nif(obj.value&&typeof obj.value.value===\"number\"){selectedOptionValues.push(obj.value.value);}}}}}// calculate the total score by summing the values of selected options\nvar totalScore=selectedOptionValues.reduce(function(acc,curr){return acc+curr;},0);// update the Total Score item in the JDT with the calculated value\nobjPath.set(newJDT,\"items.0.0.items.12.value\",totalScore);// calculate the average score \nvar numSelectedOptions=selectedOptionValues.length;var avgScore=totalScore*12/numSelectedOptions;// update the Total Score item in the JDT with the calculated value\nobjPath.set(newJDT,\"items.0.0.items.13.value\",avgScore);console.log('avg',avgScore);var gradingItem=objPath.get(newJDT,\"items.0.0.items.14\");if(avgScore<20){gradingItem.value=gradingItem.itemsList[0];}else if(avgScore>=20&&avgScore<30){gradingItem.value=gradingItem.itemsList[1];}else if(avgScore>=30&&avgScore<40){gradingItem.value=gradingItem.itemsList[2];}else{gradingItem.value=gradingItem.itemsList[3];}objPath.set(newJDT,\"items.0.0.items.14.value\",gradingItem.value);console.log('Grading',gradingItem.value);return newJDT;};export{replaceValuesJDT};","map":{"version":3,"names":["objPath","replaceValuesJDT","jdt","composition","newJDT","regex","compositionKeys","Object","keys","map","key","match","slice","selectedOptionValues","index","itemPath","obj","get","undefined","dataType","value","date","concat","time","unit","start","end","push","totalScore","reduce","acc","curr","set","numSelectedOptions","length","avgScore","console","log","gradingItem","itemsList"],"sources":["C:/Users/ines_/fisiosys/frontend/src/views/dashboard/SavedValues.js"],"sourcesContent":["import objPath from \"object-path\";\r\n\r\nconst replaceValuesJDT = (jdt, composition) => {\r\n    if (!composition) {\r\n      // handle the case where composition is undefined or null\r\n      return jdt;\r\n    }\r\n  \r\n    // make a copy of the jdt\r\n    let newJDT = { ...jdt };\r\n  \r\n    // regular expression to remove everything in the composition except the itemPath\r\n    const regex = /((?!value|start|end|date|time|unit).)*/g;\r\n  \r\n    // get all itemPaths from the composition using the regular expression\r\n    const compositionKeys = Object.keys(composition).map((key) =>\r\n      key.match(regex)[0].slice(0, -1)\r\n    );\r\n  \r\n    // array to hold the values of selected options\r\n    const selectedOptionValues = [];\r\n  \r\n    // iterate through each itemPath in the composition\r\n    for (let index in compositionKeys) {\r\n      let itemPath = compositionKeys[index];\r\n  \r\n      // get the corresponding item in the JDT\r\n      let obj = objPath.get(newJDT, itemPath);\r\n  \r\n      // if the item is found, replace its value with the value from the composition\r\n      if (obj !== undefined) {\r\n        switch (obj.dataType) {\r\n          case \"DV_DATE_TIME\":\r\n            obj.value.date = composition[itemPath.concat(\".value.date\")];\r\n            obj.value.time = composition[itemPath.concat(\".value.time\")];\r\n            break;\r\n          case \"DV_DURATION\":\r\n          case \"DV_QUANTITY\":\r\n            obj.value.value = composition[itemPath.concat(\".value.value\")];\r\n            obj.value.unit = composition[itemPath.concat(\".value.unit\")];\r\n            break;\r\n          case \"DV_INTERVAL<DV_DATE>\":\r\n          case \"DV_INTERVAL<DV_COUNT>\":\r\n          case \"DV_INTERVAL<DV_TIME>\":\r\n            obj.value.start = composition[itemPath.concat(\".value.start\")];\r\n            obj.value.end = composition[itemPath.concat(\".value.end\")];\r\n            break;\r\n          case \"DV_INTERVAL<DV_DATE_TIME>\":\r\n            obj.value.date.start = composition[itemPath.concat(\".value.date.start\")];\r\n            obj.value.date.end = composition[itemPath.concat(\".value.date.end\")];\r\n            obj.value.time.start = composition[itemPath.concat(\".value.time.start\")];\r\n            obj.value.time.end = composition[itemPath.concat(\".value.time.end\")];\r\n            break;\r\n          case \"DV_INTERVAL<DV_QUANTITY>\":\r\n            obj.value.value.start = composition[itemPath.concat(\".value.value.start\")];\r\n            obj.value.value.end = composition[itemPath.concat(\".value.value.end\")];\r\n            obj.value.unit = composition[itemPath.concat(\".value.unit\")];\r\n            break;\r\n          default:\r\n            // for all other data types, replace the value property\r\n            if (composition[itemPath.concat(\".value\")]) {\r\n                obj.value = composition[itemPath.concat(\".value\")];\r\n      \r\n                // if the value property is a number, add it to the selectedOptionValues array\r\n                if (obj.value && typeof obj.value.value === \"number\") {\r\n                  selectedOptionValues.push(obj.value.value);\r\n            }\r\n            }\r\n        }\r\n      }\r\n    }\r\n  \r\n    // calculate the total score by summing the values of selected options\r\n    const totalScore = selectedOptionValues.reduce((acc, curr) => acc + curr, 0);\r\n  \r\n    // update the Total Score item in the JDT with the calculated value\r\n    objPath.set(newJDT, \"items.0.0.items.12.value\", totalScore);\r\n\r\n    // calculate the average score \r\n    const numSelectedOptions = selectedOptionValues.length;\r\n    const avgScore = (totalScore * 12) / numSelectedOptions;\r\n  \r\n    // update the Total Score item in the JDT with the calculated value\r\n    objPath.set(newJDT, \"items.0.0.items.13.value\", avgScore);\r\n\r\n    console.log('avg',avgScore);\r\n\r\n    \r\n    const gradingItem = objPath.get(newJDT, \"items.0.0.items.14\");\r\n\r\n    if (avgScore < 20) {\r\n        gradingItem.value = gradingItem.itemsList[0];\r\n    } else if (avgScore >= 20 && avgScore < 30) {\r\n        gradingItem.value = gradingItem.itemsList[1];\r\n    } else if (avgScore >= 30 && avgScore < 40) {\r\n        gradingItem.value = gradingItem.itemsList[2];\r\n    } else {\r\n        gradingItem.value = gradingItem.itemsList[3];\r\n    }\r\n\r\n    objPath.set(newJDT, \"items.0.0.items.14.value\", gradingItem.value);\r\n    console.log('Grading',gradingItem.value);\r\n    \r\n\r\n    return newJDT;\r\n  };\r\n  \r\n  export { replaceValuesJDT };\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}