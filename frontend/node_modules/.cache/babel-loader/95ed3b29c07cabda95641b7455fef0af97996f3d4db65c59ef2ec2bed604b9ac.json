{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n'use strict';\n\nvar UserAgentData = require(\"./UserAgentData\");\nvar VersionRange = require(\"./VersionRange\");\nvar mapObject = require(\"./mapObject\");\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\n/**\r\n * Checks to see whether `name` and `version` satisfy `query`.\r\n *\r\n * @param {string} name Name of the browser, device, engine or platform\r\n * @param {?string} version Version of the browser, engine or platform\r\n * @param {string} query Query of form \"Name [range expression]\"\r\n * @param {?function} normalizer Optional pre-processor for range expression\r\n * @return {boolean}\r\n */\n\nfunction compare(name, version, query, normalizer) {\n  // check for exact match with no version\n  if (name === query) {\n    return true;\n  } // check for non-matching names\n\n  if (!query.startsWith(name)) {\n    return false;\n  } // full comparison with version\n\n  var range = query.slice(name.length);\n  if (version) {\n    range = normalizer ? normalizer(range) : range;\n    return VersionRange.contains(range, version);\n  }\n  return false;\n}\n/**\r\n * Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\r\n * platform.\r\n *\r\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\r\n *\r\n * @param {string} version\r\n * @return {string}\r\n */\n\nfunction normalizePlatformVersion(version) {\n  if (UserAgentData.platformName === 'Windows') {\n    return version.replace(/^\\s*NT/, '');\n  }\n  return version;\n}\n/**\r\n * Provides client-side access to the authoritative PHP-generated User Agent\r\n * information supplied by the server.\r\n */\n\nvar UserAgent = {\n  /**\r\n   * Check if the User Agent browser matches `query`.\r\n   *\r\n   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\r\n   *\r\n   * Valid browser names include:\r\n   *\r\n   * - ACCESS NetFront\r\n   * - AOL\r\n   * - Amazon Silk\r\n   * - Android\r\n   * - BlackBerry\r\n   * - BlackBerry PlayBook\r\n   * - Chrome\r\n   * - Chrome for iOS\r\n   * - Chrome frame\r\n   * - Facebook PHP SDK\r\n   * - Facebook for iOS\r\n   * - Firefox\r\n   * - IE\r\n   * - IE Mobile\r\n   * - Mobile Safari\r\n   * - Motorola Internet Browser\r\n   * - Nokia\r\n   * - Openwave Mobile Browser\r\n   * - Opera\r\n   * - Opera Mini\r\n   * - Opera Mobile\r\n   * - Safari\r\n   * - UIWebView\r\n   * - Unknown\r\n   * - webOS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\r\n   * https://fburl.com/50728104).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\n  isBrowser: function isBrowser(query) {\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\n  },\n  /**\r\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\n    return compare(UserAgentData.browserArchitecture, null, query);\n  },\n  /**\r\n   * Check if the User Agent device matches `query`.\r\n   *\r\n   * `query` should be a string like \"iPhone\" or \"iPad\".\r\n   *\r\n   * Valid device names include:\r\n   *\r\n   * - Kindle\r\n   * - Kindle Fire\r\n   * - Unknown\r\n   * - iPad\r\n   * - iPhone\r\n   * - iPod\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\r\n   * https://fburl.com/50728332).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name\"\r\n   * @return {boolean}\r\n   */\n  isDevice: function isDevice(query) {\n    return compare(UserAgentData.deviceName, null, query);\n  },\n  /**\r\n   * Check if the User Agent rendering engine matches `query`.\r\n   *\r\n   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\r\n   *\r\n   * Valid engine names include:\r\n   *\r\n   * - Gecko\r\n   * - Presto\r\n   * - Trident\r\n   * - WebKit\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\r\n   * class related classes in the same file (see calls to `new\r\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\n  isEngine: function isEngine(query) {\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\n  },\n  /**\r\n   * Check if the User Agent platform matches `query`.\r\n   *\r\n   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\r\n   *\r\n   * Valid platform names include:\r\n   *\r\n   * - Android\r\n   * - BlackBerry OS\r\n   * - Java ME\r\n   * - Linux\r\n   * - Mac OS X\r\n   * - Mac OS X Calendar\r\n   * - Mac OS X Internet Account\r\n   * - Symbian\r\n   * - SymbianOS\r\n   * - Windows\r\n   * - Windows Mobile\r\n   * - Windows Phone\r\n   * - iOS\r\n   * - iOS Facebook Integration Account\r\n   * - iOS Facebook Social Sharing UI\r\n   * - webOS\r\n   * - Chrome OS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentPlatform`\r\n   * here: https://fburl.com/50729226).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\n  isPlatform: function isPlatform(query) {\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\n  },\n  /**\r\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\n    return compare(UserAgentData.platformArchitecture, null, query);\n  }\n};\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);","map":{"version":3,"names":["UserAgentData","require","VersionRange","mapObject","memoizeStringOnly","compare","name","version","query","normalizer","startsWith","range","slice","length","contains","normalizePlatformVersion","platformName","replace","UserAgent","isBrowser","browserName","browserFullVersion","isBrowserArchitecture","browserArchitecture","isDevice","deviceName","isEngine","engineName","engineVersion","isPlatform","platformFullVersion","isPlatformArchitecture","platformArchitecture","module","exports"],"sources":["C:/Users/ines_/fisiosys/fisiosys/frontend/node_modules/fbjs/lib/UserAgent.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar UserAgentData = require(\"./UserAgentData\");\r\n\r\nvar VersionRange = require(\"./VersionRange\");\r\n\r\nvar mapObject = require(\"./mapObject\");\r\n\r\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\r\n/**\r\n * Checks to see whether `name` and `version` satisfy `query`.\r\n *\r\n * @param {string} name Name of the browser, device, engine or platform\r\n * @param {?string} version Version of the browser, engine or platform\r\n * @param {string} query Query of form \"Name [range expression]\"\r\n * @param {?function} normalizer Optional pre-processor for range expression\r\n * @return {boolean}\r\n */\r\n\r\n\r\nfunction compare(name, version, query, normalizer) {\r\n  // check for exact match with no version\r\n  if (name === query) {\r\n    return true;\r\n  } // check for non-matching names\r\n\r\n\r\n  if (!query.startsWith(name)) {\r\n    return false;\r\n  } // full comparison with version\r\n\r\n\r\n  var range = query.slice(name.length);\r\n\r\n  if (version) {\r\n    range = normalizer ? normalizer(range) : range;\r\n    return VersionRange.contains(range, version);\r\n  }\r\n\r\n  return false;\r\n}\r\n/**\r\n * Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\r\n * platform.\r\n *\r\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\r\n *\r\n * @param {string} version\r\n * @return {string}\r\n */\r\n\r\n\r\nfunction normalizePlatformVersion(version) {\r\n  if (UserAgentData.platformName === 'Windows') {\r\n    return version.replace(/^\\s*NT/, '');\r\n  }\r\n\r\n  return version;\r\n}\r\n/**\r\n * Provides client-side access to the authoritative PHP-generated User Agent\r\n * information supplied by the server.\r\n */\r\n\r\n\r\nvar UserAgent = {\r\n  /**\r\n   * Check if the User Agent browser matches `query`.\r\n   *\r\n   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\r\n   *\r\n   * Valid browser names include:\r\n   *\r\n   * - ACCESS NetFront\r\n   * - AOL\r\n   * - Amazon Silk\r\n   * - Android\r\n   * - BlackBerry\r\n   * - BlackBerry PlayBook\r\n   * - Chrome\r\n   * - Chrome for iOS\r\n   * - Chrome frame\r\n   * - Facebook PHP SDK\r\n   * - Facebook for iOS\r\n   * - Firefox\r\n   * - IE\r\n   * - IE Mobile\r\n   * - Mobile Safari\r\n   * - Motorola Internet Browser\r\n   * - Nokia\r\n   * - Openwave Mobile Browser\r\n   * - Opera\r\n   * - Opera Mini\r\n   * - Opera Mobile\r\n   * - Safari\r\n   * - UIWebView\r\n   * - Unknown\r\n   * - webOS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\r\n   * https://fburl.com/50728104).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\r\n  isBrowser: function isBrowser(query) {\r\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\r\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\r\n    return compare(UserAgentData.browserArchitecture, null, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent device matches `query`.\r\n   *\r\n   * `query` should be a string like \"iPhone\" or \"iPad\".\r\n   *\r\n   * Valid device names include:\r\n   *\r\n   * - Kindle\r\n   * - Kindle Fire\r\n   * - Unknown\r\n   * - iPad\r\n   * - iPhone\r\n   * - iPod\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\r\n   * https://fburl.com/50728332).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name\"\r\n   * @return {boolean}\r\n   */\r\n  isDevice: function isDevice(query) {\r\n    return compare(UserAgentData.deviceName, null, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent rendering engine matches `query`.\r\n   *\r\n   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\r\n   *\r\n   * Valid engine names include:\r\n   *\r\n   * - Gecko\r\n   * - Presto\r\n   * - Trident\r\n   * - WebKit\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\r\n   * class related classes in the same file (see calls to `new\r\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\r\n  isEngine: function isEngine(query) {\r\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent platform matches `query`.\r\n   *\r\n   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\r\n   *\r\n   * Valid platform names include:\r\n   *\r\n   * - Android\r\n   * - BlackBerry OS\r\n   * - Java ME\r\n   * - Linux\r\n   * - Mac OS X\r\n   * - Mac OS X Calendar\r\n   * - Mac OS X Internet Account\r\n   * - Symbian\r\n   * - SymbianOS\r\n   * - Windows\r\n   * - Windows Mobile\r\n   * - Windows Phone\r\n   * - iOS\r\n   * - iOS Facebook Integration Account\r\n   * - iOS Facebook Social Sharing UI\r\n   * - webOS\r\n   * - Chrome OS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentPlatform`\r\n   * here: https://fburl.com/50729226).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\r\n  isPlatform: function isPlatform(query) {\r\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\r\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\r\n    return compare(UserAgentData.platformArchitecture, null, query);\r\n  }\r\n};\r\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE9C,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE5C,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASI,OAAO,CAACC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAE;EACjD;EACA,IAAIH,IAAI,KAAKE,KAAK,EAAE;IAClB,OAAO,IAAI;EACb,CAAC,CAAC;;EAGF,IAAI,CAACA,KAAK,CAACE,UAAU,CAACJ,IAAI,CAAC,EAAE;IAC3B,OAAO,KAAK;EACd,CAAC,CAAC;;EAGF,IAAIK,KAAK,GAAGH,KAAK,CAACI,KAAK,CAACN,IAAI,CAACO,MAAM,CAAC;EAEpC,IAAIN,OAAO,EAAE;IACXI,KAAK,GAAGF,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,GAAGA,KAAK;IAC9C,OAAOT,YAAY,CAACY,QAAQ,CAACH,KAAK,EAAEJ,OAAO,CAAC;EAC9C;EAEA,OAAO,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASQ,wBAAwB,CAACR,OAAO,EAAE;EACzC,IAAIP,aAAa,CAACgB,YAAY,KAAK,SAAS,EAAE;IAC5C,OAAOT,OAAO,CAACU,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EACtC;EAEA,OAAOV,OAAO;AAChB;AACA;AACA;AACA;AACA;;AAGA,IAAIW,SAAS,GAAG;EACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,SAASA,SAAS,CAACX,KAAK,EAAE;IACnC,OAAOH,OAAO,CAACL,aAAa,CAACoB,WAAW,EAAEpB,aAAa,CAACqB,kBAAkB,EAAEb,KAAK,CAAC;EACpF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,qBAAqB,EAAE,SAASA,qBAAqB,CAACd,KAAK,EAAE;IAC3D,OAAOH,OAAO,CAACL,aAAa,CAACuB,mBAAmB,EAAE,IAAI,EAAEf,KAAK,CAAC;EAChE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,QAAQ,EAAE,SAASA,QAAQ,CAAChB,KAAK,EAAE;IACjC,OAAOH,OAAO,CAACL,aAAa,CAACyB,UAAU,EAAE,IAAI,EAAEjB,KAAK,CAAC;EACvD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,QAAQ,EAAE,SAASA,QAAQ,CAAClB,KAAK,EAAE;IACjC,OAAOH,OAAO,CAACL,aAAa,CAAC2B,UAAU,EAAE3B,aAAa,CAAC4B,aAAa,EAAEpB,KAAK,CAAC;EAC9E,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqB,UAAU,EAAE,SAASA,UAAU,CAACrB,KAAK,EAAE;IACrC,OAAOH,OAAO,CAACL,aAAa,CAACgB,YAAY,EAAEhB,aAAa,CAAC8B,mBAAmB,EAAEtB,KAAK,EAAEO,wBAAwB,CAAC;EAChH,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,sBAAsB,EAAE,SAASA,sBAAsB,CAACvB,KAAK,EAAE;IAC7D,OAAOH,OAAO,CAACL,aAAa,CAACgC,oBAAoB,EAAE,IAAI,EAAExB,KAAK,CAAC;EACjE;AACF,CAAC;AACDyB,MAAM,CAACC,OAAO,GAAG/B,SAAS,CAACe,SAAS,EAAEd,iBAAiB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}