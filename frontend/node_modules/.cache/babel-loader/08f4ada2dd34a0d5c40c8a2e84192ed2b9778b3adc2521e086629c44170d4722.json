{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar DOMObserver = require(\"./DOMObserver\");\nvar DraftModifier = require(\"./DraftModifier\");\nvar DraftOffsetKey = require(\"./DraftOffsetKey\");\nvar EditorState = require(\"./EditorState\");\nvar Keys = require(\"fbjs/lib/Keys\");\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\nvar editOnSelect = require(\"./editOnSelect\");\nvar getContentEditableContainer = require(\"./getContentEditableContainer\");\nvar getDraftEditorSelection = require(\"./getDraftEditorSelection\");\nvar getEntityKeyForSelection = require(\"./getEntityKeyForSelection\");\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\nvar isIE = UserAgent.isBrowser('IE');\n/**\r\n * Millisecond delay to allow `compositionstart` to fire again upon\r\n * `compositionend`.\r\n *\r\n * This is used for Korean input to ensure that typing can continue without\r\n * the editor trying to render too quickly. More specifically, Safari 7.1+\r\n * triggers `compositionstart` a little slower than Chrome/FF, which\r\n * leads to composed characters being resolved and re-render occurring\r\n * sooner than we want.\r\n */\n\nvar RESOLVE_DELAY = 20;\n/**\r\n * A handful of variables used to track the current composition and its\r\n * resolution status. These exist at the module level because it is not\r\n * possible to have compositions occurring in multiple editors simultaneously,\r\n * and it simplifies state management with respect to the DraftEditor component.\r\n */\n\nvar resolved = false;\nvar stillComposing = false;\nvar domObserver = null;\nfunction startDOMObserver(editor) {\n  if (!domObserver) {\n    domObserver = new DOMObserver(getContentEditableContainer(editor));\n    domObserver.start();\n  }\n}\nvar DraftEditorCompositionHandler = {\n  /**\r\n   * A `compositionstart` event has fired while we're still in composition\r\n   * mode. Continue the current composition session to prevent a re-render.\r\n   */\n  onCompositionStart: function onCompositionStart(editor) {\n    stillComposing = true;\n    startDOMObserver(editor);\n  },\n  /**\r\n   * Attempt to end the current composition session.\r\n   *\r\n   * Defer handling because browser will still insert the chars into active\r\n   * element after `compositionend`. If a `compositionstart` event fires\r\n   * before `resolveComposition` executes, our composition session will\r\n   * continue.\r\n   *\r\n   * The `resolved` flag is useful because certain IME interfaces fire the\r\n   * `compositionend` event multiple times, thus queueing up multiple attempts\r\n   * at handling the composition. Since handling the same composition event\r\n   * twice could break the DOM, we only use the first event. Example: Arabic\r\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\r\n   */\n  onCompositionEnd: function onCompositionEnd(editor) {\n    resolved = false;\n    stillComposing = false;\n    setTimeout(function () {\n      if (!resolved) {\n        DraftEditorCompositionHandler.resolveComposition(editor);\n      }\n    }, RESOLVE_DELAY);\n  },\n  onSelect: editOnSelect,\n  /**\r\n   * In Safari, keydown events may fire when committing compositions. If\r\n   * the arrow keys are used to commit, prevent default so that the cursor\r\n   * doesn't move, otherwise it will jump back noticeably on re-render.\r\n   */\n  onKeyDown: function onKeyDown(editor, e) {\n    if (!stillComposing) {\n      // If a keydown event is received after compositionend but before the\n      // 20ms timer expires (ex: type option-E then backspace, or type A then\n      // backspace in 2-Set Korean), we should immediately resolve the\n      // composition and reinterpret the key press in edit mode.\n      DraftEditorCompositionHandler.resolveComposition(editor);\n      editor._onKeyDown(e);\n      return;\n    }\n    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\n      e.preventDefault();\n    }\n  },\n  /**\r\n   * Keypress events may fire when committing compositions. In Firefox,\r\n   * pressing RETURN commits the composition and inserts extra newline\r\n   * characters that we do not want. `preventDefault` allows the composition\r\n   * to be committed while preventing the extra characters.\r\n   */\n  onKeyPress: function onKeyPress(_editor, e) {\n    if (e.which === Keys.RETURN) {\n      e.preventDefault();\n    }\n  },\n  /**\r\n   * Attempt to insert composed characters into the document.\r\n   *\r\n   * If we are still in a composition session, do nothing. Otherwise, insert\r\n   * the characters into the document and terminate the composition session.\r\n   *\r\n   * If no characters were composed -- for instance, the user\r\n   * deleted all composed characters and committed nothing new --\r\n   * force a re-render. We also re-render when the composition occurs\r\n   * at the beginning of a leaf, to ensure that if the browser has\r\n   * created a new text node for the composition, we will discard it.\r\n   *\r\n   * Resetting innerHTML will move focus to the beginning of the editor,\r\n   * so we update to force it back to the correct place.\r\n   */\n  resolveComposition: function resolveComposition(editor) {\n    if (stillComposing) {\n      return;\n    }\n    var mutations = nullthrows(domObserver).stopAndFlushMutations();\n    domObserver = null;\n    resolved = true;\n    var editorState = EditorState.set(editor._latestEditorState, {\n      inCompositionMode: false\n    });\n    editor.exitCurrentMode();\n    if (!mutations.size) {\n      editor.update(editorState);\n      return;\n    } // TODO, check if Facebook still needs this flag or if it could be removed.\n    // Since there can be multiple mutations providing a `composedChars` doesn't\n    // apply well on this new model.\n    // if (\n    //   gkx('draft_handlebeforeinput_composed_text') &&\n    //   editor.props.handleBeforeInput &&\n    //   isEventHandled(\n    //     editor.props.handleBeforeInput(\n    //       composedChars,\n    //       editorState,\n    //       event.timeStamp,\n    //     ),\n    //   )\n    // ) {\n    //   return;\n    // }\n\n    var contentState = editorState.getCurrentContent();\n    mutations.forEach(function (composedChars, offsetKey) {\n      var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\n        blockKey = _DraftOffsetKey$decod.blockKey,\n        decoratorKey = _DraftOffsetKey$decod.decoratorKey,\n        leafKey = _DraftOffsetKey$decod.leafKey;\n      var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\n        start = _editorState$getBlock.start,\n        end = _editorState$getBlock.end;\n      var replacementRange = editorState.getSelection().merge({\n        anchorKey: blockKey,\n        focusKey: blockKey,\n        anchorOffset: start,\n        focusOffset: end,\n        isBackward: false\n      });\n      var entityKey = getEntityKeyForSelection(contentState, replacementRange);\n      var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);\n      contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, currentStyle, entityKey); // We need to update the editorState so the leaf node ranges are properly\n      // updated and multiple mutations are correctly applied.\n\n      editorState = EditorState.set(editorState, {\n        currentContent: contentState\n      });\n    }); // When we apply the text changes to the ContentState, the selection always\n    // goes to the end of the field, but it should just stay where it is\n    // after compositionEnd.\n\n    var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n    var compositionEndSelectionState = documentSelection.selectionState;\n    editor.restoreEditorDOM(); // See:\n    // - https://github.com/facebook/draft-js/issues/2093\n    // - https://github.com/facebook/draft-js/pull/2094\n    // Apply this fix only in IE for now. We can test it in\n    // other browsers in the future to ensure no regressions\n\n    var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);\n    editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, 'insert-characters'));\n  }\n};\nmodule.exports = DraftEditorCompositionHandler;","map":{"version":3,"names":["DOMObserver","require","DraftModifier","DraftOffsetKey","EditorState","Keys","UserAgent","editOnSelect","getContentEditableContainer","getDraftEditorSelection","getEntityKeyForSelection","nullthrows","isIE","isBrowser","RESOLVE_DELAY","resolved","stillComposing","domObserver","startDOMObserver","editor","start","DraftEditorCompositionHandler","onCompositionStart","onCompositionEnd","setTimeout","resolveComposition","onSelect","onKeyDown","e","_onKeyDown","which","RIGHT","LEFT","preventDefault","onKeyPress","_editor","RETURN","mutations","stopAndFlushMutations","editorState","set","_latestEditorState","inCompositionMode","exitCurrentMode","size","update","contentState","getCurrentContent","forEach","composedChars","offsetKey","_DraftOffsetKey$decod","decode","blockKey","decoratorKey","leafKey","_editorState$getBlock","getBlockTree","getIn","end","replacementRange","getSelection","merge","anchorKey","focusKey","anchorOffset","focusOffset","isBackward","entityKey","currentStyle","getBlockForKey","getInlineStyleAt","replaceText","currentContent","documentSelection","compositionEndSelectionState","selectionState","restoreEditorDOM","editorStateWithUpdatedSelection","forceSelection","acceptSelection","push","module","exports"],"sources":["C:/Users/ines_/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/DraftEditorCompositionHandler.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar DOMObserver = require(\"./DOMObserver\");\r\n\r\nvar DraftModifier = require(\"./DraftModifier\");\r\n\r\nvar DraftOffsetKey = require(\"./DraftOffsetKey\");\r\n\r\nvar EditorState = require(\"./EditorState\");\r\n\r\nvar Keys = require(\"fbjs/lib/Keys\");\r\n\r\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\r\n\r\nvar editOnSelect = require(\"./editOnSelect\");\r\n\r\nvar getContentEditableContainer = require(\"./getContentEditableContainer\");\r\n\r\nvar getDraftEditorSelection = require(\"./getDraftEditorSelection\");\r\n\r\nvar getEntityKeyForSelection = require(\"./getEntityKeyForSelection\");\r\n\r\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\r\n\r\nvar isIE = UserAgent.isBrowser('IE');\r\n/**\r\n * Millisecond delay to allow `compositionstart` to fire again upon\r\n * `compositionend`.\r\n *\r\n * This is used for Korean input to ensure that typing can continue without\r\n * the editor trying to render too quickly. More specifically, Safari 7.1+\r\n * triggers `compositionstart` a little slower than Chrome/FF, which\r\n * leads to composed characters being resolved and re-render occurring\r\n * sooner than we want.\r\n */\r\n\r\nvar RESOLVE_DELAY = 20;\r\n/**\r\n * A handful of variables used to track the current composition and its\r\n * resolution status. These exist at the module level because it is not\r\n * possible to have compositions occurring in multiple editors simultaneously,\r\n * and it simplifies state management with respect to the DraftEditor component.\r\n */\r\n\r\nvar resolved = false;\r\nvar stillComposing = false;\r\nvar domObserver = null;\r\n\r\nfunction startDOMObserver(editor) {\r\n  if (!domObserver) {\r\n    domObserver = new DOMObserver(getContentEditableContainer(editor));\r\n    domObserver.start();\r\n  }\r\n}\r\n\r\nvar DraftEditorCompositionHandler = {\r\n  /**\r\n   * A `compositionstart` event has fired while we're still in composition\r\n   * mode. Continue the current composition session to prevent a re-render.\r\n   */\r\n  onCompositionStart: function onCompositionStart(editor) {\r\n    stillComposing = true;\r\n    startDOMObserver(editor);\r\n  },\r\n\r\n  /**\r\n   * Attempt to end the current composition session.\r\n   *\r\n   * Defer handling because browser will still insert the chars into active\r\n   * element after `compositionend`. If a `compositionstart` event fires\r\n   * before `resolveComposition` executes, our composition session will\r\n   * continue.\r\n   *\r\n   * The `resolved` flag is useful because certain IME interfaces fire the\r\n   * `compositionend` event multiple times, thus queueing up multiple attempts\r\n   * at handling the composition. Since handling the same composition event\r\n   * twice could break the DOM, we only use the first event. Example: Arabic\r\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\r\n   */\r\n  onCompositionEnd: function onCompositionEnd(editor) {\r\n    resolved = false;\r\n    stillComposing = false;\r\n    setTimeout(function () {\r\n      if (!resolved) {\r\n        DraftEditorCompositionHandler.resolveComposition(editor);\r\n      }\r\n    }, RESOLVE_DELAY);\r\n  },\r\n  onSelect: editOnSelect,\r\n\r\n  /**\r\n   * In Safari, keydown events may fire when committing compositions. If\r\n   * the arrow keys are used to commit, prevent default so that the cursor\r\n   * doesn't move, otherwise it will jump back noticeably on re-render.\r\n   */\r\n  onKeyDown: function onKeyDown(editor, e) {\r\n    if (!stillComposing) {\r\n      // If a keydown event is received after compositionend but before the\r\n      // 20ms timer expires (ex: type option-E then backspace, or type A then\r\n      // backspace in 2-Set Korean), we should immediately resolve the\r\n      // composition and reinterpret the key press in edit mode.\r\n      DraftEditorCompositionHandler.resolveComposition(editor);\r\n\r\n      editor._onKeyDown(e);\r\n\r\n      return;\r\n    }\r\n\r\n    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\r\n      e.preventDefault();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Keypress events may fire when committing compositions. In Firefox,\r\n   * pressing RETURN commits the composition and inserts extra newline\r\n   * characters that we do not want. `preventDefault` allows the composition\r\n   * to be committed while preventing the extra characters.\r\n   */\r\n  onKeyPress: function onKeyPress(_editor, e) {\r\n    if (e.which === Keys.RETURN) {\r\n      e.preventDefault();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Attempt to insert composed characters into the document.\r\n   *\r\n   * If we are still in a composition session, do nothing. Otherwise, insert\r\n   * the characters into the document and terminate the composition session.\r\n   *\r\n   * If no characters were composed -- for instance, the user\r\n   * deleted all composed characters and committed nothing new --\r\n   * force a re-render. We also re-render when the composition occurs\r\n   * at the beginning of a leaf, to ensure that if the browser has\r\n   * created a new text node for the composition, we will discard it.\r\n   *\r\n   * Resetting innerHTML will move focus to the beginning of the editor,\r\n   * so we update to force it back to the correct place.\r\n   */\r\n  resolveComposition: function resolveComposition(editor) {\r\n    if (stillComposing) {\r\n      return;\r\n    }\r\n\r\n    var mutations = nullthrows(domObserver).stopAndFlushMutations();\r\n    domObserver = null;\r\n    resolved = true;\r\n    var editorState = EditorState.set(editor._latestEditorState, {\r\n      inCompositionMode: false\r\n    });\r\n    editor.exitCurrentMode();\r\n\r\n    if (!mutations.size) {\r\n      editor.update(editorState);\r\n      return;\r\n    } // TODO, check if Facebook still needs this flag or if it could be removed.\r\n    // Since there can be multiple mutations providing a `composedChars` doesn't\r\n    // apply well on this new model.\r\n    // if (\r\n    //   gkx('draft_handlebeforeinput_composed_text') &&\r\n    //   editor.props.handleBeforeInput &&\r\n    //   isEventHandled(\r\n    //     editor.props.handleBeforeInput(\r\n    //       composedChars,\r\n    //       editorState,\r\n    //       event.timeStamp,\r\n    //     ),\r\n    //   )\r\n    // ) {\r\n    //   return;\r\n    // }\r\n\r\n\r\n    var contentState = editorState.getCurrentContent();\r\n    mutations.forEach(function (composedChars, offsetKey) {\r\n      var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\r\n          blockKey = _DraftOffsetKey$decod.blockKey,\r\n          decoratorKey = _DraftOffsetKey$decod.decoratorKey,\r\n          leafKey = _DraftOffsetKey$decod.leafKey;\r\n\r\n      var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\r\n          start = _editorState$getBlock.start,\r\n          end = _editorState$getBlock.end;\r\n\r\n      var replacementRange = editorState.getSelection().merge({\r\n        anchorKey: blockKey,\r\n        focusKey: blockKey,\r\n        anchorOffset: start,\r\n        focusOffset: end,\r\n        isBackward: false\r\n      });\r\n      var entityKey = getEntityKeyForSelection(contentState, replacementRange);\r\n      var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);\r\n      contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, currentStyle, entityKey); // We need to update the editorState so the leaf node ranges are properly\r\n      // updated and multiple mutations are correctly applied.\r\n\r\n      editorState = EditorState.set(editorState, {\r\n        currentContent: contentState\r\n      });\r\n    }); // When we apply the text changes to the ContentState, the selection always\r\n    // goes to the end of the field, but it should just stay where it is\r\n    // after compositionEnd.\r\n\r\n    var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\r\n    var compositionEndSelectionState = documentSelection.selectionState;\r\n    editor.restoreEditorDOM(); // See:\r\n    // - https://github.com/facebook/draft-js/issues/2093\r\n    // - https://github.com/facebook/draft-js/pull/2094\r\n    // Apply this fix only in IE for now. We can test it in\r\n    // other browsers in the future to ensure no regressions\r\n\r\n    var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);\r\n    editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, 'insert-characters'));\r\n  }\r\n};\r\nmodule.exports = DraftEditorCompositionHandler;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}