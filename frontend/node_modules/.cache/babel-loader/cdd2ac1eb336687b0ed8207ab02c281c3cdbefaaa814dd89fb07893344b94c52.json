{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\nvar EditorState = require(\"./EditorState\");\nvar KeyBindingUtil = require(\"./KeyBindingUtil\");\nvar Keys = require(\"fbjs/lib/Keys\");\nvar SecondaryClipboard = require(\"./SecondaryClipboard\");\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\nvar isEventHandled = require(\"./isEventHandled\");\nvar keyCommandBackspaceToStartOfLine = require(\"./keyCommandBackspaceToStartOfLine\");\nvar keyCommandBackspaceWord = require(\"./keyCommandBackspaceWord\");\nvar keyCommandDeleteWord = require(\"./keyCommandDeleteWord\");\nvar keyCommandInsertNewline = require(\"./keyCommandInsertNewline\");\nvar keyCommandMoveSelectionToEndOfBlock = require(\"./keyCommandMoveSelectionToEndOfBlock\");\nvar keyCommandMoveSelectionToStartOfBlock = require(\"./keyCommandMoveSelectionToStartOfBlock\");\nvar keyCommandPlainBackspace = require(\"./keyCommandPlainBackspace\");\nvar keyCommandPlainDelete = require(\"./keyCommandPlainDelete\");\nvar keyCommandTransposeCharacters = require(\"./keyCommandTransposeCharacters\");\nvar keyCommandUndo = require(\"./keyCommandUndo\");\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser('Chrome');\n/**\r\n * Map a `DraftEditorCommand` command value to a corresponding function.\r\n */\n\nfunction onKeyCommand(command, editorState, e) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState, e);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n/**\r\n * Intercept keydown behavior to handle keys and commands manually, if desired.\r\n *\r\n * Keydown combinations may be mapped to `DraftCommand` values, which may\r\n * correspond to command functions that modify the editor or its contents.\r\n *\r\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\r\n * component may provide a custom mapping via the `keyBindingFn` prop.\r\n */\n\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n  function callDeprecatedHandler(handlerName) {\n    var deprecatedHandler = editor.props[handlerName];\n    if (deprecatedHandler) {\n      deprecatedHandler(e);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault(); // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      if (callDeprecatedHandler('onEscape')) {\n        return;\n      }\n      break;\n    case Keys.TAB:\n      if (callDeprecatedHandler('onTab')) {\n        return;\n      }\n      break;\n    case Keys.UP:\n      if (callDeprecatedHandler('onUpArrow')) {\n        return;\n      }\n      break;\n    case Keys.RIGHT:\n      if (callDeprecatedHandler('onRightArrow')) {\n        return;\n      }\n      break;\n    case Keys.DOWN:\n      if (callDeprecatedHandler('onDownArrow')) {\n        return;\n      }\n      break;\n    case Keys.LEFT:\n      if (callDeprecatedHandler('onLeftArrow')) {\n        return;\n      }\n      break;\n    case Keys.SPACE:\n      // Prevent Chrome on OSX behavior where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n      }\n  }\n  var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\n\n  if (command == null || command === '') {\n    if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\n      // The default keydown event has already been prevented in order to stop\n      // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\n      // other browsers.\n      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), \"\\xA0\");\n      editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n    }\n    return;\n  }\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  } // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n\n  e.preventDefault(); // Allow components higher up the tree to handle the command first.\n\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))) {\n    return;\n  }\n  var newState = onKeyCommand(command, editorState, e);\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\nmodule.exports = editOnKeyDown;","map":{"version":3,"names":["DraftModifier","require","EditorState","KeyBindingUtil","Keys","SecondaryClipboard","UserAgent","isEventHandled","keyCommandBackspaceToStartOfLine","keyCommandBackspaceWord","keyCommandDeleteWord","keyCommandInsertNewline","keyCommandMoveSelectionToEndOfBlock","keyCommandMoveSelectionToStartOfBlock","keyCommandPlainBackspace","keyCommandPlainDelete","keyCommandTransposeCharacters","keyCommandUndo","isOptionKeyCommand","isChrome","isBrowser","onKeyCommand","command","editorState","e","redo","cut","paste","editOnKeyDown","editor","keyCode","which","_latestEditorState","callDeprecatedHandler","handlerName","deprecatedHandler","props","RETURN","preventDefault","handleReturn","ESC","TAB","UP","RIGHT","DOWN","LEFT","SPACE","keyBindingFn","contentState","replaceText","getCurrentContent","getSelection","update","push","handleKeyCommand","timeStamp","newState","module","exports"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/editOnKeyDown.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar DraftModifier = require(\"./DraftModifier\");\r\n\r\nvar EditorState = require(\"./EditorState\");\r\n\r\nvar KeyBindingUtil = require(\"./KeyBindingUtil\");\r\n\r\nvar Keys = require(\"fbjs/lib/Keys\");\r\n\r\nvar SecondaryClipboard = require(\"./SecondaryClipboard\");\r\n\r\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\r\n\r\nvar isEventHandled = require(\"./isEventHandled\");\r\n\r\nvar keyCommandBackspaceToStartOfLine = require(\"./keyCommandBackspaceToStartOfLine\");\r\n\r\nvar keyCommandBackspaceWord = require(\"./keyCommandBackspaceWord\");\r\n\r\nvar keyCommandDeleteWord = require(\"./keyCommandDeleteWord\");\r\n\r\nvar keyCommandInsertNewline = require(\"./keyCommandInsertNewline\");\r\n\r\nvar keyCommandMoveSelectionToEndOfBlock = require(\"./keyCommandMoveSelectionToEndOfBlock\");\r\n\r\nvar keyCommandMoveSelectionToStartOfBlock = require(\"./keyCommandMoveSelectionToStartOfBlock\");\r\n\r\nvar keyCommandPlainBackspace = require(\"./keyCommandPlainBackspace\");\r\n\r\nvar keyCommandPlainDelete = require(\"./keyCommandPlainDelete\");\r\n\r\nvar keyCommandTransposeCharacters = require(\"./keyCommandTransposeCharacters\");\r\n\r\nvar keyCommandUndo = require(\"./keyCommandUndo\");\r\n\r\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\r\nvar isChrome = UserAgent.isBrowser('Chrome');\r\n/**\r\n * Map a `DraftEditorCommand` command value to a corresponding function.\r\n */\r\n\r\nfunction onKeyCommand(command, editorState, e) {\r\n  switch (command) {\r\n    case 'redo':\r\n      return EditorState.redo(editorState);\r\n\r\n    case 'delete':\r\n      return keyCommandPlainDelete(editorState);\r\n\r\n    case 'delete-word':\r\n      return keyCommandDeleteWord(editorState);\r\n\r\n    case 'backspace':\r\n      return keyCommandPlainBackspace(editorState);\r\n\r\n    case 'backspace-word':\r\n      return keyCommandBackspaceWord(editorState);\r\n\r\n    case 'backspace-to-start-of-line':\r\n      return keyCommandBackspaceToStartOfLine(editorState, e);\r\n\r\n    case 'split-block':\r\n      return keyCommandInsertNewline(editorState);\r\n\r\n    case 'transpose-characters':\r\n      return keyCommandTransposeCharacters(editorState);\r\n\r\n    case 'move-selection-to-start-of-block':\r\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\r\n\r\n    case 'move-selection-to-end-of-block':\r\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\r\n\r\n    case 'secondary-cut':\r\n      return SecondaryClipboard.cut(editorState);\r\n\r\n    case 'secondary-paste':\r\n      return SecondaryClipboard.paste(editorState);\r\n\r\n    default:\r\n      return editorState;\r\n  }\r\n}\r\n/**\r\n * Intercept keydown behavior to handle keys and commands manually, if desired.\r\n *\r\n * Keydown combinations may be mapped to `DraftCommand` values, which may\r\n * correspond to command functions that modify the editor or its contents.\r\n *\r\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\r\n * component may provide a custom mapping via the `keyBindingFn` prop.\r\n */\r\n\r\n\r\nfunction editOnKeyDown(editor, e) {\r\n  var keyCode = e.which;\r\n  var editorState = editor._latestEditorState;\r\n\r\n  function callDeprecatedHandler(handlerName) {\r\n    var deprecatedHandler = editor.props[handlerName];\r\n\r\n    if (deprecatedHandler) {\r\n      deprecatedHandler(e);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  switch (keyCode) {\r\n    case Keys.RETURN:\r\n      e.preventDefault(); // The top-level component may manually handle newline insertion. If\r\n      // no special handling is performed, fall through to command handling.\r\n\r\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.ESC:\r\n      e.preventDefault();\r\n\r\n      if (callDeprecatedHandler('onEscape')) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.TAB:\r\n      if (callDeprecatedHandler('onTab')) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.UP:\r\n      if (callDeprecatedHandler('onUpArrow')) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.RIGHT:\r\n      if (callDeprecatedHandler('onRightArrow')) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.DOWN:\r\n      if (callDeprecatedHandler('onDownArrow')) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.LEFT:\r\n      if (callDeprecatedHandler('onLeftArrow')) {\r\n        return;\r\n      }\r\n\r\n      break;\r\n\r\n    case Keys.SPACE:\r\n      // Prevent Chrome on OSX behavior where option + space scrolls.\r\n      if (isChrome && isOptionKeyCommand(e)) {\r\n        e.preventDefault();\r\n      }\r\n\r\n  }\r\n\r\n  var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\r\n\r\n  if (command == null || command === '') {\r\n    if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\r\n      // The default keydown event has already been prevented in order to stop\r\n      // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\r\n      // other browsers.\r\n      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), \"\\xA0\");\r\n      editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (command === 'undo') {\r\n    // Since undo requires some special updating behavior to keep the editor\r\n    // in sync, handle it separately.\r\n    keyCommandUndo(e, editorState, editor.update);\r\n    return;\r\n  } // At this point, we know that we're handling a command of some kind, so\r\n  // we don't want to insert a character following the keydown.\r\n\r\n\r\n  e.preventDefault(); // Allow components higher up the tree to handle the command first.\r\n\r\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))) {\r\n    return;\r\n  }\r\n\r\n  var newState = onKeyCommand(command, editorState, e);\r\n\r\n  if (newState !== editorState) {\r\n    editor.update(newState);\r\n  }\r\n}\r\n\r\nmodule.exports = editOnKeyDown;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}