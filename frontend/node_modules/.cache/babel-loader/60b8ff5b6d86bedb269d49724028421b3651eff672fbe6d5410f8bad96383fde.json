{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\r\n * Executes the provided `callback` once for each enumerable own property in the\r\n * object and constructs a new object from the results. The `callback` is\r\n * invoked with three arguments:\r\n *\r\n *  - the property value\r\n *  - the property name\r\n *  - the object being traversed\r\n *\r\n * Properties that are added after the call to `mapObject` will not be visited\r\n * by `callback`. If the values of existing properties are changed, the value\r\n * passed to `callback` will be the value at the time `mapObject` visits them.\r\n * Properties that are deleted before being visited are not visited.\r\n *\r\n * @grep function objectMap()\r\n * @grep function objMap()\r\n *\r\n * @param {?object} object\r\n * @param {function} callback\r\n * @param {*} context\r\n * @return {?object}\r\n */\n\nfunction mapObject(object, callback, context) {\n  if (!object) {\n    return null;\n  }\n  var result = {};\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      result[name] = callback.call(context, object[name], name, object);\n    }\n  }\n  return result;\n}\nmodule.exports = mapObject;","map":{"version":3,"names":["hasOwnProperty","Object","prototype","mapObject","object","callback","context","result","name","call","module","exports"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/fbjs/lib/mapObject.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n/**\r\n * Executes the provided `callback` once for each enumerable own property in the\r\n * object and constructs a new object from the results. The `callback` is\r\n * invoked with three arguments:\r\n *\r\n *  - the property value\r\n *  - the property name\r\n *  - the object being traversed\r\n *\r\n * Properties that are added after the call to `mapObject` will not be visited\r\n * by `callback`. If the values of existing properties are changed, the value\r\n * passed to `callback` will be the value at the time `mapObject` visits them.\r\n * Properties that are deleted before being visited are not visited.\r\n *\r\n * @grep function objectMap()\r\n * @grep function objMap()\r\n *\r\n * @param {?object} object\r\n * @param {function} callback\r\n * @param {*} context\r\n * @return {?object}\r\n */\r\n\r\nfunction mapObject(object, callback, context) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n\r\n  var result = {};\r\n\r\n  for (var name in object) {\r\n    if (hasOwnProperty.call(object, name)) {\r\n      result[name] = callback.call(context, object[name], name, object);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = mapObject;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,SAAS,CAACC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC5C,IAAI,CAACF,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAIG,MAAM,GAAG,CAAC,CAAC;EAEf,KAAK,IAAIC,IAAI,IAAIJ,MAAM,EAAE;IACvB,IAAIJ,cAAc,CAACS,IAAI,CAACL,MAAM,EAAEI,IAAI,CAAC,EAAE;MACrCD,MAAM,CAACC,IAAI,CAAC,GAAGH,QAAQ,CAACI,IAAI,CAACH,OAAO,EAAEF,MAAM,CAACI,IAAI,CAAC,EAAEA,IAAI,EAAEJ,MAAM,CAAC;IACnE;EACF;EAEA,OAAOG,MAAM;AACf;AAEAG,MAAM,CAACC,OAAO,GAAGR,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}