{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable max-len, import/no-import-module-exports */\nconst openGraphScraper_1 = __importDefault(require(\"./lib/openGraphScraper\"));\n/**\n * `open-graph-scraper` uses [fetch](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for http requests\n * for scraping Open Graph and Twitter Card info off a website.\n *\n * @param {object} options - The options used by Open Graph Scraper\n * @param {boolean} [options.onlyGetOpenGraphInfo] - Only fetch open graph info and don't fall back on anything else.\n * @param {object} [options.customMetaTags] - Here you can define custom meta tags you want to scrape.\n * @param {object} [options.fetchOptions] - Sets the options used by fetch for the http requests\n * @param {object} [options.validatorSettings] - Sets the options used by validator.js for testing the URL\n * @param {string[]} [options.blacklist] - Pass in an array of sites you don't want ogs to run on.\n * @param {string} [options.html] - You can pass in an HTML string to run ogs on it. (use without options.url)\n * @param {number} [options.timeout] - Number of seconds before the fetch request ends. (default is 10 seconds)\n * @param {string} options.url - URL of the site. (Required)\n * @returns {Promise} Promise Object with the Open Graph results\n */\nasync function run(options) {\n  let results;\n  try {\n    results = await (0, openGraphScraper_1.default)(options);\n  } catch (error) {\n    const exception = error;\n    const returnError = {\n      error: true,\n      result: {\n        success: false,\n        requestUrl: options.url,\n        error: exception.message,\n        errorDetails: exception\n      },\n      response: undefined,\n      html: undefined\n    };\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw returnError;\n  }\n  const returnSuccess = {\n    error: false,\n    result: results.ogObject,\n    response: results.response,\n    html: results.html\n  };\n  return returnSuccess;\n}\nexports.default = run;\nmodule.exports = run;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","openGraphScraper_1","require","run","options","results","default","error","exception","returnError","result","success","requestUrl","url","message","errorDetails","response","undefined","html","returnSuccess","ogObject","module"],"sources":["C:/Users/ines_/bee_v2/bee_school/frontend/node_modules/open-graph-scraper/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* eslint-disable max-len, import/no-import-module-exports */\nconst openGraphScraper_1 = __importDefault(require(\"./lib/openGraphScraper\"));\n/**\n * `open-graph-scraper` uses [fetch](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for http requests\n * for scraping Open Graph and Twitter Card info off a website.\n *\n * @param {object} options - The options used by Open Graph Scraper\n * @param {boolean} [options.onlyGetOpenGraphInfo] - Only fetch open graph info and don't fall back on anything else.\n * @param {object} [options.customMetaTags] - Here you can define custom meta tags you want to scrape.\n * @param {object} [options.fetchOptions] - Sets the options used by fetch for the http requests\n * @param {object} [options.validatorSettings] - Sets the options used by validator.js for testing the URL\n * @param {string[]} [options.blacklist] - Pass in an array of sites you don't want ogs to run on.\n * @param {string} [options.html] - You can pass in an HTML string to run ogs on it. (use without options.url)\n * @param {number} [options.timeout] - Number of seconds before the fetch request ends. (default is 10 seconds)\n * @param {string} options.url - URL of the site. (Required)\n * @returns {Promise} Promise Object with the Open Graph results\n */\nasync function run(options) {\n    let results;\n    try {\n        results = await (0, openGraphScraper_1.default)(options);\n    }\n    catch (error) {\n        const exception = error;\n        const returnError = {\n            error: true,\n            result: {\n                success: false,\n                requestUrl: options.url,\n                error: exception.message,\n                errorDetails: exception,\n            },\n            response: undefined,\n            html: undefined,\n        };\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw returnError;\n    }\n    const returnSuccess = {\n        error: false,\n        result: results.ogObject,\n        response: results.response,\n        html: results.html,\n    };\n    return returnSuccess;\n}\nexports.default = run;\nmodule.exports = run;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA,MAAMC,kBAAkB,GAAGP,eAAe,CAACQ,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,GAAG,CAACC,OAAO,EAAE;EACxB,IAAIC,OAAO;EACX,IAAI;IACAA,OAAO,GAAG,MAAM,CAAC,CAAC,EAAEJ,kBAAkB,CAACK,OAAO,EAAEF,OAAO,CAAC;EAC5D,CAAC,CACD,OAAOG,KAAK,EAAE;IACV,MAAMC,SAAS,GAAGD,KAAK;IACvB,MAAME,WAAW,GAAG;MAChBF,KAAK,EAAE,IAAI;MACXG,MAAM,EAAE;QACJC,OAAO,EAAE,KAAK;QACdC,UAAU,EAAER,OAAO,CAACS,GAAG;QACvBN,KAAK,EAAEC,SAAS,CAACM,OAAO;QACxBC,YAAY,EAAEP;MAClB,CAAC;MACDQ,QAAQ,EAAEC,SAAS;MACnBC,IAAI,EAAED;IACV,CAAC;IACD;IACA,MAAMR,WAAW;EACrB;EACA,MAAMU,aAAa,GAAG;IAClBZ,KAAK,EAAE,KAAK;IACZG,MAAM,EAAEL,OAAO,CAACe,QAAQ;IACxBJ,QAAQ,EAAEX,OAAO,CAACW,QAAQ;IAC1BE,IAAI,EAAEb,OAAO,CAACa;EAClB,CAAC;EACD,OAAOC,aAAa;AACxB;AACApB,OAAO,CAACO,OAAO,GAAGH,GAAG;AACrBkB,MAAM,CAACtB,OAAO,GAAGI,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}