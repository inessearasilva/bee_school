{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\nvar TEXT_TYPES = {\n  'text/plain': true,\n  'text/html': true,\n  'text/rtf': true\n}; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\n\nvar TEXT_SIZE_UPPER_BOUND = 5000;\n/**\r\n * Extract the text content from a file list.\r\n */\n\nfunction getTextContentFromFiles(files, callback) {\n  var readCount = 0;\n  var results = [];\n  files.forEach(function ( /*blob*/\n  file) {\n    readFile(file, function ( /*string*/\n    text) {\n      readCount++;\n      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\n      if (readCount == files.length) {\n        callback(results.join('\\r'));\n      }\n    });\n  });\n}\n/**\r\n * todo isaac: Do work to turn html/rtf into a content fragment.\r\n */\n\nfunction readFile(file, callback) {\n  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\n    callback('');\n    return;\n  }\n  if (file.type === '') {\n    var _contents = ''; // Special-case text clippings, which have an empty type but include\n    // `.textClipping` in the file name. `readAsText` results in an empty\n    // string for text clippings, so we force the file name to serve\n    // as the text value for the file.\n\n    if (TEXT_CLIPPING_REGEX.test(file.name)) {\n      _contents = file.name.replace(TEXT_CLIPPING_REGEX, '');\n    }\n    callback(_contents);\n    return;\n  }\n  var reader = new FileReader();\n  reader.onload = function () {\n    var result = reader.result;\n    !(typeof result === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : invariant(false) : void 0;\n    callback(result);\n  };\n  reader.onerror = function () {\n    callback('');\n  };\n  reader.readAsText(file);\n}\nmodule.exports = getTextContentFromFiles;","map":{"version":3,"names":["invariant","require","TEXT_CLIPPING_REGEX","TEXT_TYPES","TEXT_SIZE_UPPER_BOUND","getTextContentFromFiles","files","callback","readCount","results","forEach","file","readFile","text","push","slice","length","join","global","FileReader","type","_contents","test","name","replace","reader","onload","result","process","env","NODE_ENV","onerror","readAsText","module","exports"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/getTextContentFromFiles.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar invariant = require(\"fbjs/lib/invariant\");\r\n\r\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\r\nvar TEXT_TYPES = {\r\n  'text/plain': true,\r\n  'text/html': true,\r\n  'text/rtf': true\r\n}; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\r\n\r\nvar TEXT_SIZE_UPPER_BOUND = 5000;\r\n/**\r\n * Extract the text content from a file list.\r\n */\r\n\r\nfunction getTextContentFromFiles(files, callback) {\r\n  var readCount = 0;\r\n  var results = [];\r\n  files.forEach(function (\r\n  /*blob*/\r\n  file) {\r\n    readFile(file, function (\r\n    /*string*/\r\n    text) {\r\n      readCount++;\r\n      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\r\n\r\n      if (readCount == files.length) {\r\n        callback(results.join('\\r'));\r\n      }\r\n    });\r\n  });\r\n}\r\n/**\r\n * todo isaac: Do work to turn html/rtf into a content fragment.\r\n */\r\n\r\n\r\nfunction readFile(file, callback) {\r\n  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\r\n    callback('');\r\n    return;\r\n  }\r\n\r\n  if (file.type === '') {\r\n    var _contents = ''; // Special-case text clippings, which have an empty type but include\r\n    // `.textClipping` in the file name. `readAsText` results in an empty\r\n    // string for text clippings, so we force the file name to serve\r\n    // as the text value for the file.\r\n\r\n    if (TEXT_CLIPPING_REGEX.test(file.name)) {\r\n      _contents = file.name.replace(TEXT_CLIPPING_REGEX, '');\r\n    }\r\n\r\n    callback(_contents);\r\n    return;\r\n  }\r\n\r\n  var reader = new FileReader();\r\n\r\n  reader.onload = function () {\r\n    var result = reader.result;\r\n    !(typeof result === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : invariant(false) : void 0;\r\n    callback(result);\r\n  };\r\n\r\n  reader.onerror = function () {\r\n    callback('');\r\n  };\r\n\r\n  reader.readAsText(file);\r\n}\r\n\r\nmodule.exports = getTextContentFromFiles;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAE7C,IAAIC,mBAAmB,GAAG,iBAAiB;AAC3C,IAAIC,UAAU,GAAG;EACf,YAAY,EAAE,IAAI;EAClB,WAAW,EAAE,IAAI;EACjB,UAAU,EAAE;AACd,CAAC,CAAC,CAAC;;AAEH,IAAIC,qBAAqB,GAAG,IAAI;AAChC;AACA;AACA;;AAEA,SAASC,uBAAuB,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAChD,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,OAAO,GAAG,EAAE;EAChBH,KAAK,CAACI,OAAO,CAAC,WACd;EACAC,IAAI,EAAE;IACJC,QAAQ,CAACD,IAAI,EAAE,WACf;IACAE,IAAI,EAAE;MACJL,SAAS,EAAE;MACXK,IAAI,IAAIJ,OAAO,CAACK,IAAI,CAACD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAEX,qBAAqB,CAAC,CAAC;MAE1D,IAAII,SAAS,IAAIF,KAAK,CAACU,MAAM,EAAE;QAC7BT,QAAQ,CAACE,OAAO,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AACA;AACA;AACA;;AAGA,SAASL,QAAQ,CAACD,IAAI,EAAEJ,QAAQ,EAAE;EAChC,IAAI,CAACW,MAAM,CAACC,UAAU,IAAIR,IAAI,CAACS,IAAI,IAAI,EAAET,IAAI,CAACS,IAAI,IAAIjB,UAAU,CAAC,EAAE;IACjEI,QAAQ,CAAC,EAAE,CAAC;IACZ;EACF;EAEA,IAAII,IAAI,CAACS,IAAI,KAAK,EAAE,EAAE;IACpB,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;IACpB;IACA;IACA;;IAEA,IAAInB,mBAAmB,CAACoB,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,EAAE;MACvCF,SAAS,GAAGV,IAAI,CAACY,IAAI,CAACC,OAAO,CAACtB,mBAAmB,EAAE,EAAE,CAAC;IACxD;IAEAK,QAAQ,CAACc,SAAS,CAAC;IACnB;EACF;EAEA,IAAII,MAAM,GAAG,IAAIN,UAAU,EAAE;EAE7BM,MAAM,CAACC,MAAM,GAAG,YAAY;IAC1B,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAAM;IAC1B,EAAE,OAAOA,MAAM,KAAK,QAAQ,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG9B,SAAS,CAAC,KAAK,EAAE,qEAAqE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IAC3LO,QAAQ,CAACoB,MAAM,CAAC;EAClB,CAAC;EAEDF,MAAM,CAACM,OAAO,GAAG,YAAY;IAC3BxB,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAEDkB,MAAM,CAACO,UAAU,CAACrB,IAAI,CAAC;AACzB;AAEAsB,MAAM,CAACC,OAAO,GAAG7B,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}