{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar _require = require(\"./draftKeyUtils\"),\n  notEmptyKey = _require.notEmptyKey;\n/**\r\n * Return the entity key that should be used when inserting text for the\r\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\r\n * and `SEGMENTED` entities should not be used for insertion behavior.\r\n */\n\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n        return null;\n      }\n      return filterKey(contentState.getEntityMap(), entityKey);\n    }\n    return null;\n  }\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n  return filterKey(contentState.getEntityMap(), entityKey);\n}\n/**\r\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\r\n * return it. If not, return null.\r\n */\n\nfunction filterKey(entityMap, entityKey) {\n  if (notEmptyKey(entityKey)) {\n    var entity = entityMap.__get(entityKey);\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n  return null;\n}\nmodule.exports = getEntityKeyForSelection;","map":{"version":3,"names":["_require","require","notEmptyKey","getEntityKeyForSelection","contentState","targetSelection","entityKey","isCollapsed","key","getAnchorKey","offset","getAnchorOffset","getBlockForKey","getEntityAt","filterKey","getEntityMap","startKey","getStartKey","startOffset","getStartOffset","startBlock","getLength","entityMap","entity","__get","getMutability","module","exports"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/getEntityKeyForSelection.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar _require = require(\"./draftKeyUtils\"),\r\n    notEmptyKey = _require.notEmptyKey;\r\n/**\r\n * Return the entity key that should be used when inserting text for the\r\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\r\n * and `SEGMENTED` entities should not be used for insertion behavior.\r\n */\r\n\r\n\r\nfunction getEntityKeyForSelection(contentState, targetSelection) {\r\n  var entityKey;\r\n\r\n  if (targetSelection.isCollapsed()) {\r\n    var key = targetSelection.getAnchorKey();\r\n    var offset = targetSelection.getAnchorOffset();\r\n\r\n    if (offset > 0) {\r\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\r\n\r\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\r\n        return null;\r\n      }\r\n\r\n      return filterKey(contentState.getEntityMap(), entityKey);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  var startKey = targetSelection.getStartKey();\r\n  var startOffset = targetSelection.getStartOffset();\r\n  var startBlock = contentState.getBlockForKey(startKey);\r\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\r\n  return filterKey(contentState.getEntityMap(), entityKey);\r\n}\r\n/**\r\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\r\n * return it. If not, return null.\r\n */\r\n\r\n\r\nfunction filterKey(entityMap, entityKey) {\r\n  if (notEmptyKey(entityKey)) {\r\n    var entity = entityMap.__get(entityKey);\r\n\r\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nmodule.exports = getEntityKeyForSelection;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,CAAC;EACrCC,WAAW,GAAGF,QAAQ,CAACE,WAAW;AACtC;AACA;AACA;AACA;AACA;;AAGA,SAASC,wBAAwB,CAACC,YAAY,EAAEC,eAAe,EAAE;EAC/D,IAAIC,SAAS;EAEb,IAAID,eAAe,CAACE,WAAW,EAAE,EAAE;IACjC,IAAIC,GAAG,GAAGH,eAAe,CAACI,YAAY,EAAE;IACxC,IAAIC,MAAM,GAAGL,eAAe,CAACM,eAAe,EAAE;IAE9C,IAAID,MAAM,GAAG,CAAC,EAAE;MACdJ,SAAS,GAAGF,YAAY,CAACQ,cAAc,CAACJ,GAAG,CAAC,CAACK,WAAW,CAACH,MAAM,GAAG,CAAC,CAAC;MAEpE,IAAIJ,SAAS,KAAKF,YAAY,CAACQ,cAAc,CAACJ,GAAG,CAAC,CAACK,WAAW,CAACH,MAAM,CAAC,EAAE;QACtE,OAAO,IAAI;MACb;MAEA,OAAOI,SAAS,CAACV,YAAY,CAACW,YAAY,EAAE,EAAET,SAAS,CAAC;IAC1D;IAEA,OAAO,IAAI;EACb;EAEA,IAAIU,QAAQ,GAAGX,eAAe,CAACY,WAAW,EAAE;EAC5C,IAAIC,WAAW,GAAGb,eAAe,CAACc,cAAc,EAAE;EAClD,IAAIC,UAAU,GAAGhB,YAAY,CAACQ,cAAc,CAACI,QAAQ,CAAC;EACtDV,SAAS,GAAGY,WAAW,KAAKE,UAAU,CAACC,SAAS,EAAE,GAAG,IAAI,GAAGD,UAAU,CAACP,WAAW,CAACK,WAAW,CAAC;EAC/F,OAAOJ,SAAS,CAACV,YAAY,CAACW,YAAY,EAAE,EAAET,SAAS,CAAC;AAC1D;AACA;AACA;AACA;AACA;;AAGA,SAASQ,SAAS,CAACQ,SAAS,EAAEhB,SAAS,EAAE;EACvC,IAAIJ,WAAW,CAACI,SAAS,CAAC,EAAE;IAC1B,IAAIiB,MAAM,GAAGD,SAAS,CAACE,KAAK,CAAClB,SAAS,CAAC;IAEvC,OAAOiB,MAAM,CAACE,aAAa,EAAE,KAAK,SAAS,GAAGnB,SAAS,GAAG,IAAI;EAChE;EAEA,OAAO,IAAI;AACb;AAEAoB,MAAM,CAACC,OAAO,GAAGxB,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}