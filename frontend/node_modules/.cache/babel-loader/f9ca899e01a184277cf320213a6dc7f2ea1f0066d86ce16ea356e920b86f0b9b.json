{"ast":null,"code":"import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { checkDecimals } from \"../../../../assets/functions/CheckDecimals/CheckDecimals\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildProportionValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  if (item.type === \"Unitary\") {\n    if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (Number(value) >= Number(range.lower) || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (Number(value) > Number(range.lower) || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (Number(value) <= Number(range.upper) || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (Number(value) < Number(range.upper) || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let precision = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (value >= range.lower || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (value > range.lower || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (value <= range.upper || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (value < range.upper || value === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else if (range.upper === undefined) {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let precision = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  } else if (item.type === \"Percent\") {\n    if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.string().test(\"number\", \"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        } // Processar para poder tirar o \"%\"\n\n        let fieldValue;\n        if (value === undefined || value === \"\") {\n          fieldValue = undefined;\n        } else {\n          fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n        }\n        if (fieldValue === undefined) {\n          return true;\n        } else if (isNaN(fieldValue)) {\n          return false;\n        } else {\n          return true;\n        }\n      }).test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (Number(fieldValue) >= Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (Number(fieldValue) > Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (Number(fieldValue) <= Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (Number(fieldValue) < Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let precision = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            // Processar para poder tirar o \"%\"\n            let fieldValue;\n            if (value === undefined || value === \"\") {\n              fieldValue = undefined;\n            } else {\n              fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n            }\n            const nDecimals = checkDecimals(fieldValue);\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.string().test(\"number\", \"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        } // Processar para poder tirar o \"%\"\n\n        let fieldValue;\n        if (value === undefined || value === \"\") {\n          fieldValue = undefined;\n        } else {\n          fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n        }\n        if (fieldValue === undefined) {\n          return true;\n        } else if (isNaN(fieldValue)) {\n          return false;\n        } else {\n          return true;\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (Number(fieldValue) >= Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (Number(fieldValue) > Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let range = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (Number(fieldValue) <= Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (Number(fieldValue) < Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let precision = undefined;\n        const numerator = item.numerator;\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            // Processar para poder tirar o \"%\"\n            let fieldValue;\n            if (value === undefined || value === \"\") {\n              fieldValue = undefined;\n            } else {\n              fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n            }\n            const nDecimals = checkDecimals(fieldValue);\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n};\nexport { buildProportionValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","checkDecimals","handleRequiredValidation","handleRequiredSection","buildProportionValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","type","occurrences","lowerOccurrences","upperOccurrences","number","typeError","test","value","isVisible","parent","passedRequired","range","undefined","numerator","lower","lowerIncluded","Number","createError","message","upper","upperIncluded","precision","nDecimals","lowerPrecision","res","sectionsError","length","toString","toLocaleLowerCase","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","path","split","join","conditionValidation","Array","isArray","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable","string","fieldValue","x","isNaN"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildProportionValidation/BuildProportionValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { checkDecimals } from \"../../../../assets/functions/CheckDecimals/CheckDecimals\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildProportionValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n\n  if (item.type === \"Unitary\") {\n    if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (Number(value) >= Number(range.lower) || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (Number(value) > Number(range.lower) || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (Number(value) <= Number(range.upper) || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (Number(value) < Number(range.upper) || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let precision = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (value >= range.lower || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (value > range.lower || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (value <= range.upper || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (value < range.upper || value === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else if (range.upper === undefined) {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let precision = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            const nDecimals = checkDecimals(value);\n\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  } else if (item.type === \"Percent\") {\n    if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.string().test(\"number\", \"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        } // Processar para poder tirar o \"%\"\n\n\n        let fieldValue;\n\n        if (value === undefined || value === \"\") {\n          fieldValue = undefined;\n        } else {\n          fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n        }\n\n        if (fieldValue === undefined) {\n          return true;\n        } else if (isNaN(fieldValue)) {\n          return false;\n        } else {\n          return true;\n        }\n      }).test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (Number(fieldValue) >= Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (Number(fieldValue) > Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (Number(fieldValue) <= Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (Number(fieldValue) < Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let precision = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            // Processar para poder tirar o \"%\"\n            let fieldValue;\n\n            if (value === undefined || value === \"\") {\n              fieldValue = undefined;\n            } else {\n              fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n            }\n\n            const nDecimals = checkDecimals(fieldValue);\n\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.string().test(\"number\", \"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        } // Processar para poder tirar o \"%\"\n\n\n        let fieldValue;\n\n        if (value === undefined || value === \"\") {\n          fieldValue = undefined;\n        } else {\n          fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n        }\n\n        if (fieldValue === undefined) {\n          return true;\n        } else if (isNaN(fieldValue)) {\n          return false;\n        } else {\n          return true;\n        }\n      }).test(pathLabel + \"min\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n\n          if (range.lower !== undefined && range.lowerIncluded === \"true\") {\n            if (Number(fieldValue) >= Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior ou igual a \" + range.lower\n            });\n          } else if (range.lower !== undefined && range.lowerIncluded === \"false\") {\n            if (Number(fieldValue) > Number(range.lower) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número superior a \" + range.lower\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"max\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let range = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          range = item.numerator.range;\n        }\n\n        if (range === undefined) {\n          return true;\n        } else {\n          // Processar para poder tirar o \"%\"\n          let fieldValue;\n\n          if (value === undefined || value === \"\") {\n            fieldValue = undefined;\n          } else {\n            fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n          }\n\n          if (range.upper !== undefined && range.upperIncluded === \"true\") {\n            if (Number(fieldValue) <= Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior ou igual a \" + range.upper\n            });\n          } else if (range.upper !== undefined && range.upperIncluded === \"false\") {\n            if (Number(fieldValue) < Number(range.upper) || fieldValue === undefined) {\n              return true;\n            }\n\n            return this.createError({\n              message: \"Campo inválido: deve ser um número inferior a \" + range.upper\n            });\n          } else {\n            return true;\n          }\n        }\n      }).test(pathLabel + \"precision\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let precision = undefined;\n        const numerator = item.numerator;\n\n        if (numerator === undefined) {\n          return true;\n        } else {\n          precision = item.numerator.precision;\n        }\n\n        if (precision === undefined) {\n          return true;\n        } else {\n          if (value === undefined || value === \"\") {\n            return true;\n          } else {\n            // Processar para poder tirar o \"%\"\n            let fieldValue;\n\n            if (value === undefined || value === \"\") {\n              fieldValue = undefined;\n            } else {\n              fieldValue = value.split(\"\").filter(x => x !== \"%\").join(\"\");\n            }\n\n            const nDecimals = checkDecimals(fieldValue);\n\n            if (precision.lowerPrecision === 0 && precision.lowerPrecision === 0) {\n              if (nDecimals === 0) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número inteiro\"\n              });\n            } else if (precision.lowerPrecision === 1 && precision.lowerPrecision === 1) {\n              if (nDecimals <= 1) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com apenas uma casa decimal\"\n              });\n            } else if (precision.lowerPrecision === 2 && precision.lowerPrecision === 2) {\n              if (nDecimals <= 2) {\n                return true;\n              }\n\n              return this.createError({\n                message: \"Campo inválido: deve ser um número com duas casas decimais\"\n              });\n            } else {\n              return true;\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n};\n\nexport { buildProportionValidation };"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,SAASC,2BAA2B,QAAQ,sEAAsE;AAClH,SAASC,yBAAyB,QAAQ,oEAAoE;AAC9G,SAASC,WAAW,QAAQ,sDAAsD;AAClF,SAASC,aAAa,QAAQ,0DAA0D;AACxF,SAASC,wBAAwB,QAAQ,+EAA+E;AACxH,SAASC,qBAAqB,QAAQ,4EAA4E,CAAC,CAAC;;AAEpH,MAAMC,yBAAyB,GAAG,CAACC,IAAI,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,iBAAiB,EAAEC,gBAAgB,KAAK;EAC5I,MAAMC,cAAc,GAAGd,2BAA2B,CAACO,IAAI,CAAC;EAExD,IAAIA,IAAI,CAACQ,IAAI,KAAK,SAAS,EAAE;IAC3B,IAAIR,IAAI,CAACS,WAAW,CAACC,gBAAgB,KAAK,CAAC,IAAIV,IAAI,CAACS,WAAW,CAACE,gBAAgB,KAAK,CAAC,EAAE;MACtFR,gBAAgB,CAACF,SAAS,CAAC,GAAGT,GAAG,CAACoB,MAAM,EAAE,CAACC,SAAS,CAAC,mFAAmF,CAAC,CAACC,IAAI,CAAC,UAAU,EAAE,mBAAmB,EAAE,UAAUC,KAAK,EAAE;QAC/L,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAME,cAAc,GAAGrB,wBAAwB,CAACkB,KAAK,EAAE,IAAI,CAACE,MAAM,EAAEb,WAAW,CAAC;QAEhF,IAAIc,cAAc,EAAE;UAClB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,OAAO,KAAK;QACd;MACF,CAAC,CAAC,CAACJ,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAID,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIC,MAAM,CAACT,KAAK,CAAC,IAAIS,MAAM,CAACL,KAAK,CAACG,KAAK,CAAC,IAAIP,KAAK,KAAKK,SAAS,EAAE;cAC/D,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACG;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIC,MAAM,CAACT,KAAK,CAAC,GAAGS,MAAM,CAACL,KAAK,CAACG,KAAK,CAAC,IAAIP,KAAK,KAAKK,SAAS,EAAE;cAC9D,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACG;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACR,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAID,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIJ,MAAM,CAACT,KAAK,CAAC,IAAIS,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC,IAAIZ,KAAK,KAAKK,SAAS,EAAE;cAC/D,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACQ;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIR,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIJ,MAAM,CAACT,KAAK,CAAC,GAAGS,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC,IAAIZ,KAAK,KAAKK,SAAS,EAAE;cAC9D,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACQ;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACb,IAAI,CAACb,SAAS,GAAG,WAAW,EAAE,UAAUc,KAAK,EAAE;QAChD,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIa,SAAS,GAAGT,SAAS;QACzB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLS,SAAS,GAAG7B,IAAI,CAACqB,SAAS,CAACQ,SAAS;QACtC;QAEA,IAAIA,SAAS,KAAKT,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAIL,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC,OAAO,IAAI;UACb,CAAC,MAAM;YACL,MAAMe,SAAS,GAAGlC,aAAa,CAACmB,KAAK,CAAC;YAEtC,IAAIc,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cACpE,IAAID,SAAS,KAAK,CAAC,EAAE;gBACnB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM;cACL,OAAO,IAAI;YACb;UACF;QACF;MACF,CAAC,CAAC,CAACZ,IAAI,CAAC,oBAAoB,EAAE,UAAUC,KAAK,EAAE;QAC7C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACO,iBAAiB,EAAEJ,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACtB,IAAI,CAAC,cAAc,EAAE,UAAUC,KAAK,EAAE;QACvC,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACI,iBAAiB,EAAED,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIpC,IAAI,CAACS,WAAW,CAACC,gBAAgB,KAAK,CAAC,IAAIV,IAAI,CAACS,WAAW,CAACE,gBAAgB,KAAK,CAAC,EAAE;MAC7FR,gBAAgB,CAACF,SAAS,CAAC,GAAGT,GAAG,CAACoB,MAAM,EAAE,CAACC,SAAS,CAAC,mFAAmF,CAAC,CAACC,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QACjL,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAID,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIR,KAAK,IAAII,KAAK,CAACG,KAAK,IAAIP,KAAK,KAAKK,SAAS,EAAE;cAC/C,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACG;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIR,KAAK,GAAGI,KAAK,CAACG,KAAK,IAAIP,KAAK,KAAKK,SAAS,EAAE;cAC9C,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACG;YACpE,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACR,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAID,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIb,KAAK,IAAII,KAAK,CAACQ,KAAK,IAAIZ,KAAK,KAAKK,SAAS,EAAE;cAC/C,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACQ;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIR,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIb,KAAK,GAAGI,KAAK,CAACQ,KAAK,IAAIZ,KAAK,KAAKK,SAAS,EAAE;cAC9C,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACQ;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIR,KAAK,CAACQ,KAAK,KAAKP,SAAS,EAAE;YACpC,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACN,IAAI,CAACb,SAAS,GAAG,WAAW,EAAE,UAAUc,KAAK,EAAE;QAChD,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIa,SAAS,GAAGT,SAAS;QACzB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLS,SAAS,GAAG7B,IAAI,CAACqB,SAAS,CAACQ,SAAS;QACtC;QAEA,IAAIA,SAAS,KAAKT,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAIL,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC,OAAO,IAAI;UACb,CAAC,MAAM;YACL,MAAMe,SAAS,GAAGlC,aAAa,CAACmB,KAAK,CAAC;YAEtC,IAAIc,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cACpE,IAAID,SAAS,KAAK,CAAC,EAAE;gBACnB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM;cACL,OAAO,IAAI;YACb;UACF;QACF;MACF,CAAC,CAAC,CAACZ,IAAI,CAAC,oBAAoB,EAAE,UAAUC,KAAK,EAAE;QAC7C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACO,iBAAiB,EAAEJ,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACtB,IAAI,CAAC,cAAc,EAAE,UAAUC,KAAK,EAAE;QACvC,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACI,iBAAiB,EAAED,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACtB,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,EAAE,UAAUC,KAAK,EAAE;QAC9D,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAI,CAACT,cAAc,EAAE;UACnB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAI8B,CAAC;UAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrC,IAAI,CAACsC,aAAa,CAACJ,MAAM,EAAEG,CAAC,EAAE,EAAE;YAC9C,MAAME,IAAI,GAAGvC,IAAI,CAACsC,aAAa,CAACD,CAAC,CAAC;YAClC,IAAIG,SAAS;YAEb,IAAID,IAAI,CAAC,KAAK,CAAC,EAAE;cACfC,SAAS,GAAG,KAAK;cACjB,IAAIC,CAAC;cACL,MAAMC,eAAe,GAAGH,IAAI,CAAC,KAAK,CAAC;cAEnC,KAAKE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,eAAe,CAACR,MAAM,EAAEO,CAAC,EAAE,EAAE;gBAC3C,MAAME,SAAS,GAAGD,eAAe,CAACD,CAAC,CAAC;gBACpC,MAAMG,IAAI,GAAGD,SAAS,CAAC,WAAW,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;gBACxD,MAAMC,mBAAmB,GAAGrD,yBAAyB,CAACiD,SAAS,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAAC,CAAC;gBAEnF,IAAIG,mBAAmB,EAAE;kBACvBP,SAAS,GAAG,IAAI;kBAChB;gBACF;cACF;YACF,CAAC,MAAM,IAAID,IAAI,CAAC,MAAM,CAAC,EAAE;cACvBC,SAAS,GAAG,IAAI;cAChB,IAAIC,CAAC;cACL,MAAMC,eAAe,GAAGH,IAAI,CAAC,MAAM,CAAC;cAEpC,KAAKE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,eAAe,CAACR,MAAM,EAAEO,CAAC,EAAE,EAAE;gBAC3C,MAAME,SAAS,GAAGD,eAAe,CAACD,CAAC,CAAC;gBACpC,MAAMG,IAAI,GAAGD,SAAS,CAAC,WAAW,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;gBACxD,MAAMC,mBAAmB,GAAGrD,yBAAyB,CAACiD,SAAS,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAAC,CAAC;gBAEnF,IAAI,CAACG,mBAAmB,EAAE;kBACxBP,SAAS,GAAG,KAAK;kBACjB;gBACF;cACF;YACF;YAEA,IAAI,CAACA,SAAS,EAAE;cACd,OAAO,IAAI;YACb,CAAC,MAAM;cACL,IAAIzB,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAKK,SAAS,EAAE;gBACvC,OAAO,KAAK;cACd,CAAC,MAAM,IAAI4B,KAAK,CAACC,OAAO,CAAClC,KAAK,CAAC,EAAE;gBAC/B,IAAIA,KAAK,CAACmB,MAAM,KAAK,CAAC,EAAE;kBACtB,OAAO,KAAK;gBACd,CAAC,MAAM,IAAInB,KAAK,CAAC,CAAC,CAAC,CAACmC,YAAY,KAAK9B,SAAS,IAAIL,KAAK,CAACoC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACrC,KAAK,KAAK,EAAE,CAAC,CAACmB,MAAM,KAAK,CAAC,EAAE;kBACpG,OAAO,KAAK;gBACd,CAAC,MAAM,IAAInB,KAAK,CAAC,CAAC,CAAC,CAACsC,MAAM,KAAKjC,SAAS,IAAIL,KAAK,CAACoC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACrC,KAAK,CAACuC,iBAAiB,EAAE,CAACC,OAAO,EAAE,CAAC,CAACrB,MAAM,KAAK,CAAC,EAAE;kBACrH,OAAO,KAAK;gBACd,CAAC,MAAM;kBACL,OAAO,IAAI;gBACb;cACF,CAAC,MAAM,IAAInB,KAAK,CAACyC,UAAU,KAAKpC,SAAS,EAAE;gBACzC,IAAI,CAACL,KAAK,CAACuC,iBAAiB,EAAE,CAACC,OAAO,EAAE,EAAE;kBACxC,OAAO,KAAK;gBACd,CAAC,MAAM;kBACL,OAAO,IAAI;gBACb;cACF,CAAC,MAAM;gBACL,OAAO,IAAI;cACb;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,MAAM,IAAIvD,IAAI,CAACQ,IAAI,KAAK,SAAS,EAAE;IAClC,IAAIR,IAAI,CAACS,WAAW,CAACC,gBAAgB,KAAK,CAAC,IAAIV,IAAI,CAACS,WAAW,CAACE,gBAAgB,KAAK,CAAC,EAAE;MACtFR,gBAAgB,CAACF,SAAS,CAAC,GAAGT,GAAG,CAACiE,MAAM,EAAE,CAAC3C,IAAI,CAAC,QAAQ,EAAE,mFAAmF,EAAE,UAAUC,KAAK,EAAE;QAC9J,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb,CAAC,CAAC;;QAGF,IAAI0C,UAAU;QAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;UACvC2C,UAAU,GAAGtC,SAAS;QACxB,CAAC,MAAM;UACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;QAC9D;QAEA,IAAIY,UAAU,KAAKtC,SAAS,EAAE;UAC5B,OAAO,IAAI;QACb,CAAC,MAAM,IAAIwC,KAAK,CAACF,UAAU,CAAC,EAAE;UAC5B,OAAO,KAAK;QACd,CAAC,MAAM;UACL,OAAO,IAAI;QACb;MACF,CAAC,CAAC,CAAC5C,IAAI,CAAC,UAAU,EAAE,mBAAmB,EAAE,UAAUC,KAAK,EAAE;QACxD,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAME,cAAc,GAAGrB,wBAAwB,CAACkB,KAAK,EAAE,IAAI,CAACE,MAAM,EAAEb,WAAW,CAAC;QAEhF,IAAIc,cAAc,EAAE;UAClB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,OAAO,KAAK;QACd;MACF,CAAC,CAAC,CAACJ,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL;UACA,IAAIsC,UAAU;UAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC2C,UAAU,GAAGtC,SAAS;UACxB,CAAC,MAAM;YACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;UAC9D;UAEA,IAAI3B,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIC,MAAM,CAACkC,UAAU,CAAC,IAAIlC,MAAM,CAACL,KAAK,CAACG,KAAK,CAAC,IAAIoC,UAAU,KAAKtC,SAAS,EAAE;cACzE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACG;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIC,MAAM,CAACkC,UAAU,CAAC,GAAGlC,MAAM,CAACL,KAAK,CAACG,KAAK,CAAC,IAAIoC,UAAU,KAAKtC,SAAS,EAAE;cACxE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACG;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACR,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL;UACA,IAAIsC,UAAU;UAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC2C,UAAU,GAAGtC,SAAS;UACxB,CAAC,MAAM;YACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;UAC9D;UAEA,IAAI3B,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIJ,MAAM,CAACkC,UAAU,CAAC,IAAIlC,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC,IAAI+B,UAAU,KAAKtC,SAAS,EAAE;cACzE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACQ;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIR,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIJ,MAAM,CAACkC,UAAU,CAAC,GAAGlC,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC,IAAI+B,UAAU,KAAKtC,SAAS,EAAE;cACxE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACQ;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACb,IAAI,CAACb,SAAS,GAAG,WAAW,EAAE,UAAUc,KAAK,EAAE;QAChD,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIa,SAAS,GAAGT,SAAS;QACzB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLS,SAAS,GAAG7B,IAAI,CAACqB,SAAS,CAACQ,SAAS;QACtC;QAEA,IAAIA,SAAS,KAAKT,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAIL,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC,OAAO,IAAI;UACb,CAAC,MAAM;YACL;YACA,IAAI2C,UAAU;YAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;cACvC2C,UAAU,GAAGtC,SAAS;YACxB,CAAC,MAAM;cACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;YAC9D;YAEA,MAAMhB,SAAS,GAAGlC,aAAa,CAAC8D,UAAU,CAAC;YAE3C,IAAI7B,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cACpE,IAAID,SAAS,KAAK,CAAC,EAAE;gBACnB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM;cACL,OAAO,IAAI;YACb;UACF;QACF;MACF,CAAC,CAAC,CAACZ,IAAI,CAAC,oBAAoB,EAAE,UAAUC,KAAK,EAAE;QAC7C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACO,iBAAiB,EAAEJ,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACtB,IAAI,CAAC,cAAc,EAAE,UAAUC,KAAK,EAAE;QACvC,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACI,iBAAiB,EAAED,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIpC,IAAI,CAACS,WAAW,CAACC,gBAAgB,KAAK,CAAC,IAAIV,IAAI,CAACS,WAAW,CAACE,gBAAgB,KAAK,CAAC,EAAE;MAC7FR,gBAAgB,CAACF,SAAS,CAAC,GAAGT,GAAG,CAACiE,MAAM,EAAE,CAAC3C,IAAI,CAAC,QAAQ,EAAE,mFAAmF,EAAE,UAAUC,KAAK,EAAE;QAC9J,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb,CAAC,CAAC;;QAGF,IAAI0C,UAAU;QAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;UACvC2C,UAAU,GAAGtC,SAAS;QACxB,CAAC,MAAM;UACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;QAC9D;QAEA,IAAIY,UAAU,KAAKtC,SAAS,EAAE;UAC5B,OAAO,IAAI;QACb,CAAC,MAAM,IAAIwC,KAAK,CAACF,UAAU,CAAC,EAAE;UAC5B,OAAO,KAAK;QACd,CAAC,MAAM;UACL,OAAO,IAAI;QACb;MACF,CAAC,CAAC,CAAC5C,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL;UACA,IAAIsC,UAAU;UAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC2C,UAAU,GAAGtC,SAAS;UACxB,CAAC,MAAM;YACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;UAC9D;UAEA,IAAI3B,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIC,MAAM,CAACkC,UAAU,CAAC,IAAIlC,MAAM,CAACL,KAAK,CAACG,KAAK,CAAC,IAAIoC,UAAU,KAAKtC,SAAS,EAAE;cACzE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACG;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,KAAK,CAACG,KAAK,KAAKF,SAAS,IAAID,KAAK,CAACI,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIC,MAAM,CAACkC,UAAU,CAAC,GAAGlC,MAAM,CAACL,KAAK,CAACG,KAAK,CAAC,IAAIoC,UAAU,KAAKtC,SAAS,EAAE;cACxE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACG;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACR,IAAI,CAACb,SAAS,GAAG,KAAK,EAAE,UAAUc,KAAK,EAAE;QAC1C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIG,KAAK,GAAGC,SAAS;QACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLD,KAAK,GAAGnB,IAAI,CAACqB,SAAS,CAACF,KAAK;QAC9B;QAEA,IAAIA,KAAK,KAAKC,SAAS,EAAE;UACvB,OAAO,IAAI;QACb,CAAC,MAAM;UACL;UACA,IAAIsC,UAAU;UAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC2C,UAAU,GAAGtC,SAAS;UACxB,CAAC,MAAM;YACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;UAC9D;UAEA,IAAI3B,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,MAAM,EAAE;YAC/D,IAAIJ,MAAM,CAACkC,UAAU,CAAC,IAAIlC,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC,IAAI+B,UAAU,KAAKtC,SAAS,EAAE;cACzE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,yDAAyD,GAAGP,KAAK,CAACQ;YAC7E,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIR,KAAK,CAACQ,KAAK,KAAKP,SAAS,IAAID,KAAK,CAACS,aAAa,KAAK,OAAO,EAAE;YACvE,IAAIJ,MAAM,CAACkC,UAAU,CAAC,GAAGlC,MAAM,CAACL,KAAK,CAACQ,KAAK,CAAC,IAAI+B,UAAU,KAAKtC,SAAS,EAAE;cACxE,OAAO,IAAI;YACb;YAEA,OAAO,IAAI,CAACK,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGP,KAAK,CAACQ;YACpE,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,CAACb,IAAI,CAACb,SAAS,GAAG,WAAW,EAAE,UAAUc,KAAK,EAAE;QAChD,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAIa,SAAS,GAAGT,SAAS;QACzB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAS;QAEhC,IAAIA,SAAS,KAAKD,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACLS,SAAS,GAAG7B,IAAI,CAACqB,SAAS,CAACQ,SAAS;QACtC;QAEA,IAAIA,SAAS,KAAKT,SAAS,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAIL,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;YACvC,OAAO,IAAI;UACb,CAAC,MAAM;YACL;YACA,IAAI2C,UAAU;YAEd,IAAI3C,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,EAAE,EAAE;cACvC2C,UAAU,GAAGtC,SAAS;YACxB,CAAC,MAAM;cACLsC,UAAU,GAAG3C,KAAK,CAAC8B,KAAK,CAAC,EAAE,CAAC,CAACM,MAAM,CAACQ,CAAC,IAAIA,CAAC,KAAK,GAAG,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;YAC9D;YAEA,MAAMhB,SAAS,GAAGlC,aAAa,CAAC8D,UAAU,CAAC;YAE3C,IAAI7B,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cACpE,IAAID,SAAS,KAAK,CAAC,EAAE;gBACnB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM,IAAIG,SAAS,CAACE,cAAc,KAAK,CAAC,IAAIF,SAAS,CAACE,cAAc,KAAK,CAAC,EAAE;cAC3E,IAAID,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI;cACb;cAEA,OAAO,IAAI,CAACL,WAAW,CAAC;gBACtBC,OAAO,EAAE;cACX,CAAC,CAAC;YACJ,CAAC,MAAM;cACL,OAAO,IAAI;YACb;UACF;QACF;MACF,CAAC,CAAC,CAACZ,IAAI,CAAC,oBAAoB,EAAE,UAAUC,KAAK,EAAE;QAC7C,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACO,iBAAiB,EAAEJ,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACtB,IAAI,CAAC,cAAc,EAAE,UAAUC,KAAK,EAAE;QACvC,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,MAAMgB,GAAG,GAAGlC,qBAAqB,CAACI,iBAAiB,EAAED,SAAS,EAAE,IAAI,CAACgB,MAAM,EAAEX,gBAAgB,CAAC;QAE9F,IAAI0B,GAAG,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGD,GAAG;UAEzB,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,gDAAgD,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACxG,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIH,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,CAACT,WAAW,CAAC;cACtBC,OAAO,EAAE,6CAA6C,GAAGO,aAAa,CAACE,QAAQ,EAAE,CAACC,iBAAiB;YACrG,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC,CAACtB,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,EAAE,UAAUC,KAAK,EAAE;QAC9D,MAAMC,SAAS,GAAGrB,WAAW,CAACK,IAAI,EAAE,IAAI,CAACiB,MAAM,EAAE,YAAY,CAAC;QAE9D,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,IAAI;QACb;QAEA,IAAI,CAACT,cAAc,EAAE;UACnB,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAI8B,CAAC;UAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrC,IAAI,CAACsC,aAAa,CAACJ,MAAM,EAAEG,CAAC,EAAE,EAAE;YAC9C,MAAME,IAAI,GAAGvC,IAAI,CAACsC,aAAa,CAACD,CAAC,CAAC;YAClC,IAAIG,SAAS;YAEb,IAAID,IAAI,CAAC,KAAK,CAAC,EAAE;cACfC,SAAS,GAAG,KAAK;cACjB,IAAIC,CAAC;cACL,MAAMC,eAAe,GAAGH,IAAI,CAAC,KAAK,CAAC;cAEnC,KAAKE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,eAAe,CAACR,MAAM,EAAEO,CAAC,EAAE,EAAE;gBAC3C,MAAME,SAAS,GAAGD,eAAe,CAACD,CAAC,CAAC;gBACpC,MAAMG,IAAI,GAAGD,SAAS,CAAC,WAAW,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;gBACxD,MAAMC,mBAAmB,GAAGrD,yBAAyB,CAACiD,SAAS,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAAC,CAAC;gBAEnF,IAAIG,mBAAmB,EAAE;kBACvBP,SAAS,GAAG,IAAI;kBAChB;gBACF;cACF;YACF,CAAC,MAAM,IAAID,IAAI,CAAC,MAAM,CAAC,EAAE;cACvBC,SAAS,GAAG,IAAI;cAChB,IAAIC,CAAC;cACL,MAAMC,eAAe,GAAGH,IAAI,CAAC,MAAM,CAAC;cAEpC,KAAKE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,eAAe,CAACR,MAAM,EAAEO,CAAC,EAAE,EAAE;gBAC3C,MAAME,SAAS,GAAGD,eAAe,CAACD,CAAC,CAAC;gBACpC,MAAMG,IAAI,GAAGD,SAAS,CAAC,WAAW,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;gBACxD,MAAMC,mBAAmB,GAAGrD,yBAAyB,CAACiD,SAAS,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAAC,CAAC;gBAEnF,IAAI,CAACG,mBAAmB,EAAE;kBACxBP,SAAS,GAAG,KAAK;kBACjB;gBACF;cACF;YACF;YAEA,IAAI,CAACA,SAAS,EAAE;cACd,OAAO,IAAI;YACb,CAAC,MAAM;cACL,IAAIzB,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAKK,SAAS,EAAE;gBACvC,OAAO,KAAK;cACd,CAAC,MAAM,IAAI4B,KAAK,CAACC,OAAO,CAAClC,KAAK,CAAC,EAAE;gBAC/B,IAAIA,KAAK,CAACmB,MAAM,KAAK,CAAC,EAAE;kBACtB,OAAO,KAAK;gBACd,CAAC,MAAM,IAAInB,KAAK,CAAC,CAAC,CAAC,CAACmC,YAAY,KAAK9B,SAAS,IAAIL,KAAK,CAACoC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACrC,KAAK,KAAK,EAAE,CAAC,CAACmB,MAAM,KAAK,CAAC,EAAE;kBACpG,OAAO,KAAK;gBACd,CAAC,MAAM,IAAInB,KAAK,CAAC,CAAC,CAAC,CAACsC,MAAM,KAAKjC,SAAS,IAAIL,KAAK,CAACoC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACrC,KAAK,CAACuC,iBAAiB,EAAE,CAACC,OAAO,EAAE,CAAC,CAACrB,MAAM,KAAK,CAAC,EAAE;kBACrH,OAAO,KAAK;gBACd,CAAC,MAAM;kBACL,OAAO,IAAI;gBACb;cACF,CAAC,MAAM,IAAInB,KAAK,CAACyC,UAAU,KAAKpC,SAAS,EAAE;gBACzC,IAAI,CAACL,KAAK,CAACuC,iBAAiB,EAAE,CAACC,OAAO,EAAE,EAAE;kBACxC,OAAO,KAAK;gBACd,CAAC,MAAM;kBACL,OAAO,IAAI;gBACb;cACF,CAAC,MAAM;gBACL,OAAO,IAAI;cACb;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAED,SAASxD,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}