{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar _knownListItemDepthCl;\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar CharacterMetadata = require(\"./CharacterMetadata\");\nvar ContentBlock = require(\"./ContentBlock\");\nvar ContentBlockNode = require(\"./ContentBlockNode\");\nvar DefaultDraftBlockRenderMap = require(\"./DefaultDraftBlockRenderMap\");\nvar DraftEntity = require(\"./DraftEntity\");\nvar URI = require(\"fbjs/lib/URI\");\nvar cx = require(\"fbjs/lib/cx\");\nvar generateRandomKey = require(\"./generateRandomKey\");\nvar getSafeBodyFromHTML = require(\"./getSafeBodyFromHTML\");\nvar gkx = require(\"./gkx\");\nvar _require = require(\"immutable\"),\n  List = _require.List,\n  Map = _require.Map,\n  OrderedSet = _require.OrderedSet;\nvar isHTMLAnchorElement = require(\"./isHTMLAnchorElement\");\nvar isHTMLBRElement = require(\"./isHTMLBRElement\");\nvar isHTMLElement = require(\"./isHTMLElement\");\nvar isHTMLImageElement = require(\"./isHTMLImageElement\");\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar NBSP = '&nbsp;';\nvar SPACE = ' '; // used for replacing characters in HTML\n\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_LEADING_LF = new RegExp('^\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g'); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\n\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\nvar notBoldValues = ['light', 'lighter', 'normal', '100', '200', '300', '400'];\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth0'), 0), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth1'), 1), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth2'), 2), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth3'), 3), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth4'), 4), _knownListItemDepthCl);\nvar HTMLTagToRawInlineStyleMap = Map({\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE',\n  mark: 'HIGHLIGHT'\n});\n\n/**\r\n * Build a mapping from HTML tags to draftjs block types\r\n * out of a BlockRenderMap.\r\n *\r\n * The BlockTypeMap for the default BlockRenderMap looks like this:\r\n *   Map({\r\n *     h1: 'header-one',\r\n *     h2: 'header-two',\r\n *     h3: 'header-three',\r\n *     h4: 'header-four',\r\n *     h5: 'header-five',\r\n *     h6: 'header-six',\r\n *     blockquote: 'blockquote',\r\n *     figure: 'atomic',\r\n *     pre: ['code-block'],\r\n *     div: 'unstyled',\r\n *     p: 'unstyled',\r\n *     li: ['ordered-list-item', 'unordered-list-item'],\r\n *   })\r\n */\nvar buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {\n  var blockTypeMap = {};\n  blockRenderMap.mapKeys(function (blockType, desc) {\n    var elements = [desc.element];\n    if (desc.aliasedElements !== undefined) {\n      elements.push.apply(elements, desc.aliasedElements);\n    }\n    elements.forEach(function (element) {\n      if (blockTypeMap[element] === undefined) {\n        blockTypeMap[element] = blockType;\n      } else if (typeof blockTypeMap[element] === 'string') {\n        blockTypeMap[element] = [blockTypeMap[element], blockType];\n      } else {\n        blockTypeMap[element].push(blockType);\n      }\n    });\n  });\n  return Map(blockTypeMap);\n};\nvar detectInlineStyle = function detectInlineStyle(node) {\n  if (isHTMLElement(node)) {\n    var element = node; // Currently only used to detect preformatted inline code\n\n    if (element.style.fontFamily.includes('monospace')) {\n      return 'CODE';\n    }\n  }\n  return null;\n};\n/**\r\n * If we're pasting from one DraftEditor to another we can check to see if\r\n * existing list item depth classes are being used and preserve this style\r\n */\n\nvar getListItemDepth = function getListItemDepth(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  Object.keys(knownListItemDepthClasses).some(function (depthClass) {\n    if (node.classList.contains(depthClass)) {\n      depth = knownListItemDepthClasses[depthClass];\n    }\n  });\n  return depth;\n};\n/**\r\n * Return true if the provided HTML Element can be used to build a\r\n * Draftjs-compatible link.\r\n */\n\nvar isValidAnchor = function isValidAnchor(node) {\n  if (!isHTMLAnchorElement(node)) {\n    return false;\n  }\n  var anchorNode = node;\n  if (!anchorNode.href || anchorNode.protocol !== 'http:' && anchorNode.protocol !== 'https:' && anchorNode.protocol !== 'mailto:' && anchorNode.protocol !== 'tel:') {\n    return false;\n  }\n  try {\n    // Just checking whether we can actually create a URI\n    var _ = new URI(anchorNode.href);\n    return true; // We need our catch statements to have arguments, else\n    // UglifyJS (which we use for our OSS builds) will crash.\n    // eslint-disable-next-line fb-www/no-unused-catch-bindings\n  } catch (_) {\n    return false;\n  }\n};\n/**\r\n * Return true if the provided HTML Element can be used to build a\r\n * Draftjs-compatible image.\r\n */\n\nvar isValidImage = function isValidImage(node) {\n  if (!isHTMLImageElement(node)) {\n    return false;\n  }\n  var imageNode = node;\n  return !!(imageNode.attributes.getNamedItem('src') && imageNode.attributes.getNamedItem('src').value);\n};\n/**\r\n * Try to guess the inline style of an HTML element based on its css\r\n * styles (font-weight, font-style and text-decoration).\r\n */\n\nvar styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {\n  if (!isHTMLElement(node)) {\n    return style;\n  }\n  var htmlElement = node;\n  var fontWeight = htmlElement.style.fontWeight;\n  var fontStyle = htmlElement.style.fontStyle;\n  var textDecoration = htmlElement.style.textDecoration;\n  return style.withMutations(function (style) {\n    if (boldValues.indexOf(fontWeight) >= 0) {\n      style.add('BOLD');\n    } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n      style.remove('BOLD');\n    }\n    if (fontStyle === 'italic') {\n      style.add('ITALIC');\n    } else if (fontStyle === 'normal') {\n      style.remove('ITALIC');\n    }\n    if (textDecoration === 'underline') {\n      style.add('UNDERLINE');\n    }\n    if (textDecoration === 'line-through') {\n      style.add('STRIKETHROUGH');\n    }\n    if (textDecoration === 'none') {\n      style.remove('UNDERLINE');\n      style.remove('STRIKETHROUGH');\n    }\n  });\n};\n/**\r\n * Determine if a nodeName is a list type, 'ul' or 'ol'\r\n */\n\nvar isListNode = function isListNode(nodeName) {\n  return nodeName === 'ul' || nodeName === 'ol';\n};\n/**\r\n *  ContentBlockConfig is a mutable data structure that holds all\r\n *  the information required to build a ContentBlock and an array of\r\n *  all the child nodes (childConfigs).\r\n *  It is being used a temporary data structure by the\r\n *  ContentBlocksBuilder class.\r\n */\n\n/**\r\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\r\n * out of one (or several) HTMLElement(s).\r\n *\r\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\r\n * by walking through the HTML nodes and their children, then it walks the\r\n * ContentBlockConfigs tree to compute parents/siblings and create\r\n * the actual ContentBlocks.\r\n *\r\n * Typical usage is:\r\n *     new ContentBlocksBuilder()\r\n *        .addDOMNode(someHTMLNode)\r\n *        .addDOMNode(someOtherHTMLNode)\r\n *       .getContentBlocks();\r\n *\r\n */\nvar ContentBlocksBuilder = /*#__PURE__*/function () {\n  // Most of the method in the class depend on the state of the content builder\n  // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\n  // be confusing at first, it made the code simpler than the alternative which\n  // is to pass those values around in every call.\n  // The following attributes are used to accumulate text and styles\n  // as we are walking the HTML node tree.\n  // Describes the future ContentState as a tree of content blocks\n  // The content blocks generated from the blockConfigs\n  // Entity map use to store links and images found in the HTML nodes\n  // Map HTML tags to draftjs block types and disambiguation function\n  function ContentBlocksBuilder(blockTypeMap, disambiguate) {\n    _defineProperty(this, \"characterList\", List());\n    _defineProperty(this, \"currentBlockType\", 'unstyled');\n    _defineProperty(this, \"currentDepth\", 0);\n    _defineProperty(this, \"currentEntity\", null);\n    _defineProperty(this, \"currentText\", '');\n    _defineProperty(this, \"wrapper\", null);\n    _defineProperty(this, \"blockConfigs\", []);\n    _defineProperty(this, \"contentBlocks\", []);\n    _defineProperty(this, \"entityMap\", DraftEntity);\n    _defineProperty(this, \"blockTypeMap\", void 0);\n    _defineProperty(this, \"disambiguate\", void 0);\n    this.clear();\n    this.blockTypeMap = blockTypeMap;\n    this.disambiguate = disambiguate;\n  }\n  /**\r\n   * Clear the internal state of the ContentBlocksBuilder\r\n   */\n\n  var _proto = ContentBlocksBuilder.prototype;\n  _proto.clear = function clear() {\n    this.characterList = List();\n    this.blockConfigs = [];\n    this.currentBlockType = 'unstyled';\n    this.currentDepth = 0;\n    this.currentEntity = null;\n    this.currentText = '';\n    this.entityMap = DraftEntity;\n    this.wrapper = null;\n    this.contentBlocks = [];\n  }\n  /**\r\n   * Add an HTMLElement to the ContentBlocksBuilder\r\n   */;\n\n  _proto.addDOMNode = function addDOMNode(node) {\n    var _this$blockConfigs;\n    this.contentBlocks = [];\n    this.currentDepth = 0; // Converts the HTML node to block config\n\n    (_this$blockConfigs = this.blockConfigs).push.apply(_this$blockConfigs, this._toBlockConfigs([node], OrderedSet())); // There might be some left over text in the builder's\n    // internal state, if so make a ContentBlock out of it.\n\n    this._trimCurrentText();\n    if (this.currentText !== '') {\n      this.blockConfigs.push(this._makeBlockConfig());\n    } // for chaining\n\n    return this;\n  }\n  /**\r\n   * Return the ContentBlocks and the EntityMap that corresponds\r\n   * to the previously added HTML nodes.\r\n   */;\n\n  _proto.getContentBlocks = function getContentBlocks() {\n    if (this.contentBlocks.length === 0) {\n      if (experimentalTreeDataSupport) {\n        this._toContentBlocks(this.blockConfigs);\n      } else {\n        this._toFlatContentBlocks(this.blockConfigs);\n      }\n    }\n    return {\n      contentBlocks: this.contentBlocks,\n      entityMap: this.entityMap\n    };\n  } // ***********************************WARNING******************************\n  // The methods below this line are private - don't call them directly.\n\n  /**\r\n   * Generate a new ContentBlockConfig out of the current internal state\r\n   * of the builder, then clears the internal state.\r\n   */;\n\n  _proto._makeBlockConfig = function _makeBlockConfig() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var key = config.key || generateRandomKey();\n    var block = _objectSpread({\n      key: key,\n      type: this.currentBlockType,\n      text: this.currentText,\n      characterList: this.characterList,\n      depth: this.currentDepth,\n      parent: null,\n      children: List(),\n      prevSibling: null,\n      nextSibling: null,\n      childConfigs: []\n    }, config);\n    this.characterList = List();\n    this.currentBlockType = 'unstyled';\n    this.currentText = '';\n    return block;\n  }\n  /**\r\n   * Converts an array of HTML elements to a multi-root tree of content\r\n   * block configs. Some text content may be left in the builders internal\r\n   * state to enable chaining sucessive calls.\r\n   */;\n\n  _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {\n    var blockConfigs = [];\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var nodeName = node.nodeName.toLowerCase();\n      if (nodeName === 'body' || isListNode(nodeName)) {\n        // body, ol and ul are 'block' type nodes so create a block config\n        // with the text accumulated so far (if any)\n        this._trimCurrentText();\n        if (this.currentText !== '') {\n          blockConfigs.push(this._makeBlockConfig());\n        } // body, ol and ul nodes are ignored, but their children are inlined in\n        // the parent block config.\n\n        var wasCurrentDepth = this.currentDepth;\n        var wasWrapper = this.wrapper;\n        if (isListNode(nodeName)) {\n          this.wrapper = nodeName;\n          if (isListNode(wasWrapper)) {\n            this.currentDepth++;\n          }\n        }\n        blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n        this.currentDepth = wasCurrentDepth;\n        this.wrapper = wasWrapper;\n        continue;\n      }\n      var blockType = this.blockTypeMap.get(nodeName);\n      if (blockType !== undefined) {\n        // 'block' type node means we need to create a block config\n        // with the text accumulated so far (if any)\n        this._trimCurrentText();\n        if (this.currentText !== '') {\n          blockConfigs.push(this._makeBlockConfig());\n        }\n        var _wasCurrentDepth = this.currentDepth;\n        var _wasWrapper = this.wrapper;\n        this.wrapper = nodeName === 'pre' ? 'pre' : this.wrapper;\n        if (typeof blockType !== 'string') {\n          blockType = this.disambiguate(nodeName, this.wrapper) || blockType[0] || 'unstyled';\n        }\n        if (!experimentalTreeDataSupport && isHTMLElement(node) && (blockType === 'unordered-list-item' || blockType === 'ordered-list-item')) {\n          var htmlElement = node;\n          this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\n        }\n        var key = generateRandomKey();\n        var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);\n        this._trimCurrentText();\n        blockConfigs.push(this._makeBlockConfig({\n          key: key,\n          childConfigs: childConfigs,\n          type: blockType\n        }));\n        this.currentDepth = _wasCurrentDepth;\n        this.wrapper = _wasWrapper;\n        continue;\n      }\n      if (nodeName === '#text') {\n        this._addTextNode(node, style);\n        continue;\n      }\n      if (nodeName === 'br') {\n        this._addBreakNode(node, style);\n        continue;\n      }\n      if (isValidImage(node)) {\n        this._addImgNode(node, style);\n        continue;\n      }\n      if (isValidAnchor(node)) {\n        this._addAnchorNode(node, blockConfigs, style);\n        continue;\n      }\n      var newStyle = style;\n      if (HTMLTagToRawInlineStyleMap.has(nodeName)) {\n        newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));\n      }\n      newStyle = styleFromNodeAttributes(node, newStyle);\n      var inlineStyle = detectInlineStyle(node);\n      if (inlineStyle != null) {\n        newStyle = newStyle.add(inlineStyle);\n      }\n      blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), newStyle));\n    }\n    return blockConfigs;\n  }\n  /**\r\n   * Append a string of text to the internal buffer.\r\n   */;\n\n  _proto._appendText = function _appendText(text, style) {\n    var _this$characterList;\n    this.currentText += text;\n    var characterMetadata = CharacterMetadata.create({\n      style: style,\n      entity: this.currentEntity\n    });\n    this.characterList = (_this$characterList = this.characterList).push.apply(_this$characterList, Array(text.length).fill(characterMetadata));\n  }\n  /**\r\n   * Trim the text in the internal buffer.\r\n   */;\n\n  _proto._trimCurrentText = function _trimCurrentText() {\n    var l = this.currentText.length;\n    var begin = l - this.currentText.trimLeft().length;\n    var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.\n\n    var entity = this.characterList.findEntry(function (characterMetadata) {\n      return characterMetadata.getEntity() !== null;\n    });\n    begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\n    entity = this.characterList.reverse().findEntry(function (characterMetadata) {\n      return characterMetadata.getEntity() !== null;\n    });\n    end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\n    if (begin > end) {\n      this.currentText = '';\n      this.characterList = List();\n    } else {\n      this.currentText = this.currentText.slice(begin, end);\n      this.characterList = this.characterList.slice(begin, end);\n    }\n  }\n  /**\r\n   * Add the content of an HTML text node to the internal state\r\n   */;\n\n  _proto._addTextNode = function _addTextNode(node, style) {\n    var text = node.textContent;\n    var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,\n    // normalize to a single space.\n\n    if (trimmedText === '' && this.wrapper !== 'pre') {\n      text = ' ';\n    }\n    if (this.wrapper !== 'pre') {\n      // Trim leading line feed, which is invisible in HTML\n      text = text.replace(REGEX_LEADING_LF, ''); // Can't use empty string because MSWord\n\n      text = text.replace(REGEX_LF, SPACE);\n    }\n    this._appendText(text, style);\n  };\n  _proto._addBreakNode = function _addBreakNode(node, style) {\n    if (!isHTMLBRElement(node)) {\n      return;\n    }\n    this._appendText('\\n', style);\n  }\n  /**\r\n   * Add the content of an HTML img node to the internal state\r\n   */;\n\n  _proto._addImgNode = function _addImgNode(node, style) {\n    if (!isHTMLImageElement(node)) {\n      return;\n    }\n    var image = node;\n    var entityConfig = {};\n    imgAttr.forEach(function (attr) {\n      var imageAttribute = image.getAttribute(attr);\n      if (imageAttribute) {\n        entityConfig[attr] = imageAttribute;\n      }\n    }); // TODO: T15530363 update this when we remove DraftEntity entirely\n\n    this.currentEntity = this.entityMap.__create('IMAGE', 'IMMUTABLE', entityConfig); // The child text node cannot just have a space or return as content (since\n    // we strip those out), unless the image is for presentation only.\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\n\n    if (gkx('draftjs_fix_paste_for_img')) {\n      if (image.getAttribute('role') !== 'presentation') {\n        this._appendText(\"\\uD83D\\uDCF7\", style);\n      }\n    } else {\n      this._appendText(\"\\uD83D\\uDCF7\", style);\n    }\n    this.currentEntity = null;\n  }\n  /**\r\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\r\n   * (if any) are converted to Block Configs and appended to the provided\r\n   * blockConfig array.\r\n   */;\n\n  _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {\n    // The check has already been made by isValidAnchor but\n    // we have to do it again to keep flow happy.\n    if (!isHTMLAnchorElement(node)) {\n      return;\n    }\n    var anchor = node;\n    var entityConfig = {};\n    anchorAttr.forEach(function (attr) {\n      var anchorAttribute = anchor.getAttribute(attr);\n      if (anchorAttribute) {\n        entityConfig[attr] = anchorAttribute;\n      }\n    });\n    entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely\n\n    this.currentEntity = this.entityMap.__create('LINK', 'MUTABLE', entityConfig || {});\n    blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n    this.currentEntity = null;\n  }\n  /**\r\n   * Walk the BlockConfig tree, compute parent/children/siblings,\r\n   * and generate the corresponding ContentBlockNode\r\n   */;\n\n  _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var l = blockConfigs.length - 1;\n    for (var i = 0; i <= l; i++) {\n      var config = blockConfigs[i];\n      config.parent = parent;\n      config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\n      config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\n      config.children = List(config.childConfigs.map(function (child) {\n        return child.key;\n      }));\n      this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));\n      this._toContentBlocks(config.childConfigs, config.key);\n    }\n  }\n  /**\r\n   * Remove 'useless' container nodes from the block config hierarchy, by\r\n   * replacing them with their children.\r\n   */;\n\n  _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(blockConfigs) {\n    var _this = this;\n    var hoisted = List(blockConfigs).flatMap(function (blockConfig) {\n      // Don't mess with useful blocks\n      if (blockConfig.type !== 'unstyled' || blockConfig.text !== '') {\n        return [blockConfig];\n      }\n      return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\n    });\n    return hoisted;\n  } // ***********************************************************************\n  // The two methods below are used for backward compatibility when\n  // experimentalTreeDataSupport is disabled.\n\n  /**\r\n   * Same as _toContentBlocks but replaces nested blocks by their\r\n   * text content.\r\n   */;\n\n  _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {\n    var _this2 = this;\n    var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\n    cleanConfigs.forEach(function (config) {\n      var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs),\n        text = _this2$_extractTextFr.text,\n        characterList = _this2$_extractTextFr.characterList;\n      _this2.contentBlocks.push(new ContentBlock(_objectSpread({}, config, {\n        text: config.text + text,\n        characterList: config.characterList.concat(characterList)\n      })));\n    });\n  }\n  /**\r\n   * Extract the text and the associated inline styles form an\r\n   * array of content block configs.\r\n   */;\n\n  _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(blockConfigs) {\n    var l = blockConfigs.length - 1;\n    var text = '';\n    var characterList = List();\n    for (var i = 0; i <= l; i++) {\n      var config = blockConfigs[i];\n      text += config.text;\n      characterList = characterList.concat(config.characterList);\n      if (text !== '' && config.type !== 'unstyled') {\n        text += '\\n';\n        characterList = characterList.push(characterList.last());\n      }\n      var children = this._extractTextFromBlockConfigs(config.childConfigs);\n      text += children.text;\n      characterList = characterList.concat(children.characterList);\n    }\n    return {\n      text: text,\n      characterList: characterList\n    };\n  };\n  return ContentBlocksBuilder;\n}();\n/**\r\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\r\n * suitable to initialize the internal state of a Draftjs component.\r\n */\n\nvar convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n  // Remove funky characters from the HTML string\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, ''); // Build a DOM tree out of the HTML string\n\n  var safeBody = DOMBuilder(html);\n  if (!safeBody) {\n    return null;\n  } // Build a BlockTypeMap out of the BlockRenderMap\n\n  var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap\n  // uses multiple block types for the same html tag.\n\n  var disambiguate = function disambiguate(tag, wrapper) {\n    if (tag === 'li') {\n      return wrapper === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n    }\n    return null;\n  };\n  return new ContentBlocksBuilder(blockTypeMap, disambiguate).addDOMNode(safeBody).getContentBlocks();\n};\nmodule.exports = convertFromHTMLToContentBlocks;","map":{"version":3,"names":["_knownListItemDepthCl","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","CharacterMetadata","require","ContentBlock","ContentBlockNode","DefaultDraftBlockRenderMap","DraftEntity","URI","cx","generateRandomKey","getSafeBodyFromHTML","gkx","_require","List","Map","OrderedSet","isHTMLAnchorElement","isHTMLBRElement","isHTMLElement","isHTMLImageElement","experimentalTreeDataSupport","NBSP","SPACE","REGEX_CR","RegExp","REGEX_LF","REGEX_LEADING_LF","REGEX_NBSP","REGEX_CARRIAGE","REGEX_ZWS","boldValues","notBoldValues","anchorAttr","imgAttr","knownListItemDepthClasses","HTMLTagToRawInlineStyleMap","b","code","del","em","s","strike","strong","u","mark","buildBlockTypeMap","blockRenderMap","blockTypeMap","mapKeys","blockType","desc","elements","element","aliasedElements","undefined","push","apply","detectInlineStyle","node","style","fontFamily","includes","getListItemDepth","depth","some","depthClass","classList","contains","isValidAnchor","anchorNode","href","protocol","_","isValidImage","imageNode","attributes","getNamedItem","styleFromNodeAttributes","htmlElement","fontWeight","fontStyle","textDecoration","withMutations","indexOf","add","remove","isListNode","nodeName","ContentBlocksBuilder","disambiguate","clear","_proto","prototype","characterList","blockConfigs","currentBlockType","currentDepth","currentEntity","currentText","entityMap","wrapper","contentBlocks","addDOMNode","_this$blockConfigs","_toBlockConfigs","_trimCurrentText","_makeBlockConfig","getContentBlocks","_toContentBlocks","_toFlatContentBlocks","config","block","type","text","parent","children","prevSibling","nextSibling","childConfigs","nodes","toLowerCase","wasCurrentDepth","wasWrapper","Array","from","childNodes","get","_wasCurrentDepth","_wasWrapper","_addTextNode","_addBreakNode","_addImgNode","_addAnchorNode","newStyle","has","inlineStyle","_appendText","_this$characterList","characterMetadata","create","entity","fill","l","begin","trimLeft","end","trimRight","findEntry","getEntity","Math","min","reverse","max","slice","textContent","trimmedText","trim","replace","image","entityConfig","attr","imageAttribute","getAttribute","__create","anchor","anchorAttribute","url","toString","map","child","_hoistContainersInBlockConfigs","_this","hoisted","flatMap","blockConfig","_this2","cleanConfigs","_this2$_extractTextFr","_extractTextFromBlockConfigs","last","convertFromHTMLToContentBlocks","html","DOMBuilder","safeBody","tag","module","exports"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar _knownListItemDepthCl;\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nvar CharacterMetadata = require(\"./CharacterMetadata\");\r\n\r\nvar ContentBlock = require(\"./ContentBlock\");\r\n\r\nvar ContentBlockNode = require(\"./ContentBlockNode\");\r\n\r\nvar DefaultDraftBlockRenderMap = require(\"./DefaultDraftBlockRenderMap\");\r\n\r\nvar DraftEntity = require(\"./DraftEntity\");\r\n\r\nvar URI = require(\"fbjs/lib/URI\");\r\n\r\nvar cx = require(\"fbjs/lib/cx\");\r\n\r\nvar generateRandomKey = require(\"./generateRandomKey\");\r\n\r\nvar getSafeBodyFromHTML = require(\"./getSafeBodyFromHTML\");\r\n\r\nvar gkx = require(\"./gkx\");\r\n\r\nvar _require = require(\"immutable\"),\r\n    List = _require.List,\r\n    Map = _require.Map,\r\n    OrderedSet = _require.OrderedSet;\r\n\r\nvar isHTMLAnchorElement = require(\"./isHTMLAnchorElement\");\r\n\r\nvar isHTMLBRElement = require(\"./isHTMLBRElement\");\r\n\r\nvar isHTMLElement = require(\"./isHTMLElement\");\r\n\r\nvar isHTMLImageElement = require(\"./isHTMLImageElement\");\r\n\r\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\r\nvar NBSP = '&nbsp;';\r\nvar SPACE = ' '; // used for replacing characters in HTML\r\n\r\nvar REGEX_CR = new RegExp('\\r', 'g');\r\nvar REGEX_LF = new RegExp('\\n', 'g');\r\nvar REGEX_LEADING_LF = new RegExp('^\\n', 'g');\r\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\r\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\r\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g'); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\r\n\r\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\r\nvar notBoldValues = ['light', 'lighter', 'normal', '100', '200', '300', '400'];\r\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\r\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\r\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth0'), 0), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth1'), 1), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth2'), 2), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth3'), 3), _defineProperty(_knownListItemDepthCl, cx('public/DraftStyleDefault/depth4'), 4), _knownListItemDepthCl);\r\nvar HTMLTagToRawInlineStyleMap = Map({\r\n  b: 'BOLD',\r\n  code: 'CODE',\r\n  del: 'STRIKETHROUGH',\r\n  em: 'ITALIC',\r\n  i: 'ITALIC',\r\n  s: 'STRIKETHROUGH',\r\n  strike: 'STRIKETHROUGH',\r\n  strong: 'BOLD',\r\n  u: 'UNDERLINE',\r\n  mark: 'HIGHLIGHT'\r\n});\r\n\r\n/**\r\n * Build a mapping from HTML tags to draftjs block types\r\n * out of a BlockRenderMap.\r\n *\r\n * The BlockTypeMap for the default BlockRenderMap looks like this:\r\n *   Map({\r\n *     h1: 'header-one',\r\n *     h2: 'header-two',\r\n *     h3: 'header-three',\r\n *     h4: 'header-four',\r\n *     h5: 'header-five',\r\n *     h6: 'header-six',\r\n *     blockquote: 'blockquote',\r\n *     figure: 'atomic',\r\n *     pre: ['code-block'],\r\n *     div: 'unstyled',\r\n *     p: 'unstyled',\r\n *     li: ['ordered-list-item', 'unordered-list-item'],\r\n *   })\r\n */\r\nvar buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {\r\n  var blockTypeMap = {};\r\n  blockRenderMap.mapKeys(function (blockType, desc) {\r\n    var elements = [desc.element];\r\n\r\n    if (desc.aliasedElements !== undefined) {\r\n      elements.push.apply(elements, desc.aliasedElements);\r\n    }\r\n\r\n    elements.forEach(function (element) {\r\n      if (blockTypeMap[element] === undefined) {\r\n        blockTypeMap[element] = blockType;\r\n      } else if (typeof blockTypeMap[element] === 'string') {\r\n        blockTypeMap[element] = [blockTypeMap[element], blockType];\r\n      } else {\r\n        blockTypeMap[element].push(blockType);\r\n      }\r\n    });\r\n  });\r\n  return Map(blockTypeMap);\r\n};\r\n\r\nvar detectInlineStyle = function detectInlineStyle(node) {\r\n  if (isHTMLElement(node)) {\r\n    var element = node; // Currently only used to detect preformatted inline code\r\n\r\n    if (element.style.fontFamily.includes('monospace')) {\r\n      return 'CODE';\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n/**\r\n * If we're pasting from one DraftEditor to another we can check to see if\r\n * existing list item depth classes are being used and preserve this style\r\n */\r\n\r\n\r\nvar getListItemDepth = function getListItemDepth(node) {\r\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n  Object.keys(knownListItemDepthClasses).some(function (depthClass) {\r\n    if (node.classList.contains(depthClass)) {\r\n      depth = knownListItemDepthClasses[depthClass];\r\n    }\r\n  });\r\n  return depth;\r\n};\r\n/**\r\n * Return true if the provided HTML Element can be used to build a\r\n * Draftjs-compatible link.\r\n */\r\n\r\n\r\nvar isValidAnchor = function isValidAnchor(node) {\r\n  if (!isHTMLAnchorElement(node)) {\r\n    return false;\r\n  }\r\n\r\n  var anchorNode = node;\r\n\r\n  if (!anchorNode.href || anchorNode.protocol !== 'http:' && anchorNode.protocol !== 'https:' && anchorNode.protocol !== 'mailto:' && anchorNode.protocol !== 'tel:') {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Just checking whether we can actually create a URI\r\n    var _ = new URI(anchorNode.href);\r\n\r\n    return true; // We need our catch statements to have arguments, else\r\n    // UglifyJS (which we use for our OSS builds) will crash.\r\n    // eslint-disable-next-line fb-www/no-unused-catch-bindings\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n};\r\n/**\r\n * Return true if the provided HTML Element can be used to build a\r\n * Draftjs-compatible image.\r\n */\r\n\r\n\r\nvar isValidImage = function isValidImage(node) {\r\n  if (!isHTMLImageElement(node)) {\r\n    return false;\r\n  }\r\n\r\n  var imageNode = node;\r\n  return !!(imageNode.attributes.getNamedItem('src') && imageNode.attributes.getNamedItem('src').value);\r\n};\r\n/**\r\n * Try to guess the inline style of an HTML element based on its css\r\n * styles (font-weight, font-style and text-decoration).\r\n */\r\n\r\n\r\nvar styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {\r\n  if (!isHTMLElement(node)) {\r\n    return style;\r\n  }\r\n\r\n  var htmlElement = node;\r\n  var fontWeight = htmlElement.style.fontWeight;\r\n  var fontStyle = htmlElement.style.fontStyle;\r\n  var textDecoration = htmlElement.style.textDecoration;\r\n  return style.withMutations(function (style) {\r\n    if (boldValues.indexOf(fontWeight) >= 0) {\r\n      style.add('BOLD');\r\n    } else if (notBoldValues.indexOf(fontWeight) >= 0) {\r\n      style.remove('BOLD');\r\n    }\r\n\r\n    if (fontStyle === 'italic') {\r\n      style.add('ITALIC');\r\n    } else if (fontStyle === 'normal') {\r\n      style.remove('ITALIC');\r\n    }\r\n\r\n    if (textDecoration === 'underline') {\r\n      style.add('UNDERLINE');\r\n    }\r\n\r\n    if (textDecoration === 'line-through') {\r\n      style.add('STRIKETHROUGH');\r\n    }\r\n\r\n    if (textDecoration === 'none') {\r\n      style.remove('UNDERLINE');\r\n      style.remove('STRIKETHROUGH');\r\n    }\r\n  });\r\n};\r\n/**\r\n * Determine if a nodeName is a list type, 'ul' or 'ol'\r\n */\r\n\r\n\r\nvar isListNode = function isListNode(nodeName) {\r\n  return nodeName === 'ul' || nodeName === 'ol';\r\n};\r\n/**\r\n *  ContentBlockConfig is a mutable data structure that holds all\r\n *  the information required to build a ContentBlock and an array of\r\n *  all the child nodes (childConfigs).\r\n *  It is being used a temporary data structure by the\r\n *  ContentBlocksBuilder class.\r\n */\r\n\r\n\r\n/**\r\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\r\n * out of one (or several) HTMLElement(s).\r\n *\r\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\r\n * by walking through the HTML nodes and their children, then it walks the\r\n * ContentBlockConfigs tree to compute parents/siblings and create\r\n * the actual ContentBlocks.\r\n *\r\n * Typical usage is:\r\n *     new ContentBlocksBuilder()\r\n *        .addDOMNode(someHTMLNode)\r\n *        .addDOMNode(someOtherHTMLNode)\r\n *       .getContentBlocks();\r\n *\r\n */\r\nvar ContentBlocksBuilder = /*#__PURE__*/function () {\r\n  // Most of the method in the class depend on the state of the content builder\r\n  // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\r\n  // be confusing at first, it made the code simpler than the alternative which\r\n  // is to pass those values around in every call.\r\n  // The following attributes are used to accumulate text and styles\r\n  // as we are walking the HTML node tree.\r\n  // Describes the future ContentState as a tree of content blocks\r\n  // The content blocks generated from the blockConfigs\r\n  // Entity map use to store links and images found in the HTML nodes\r\n  // Map HTML tags to draftjs block types and disambiguation function\r\n  function ContentBlocksBuilder(blockTypeMap, disambiguate) {\r\n    _defineProperty(this, \"characterList\", List());\r\n\r\n    _defineProperty(this, \"currentBlockType\", 'unstyled');\r\n\r\n    _defineProperty(this, \"currentDepth\", 0);\r\n\r\n    _defineProperty(this, \"currentEntity\", null);\r\n\r\n    _defineProperty(this, \"currentText\", '');\r\n\r\n    _defineProperty(this, \"wrapper\", null);\r\n\r\n    _defineProperty(this, \"blockConfigs\", []);\r\n\r\n    _defineProperty(this, \"contentBlocks\", []);\r\n\r\n    _defineProperty(this, \"entityMap\", DraftEntity);\r\n\r\n    _defineProperty(this, \"blockTypeMap\", void 0);\r\n\r\n    _defineProperty(this, \"disambiguate\", void 0);\r\n\r\n    this.clear();\r\n    this.blockTypeMap = blockTypeMap;\r\n    this.disambiguate = disambiguate;\r\n  }\r\n  /**\r\n   * Clear the internal state of the ContentBlocksBuilder\r\n   */\r\n\r\n\r\n  var _proto = ContentBlocksBuilder.prototype;\r\n\r\n  _proto.clear = function clear() {\r\n    this.characterList = List();\r\n    this.blockConfigs = [];\r\n    this.currentBlockType = 'unstyled';\r\n    this.currentDepth = 0;\r\n    this.currentEntity = null;\r\n    this.currentText = '';\r\n    this.entityMap = DraftEntity;\r\n    this.wrapper = null;\r\n    this.contentBlocks = [];\r\n  }\r\n  /**\r\n   * Add an HTMLElement to the ContentBlocksBuilder\r\n   */\r\n  ;\r\n\r\n  _proto.addDOMNode = function addDOMNode(node) {\r\n    var _this$blockConfigs;\r\n\r\n    this.contentBlocks = [];\r\n    this.currentDepth = 0; // Converts the HTML node to block config\r\n\r\n    (_this$blockConfigs = this.blockConfigs).push.apply(_this$blockConfigs, this._toBlockConfigs([node], OrderedSet())); // There might be some left over text in the builder's\r\n    // internal state, if so make a ContentBlock out of it.\r\n\r\n\r\n    this._trimCurrentText();\r\n\r\n    if (this.currentText !== '') {\r\n      this.blockConfigs.push(this._makeBlockConfig());\r\n    } // for chaining\r\n\r\n\r\n    return this;\r\n  }\r\n  /**\r\n   * Return the ContentBlocks and the EntityMap that corresponds\r\n   * to the previously added HTML nodes.\r\n   */\r\n  ;\r\n\r\n  _proto.getContentBlocks = function getContentBlocks() {\r\n    if (this.contentBlocks.length === 0) {\r\n      if (experimentalTreeDataSupport) {\r\n        this._toContentBlocks(this.blockConfigs);\r\n      } else {\r\n        this._toFlatContentBlocks(this.blockConfigs);\r\n      }\r\n    }\r\n\r\n    return {\r\n      contentBlocks: this.contentBlocks,\r\n      entityMap: this.entityMap\r\n    };\r\n  } // ***********************************WARNING******************************\r\n  // The methods below this line are private - don't call them directly.\r\n\r\n  /**\r\n   * Generate a new ContentBlockConfig out of the current internal state\r\n   * of the builder, then clears the internal state.\r\n   */\r\n  ;\r\n\r\n  _proto._makeBlockConfig = function _makeBlockConfig() {\r\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    var key = config.key || generateRandomKey();\r\n\r\n    var block = _objectSpread({\r\n      key: key,\r\n      type: this.currentBlockType,\r\n      text: this.currentText,\r\n      characterList: this.characterList,\r\n      depth: this.currentDepth,\r\n      parent: null,\r\n      children: List(),\r\n      prevSibling: null,\r\n      nextSibling: null,\r\n      childConfigs: []\r\n    }, config);\r\n\r\n    this.characterList = List();\r\n    this.currentBlockType = 'unstyled';\r\n    this.currentText = '';\r\n    return block;\r\n  }\r\n  /**\r\n   * Converts an array of HTML elements to a multi-root tree of content\r\n   * block configs. Some text content may be left in the builders internal\r\n   * state to enable chaining sucessive calls.\r\n   */\r\n  ;\r\n\r\n  _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {\r\n    var blockConfigs = [];\r\n\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      var node = nodes[i];\r\n      var nodeName = node.nodeName.toLowerCase();\r\n\r\n      if (nodeName === 'body' || isListNode(nodeName)) {\r\n        // body, ol and ul are 'block' type nodes so create a block config\r\n        // with the text accumulated so far (if any)\r\n        this._trimCurrentText();\r\n\r\n        if (this.currentText !== '') {\r\n          blockConfigs.push(this._makeBlockConfig());\r\n        } // body, ol and ul nodes are ignored, but their children are inlined in\r\n        // the parent block config.\r\n\r\n\r\n        var wasCurrentDepth = this.currentDepth;\r\n        var wasWrapper = this.wrapper;\r\n\r\n        if (isListNode(nodeName)) {\r\n          this.wrapper = nodeName;\r\n\r\n          if (isListNode(wasWrapper)) {\r\n            this.currentDepth++;\r\n          }\r\n        }\r\n\r\n        blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\r\n        this.currentDepth = wasCurrentDepth;\r\n        this.wrapper = wasWrapper;\r\n        continue;\r\n      }\r\n\r\n      var blockType = this.blockTypeMap.get(nodeName);\r\n\r\n      if (blockType !== undefined) {\r\n        // 'block' type node means we need to create a block config\r\n        // with the text accumulated so far (if any)\r\n        this._trimCurrentText();\r\n\r\n        if (this.currentText !== '') {\r\n          blockConfigs.push(this._makeBlockConfig());\r\n        }\r\n\r\n        var _wasCurrentDepth = this.currentDepth;\r\n        var _wasWrapper = this.wrapper;\r\n        this.wrapper = nodeName === 'pre' ? 'pre' : this.wrapper;\r\n\r\n        if (typeof blockType !== 'string') {\r\n          blockType = this.disambiguate(nodeName, this.wrapper) || blockType[0] || 'unstyled';\r\n        }\r\n\r\n        if (!experimentalTreeDataSupport && isHTMLElement(node) && (blockType === 'unordered-list-item' || blockType === 'ordered-list-item')) {\r\n          var htmlElement = node;\r\n          this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\r\n        }\r\n\r\n        var key = generateRandomKey();\r\n\r\n        var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);\r\n\r\n        this._trimCurrentText();\r\n\r\n        blockConfigs.push(this._makeBlockConfig({\r\n          key: key,\r\n          childConfigs: childConfigs,\r\n          type: blockType\r\n        }));\r\n        this.currentDepth = _wasCurrentDepth;\r\n        this.wrapper = _wasWrapper;\r\n        continue;\r\n      }\r\n\r\n      if (nodeName === '#text') {\r\n        this._addTextNode(node, style);\r\n\r\n        continue;\r\n      }\r\n\r\n      if (nodeName === 'br') {\r\n        this._addBreakNode(node, style);\r\n\r\n        continue;\r\n      }\r\n\r\n      if (isValidImage(node)) {\r\n        this._addImgNode(node, style);\r\n\r\n        continue;\r\n      }\r\n\r\n      if (isValidAnchor(node)) {\r\n        this._addAnchorNode(node, blockConfigs, style);\r\n\r\n        continue;\r\n      }\r\n\r\n      var newStyle = style;\r\n\r\n      if (HTMLTagToRawInlineStyleMap.has(nodeName)) {\r\n        newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));\r\n      }\r\n\r\n      newStyle = styleFromNodeAttributes(node, newStyle);\r\n      var inlineStyle = detectInlineStyle(node);\r\n\r\n      if (inlineStyle != null) {\r\n        newStyle = newStyle.add(inlineStyle);\r\n      }\r\n\r\n      blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), newStyle));\r\n    }\r\n\r\n    return blockConfigs;\r\n  }\r\n  /**\r\n   * Append a string of text to the internal buffer.\r\n   */\r\n  ;\r\n\r\n  _proto._appendText = function _appendText(text, style) {\r\n    var _this$characterList;\r\n\r\n    this.currentText += text;\r\n    var characterMetadata = CharacterMetadata.create({\r\n      style: style,\r\n      entity: this.currentEntity\r\n    });\r\n    this.characterList = (_this$characterList = this.characterList).push.apply(_this$characterList, Array(text.length).fill(characterMetadata));\r\n  }\r\n  /**\r\n   * Trim the text in the internal buffer.\r\n   */\r\n  ;\r\n\r\n  _proto._trimCurrentText = function _trimCurrentText() {\r\n    var l = this.currentText.length;\r\n    var begin = l - this.currentText.trimLeft().length;\r\n    var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.\r\n\r\n    var entity = this.characterList.findEntry(function (characterMetadata) {\r\n      return characterMetadata.getEntity() !== null;\r\n    });\r\n    begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\r\n    entity = this.characterList.reverse().findEntry(function (characterMetadata) {\r\n      return characterMetadata.getEntity() !== null;\r\n    });\r\n    end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\r\n\r\n    if (begin > end) {\r\n      this.currentText = '';\r\n      this.characterList = List();\r\n    } else {\r\n      this.currentText = this.currentText.slice(begin, end);\r\n      this.characterList = this.characterList.slice(begin, end);\r\n    }\r\n  }\r\n  /**\r\n   * Add the content of an HTML text node to the internal state\r\n   */\r\n  ;\r\n\r\n  _proto._addTextNode = function _addTextNode(node, style) {\r\n    var text = node.textContent;\r\n    var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,\r\n    // normalize to a single space.\r\n\r\n    if (trimmedText === '' && this.wrapper !== 'pre') {\r\n      text = ' ';\r\n    }\r\n\r\n    if (this.wrapper !== 'pre') {\r\n      // Trim leading line feed, which is invisible in HTML\r\n      text = text.replace(REGEX_LEADING_LF, ''); // Can't use empty string because MSWord\r\n\r\n      text = text.replace(REGEX_LF, SPACE);\r\n    }\r\n\r\n    this._appendText(text, style);\r\n  };\r\n\r\n  _proto._addBreakNode = function _addBreakNode(node, style) {\r\n    if (!isHTMLBRElement(node)) {\r\n      return;\r\n    }\r\n\r\n    this._appendText('\\n', style);\r\n  }\r\n  /**\r\n   * Add the content of an HTML img node to the internal state\r\n   */\r\n  ;\r\n\r\n  _proto._addImgNode = function _addImgNode(node, style) {\r\n    if (!isHTMLImageElement(node)) {\r\n      return;\r\n    }\r\n\r\n    var image = node;\r\n    var entityConfig = {};\r\n    imgAttr.forEach(function (attr) {\r\n      var imageAttribute = image.getAttribute(attr);\r\n\r\n      if (imageAttribute) {\r\n        entityConfig[attr] = imageAttribute;\r\n      }\r\n    }); // TODO: T15530363 update this when we remove DraftEntity entirely\r\n\r\n    this.currentEntity = this.entityMap.__create('IMAGE', 'IMMUTABLE', entityConfig); // The child text node cannot just have a space or return as content (since\r\n    // we strip those out), unless the image is for presentation only.\r\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\r\n\r\n    if (gkx('draftjs_fix_paste_for_img')) {\r\n      if (image.getAttribute('role') !== 'presentation') {\r\n        this._appendText(\"\\uD83D\\uDCF7\", style);\r\n      }\r\n    } else {\r\n      this._appendText(\"\\uD83D\\uDCF7\", style);\r\n    }\r\n\r\n    this.currentEntity = null;\r\n  }\r\n  /**\r\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\r\n   * (if any) are converted to Block Configs and appended to the provided\r\n   * blockConfig array.\r\n   */\r\n  ;\r\n\r\n  _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {\r\n    // The check has already been made by isValidAnchor but\r\n    // we have to do it again to keep flow happy.\r\n    if (!isHTMLAnchorElement(node)) {\r\n      return;\r\n    }\r\n\r\n    var anchor = node;\r\n    var entityConfig = {};\r\n    anchorAttr.forEach(function (attr) {\r\n      var anchorAttribute = anchor.getAttribute(attr);\r\n\r\n      if (anchorAttribute) {\r\n        entityConfig[attr] = anchorAttribute;\r\n      }\r\n    });\r\n    entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely\r\n\r\n    this.currentEntity = this.entityMap.__create('LINK', 'MUTABLE', entityConfig || {});\r\n    blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\r\n    this.currentEntity = null;\r\n  }\r\n  /**\r\n   * Walk the BlockConfig tree, compute parent/children/siblings,\r\n   * and generate the corresponding ContentBlockNode\r\n   */\r\n  ;\r\n\r\n  _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {\r\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\r\n    var l = blockConfigs.length - 1;\r\n\r\n    for (var i = 0; i <= l; i++) {\r\n      var config = blockConfigs[i];\r\n      config.parent = parent;\r\n      config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\r\n      config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\r\n      config.children = List(config.childConfigs.map(function (child) {\r\n        return child.key;\r\n      }));\r\n      this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));\r\n\r\n      this._toContentBlocks(config.childConfigs, config.key);\r\n    }\r\n  }\r\n  /**\r\n   * Remove 'useless' container nodes from the block config hierarchy, by\r\n   * replacing them with their children.\r\n   */\r\n  ;\r\n\r\n  _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(blockConfigs) {\r\n    var _this = this;\r\n\r\n    var hoisted = List(blockConfigs).flatMap(function (blockConfig) {\r\n      // Don't mess with useful blocks\r\n      if (blockConfig.type !== 'unstyled' || blockConfig.text !== '') {\r\n        return [blockConfig];\r\n      }\r\n\r\n      return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\r\n    });\r\n    return hoisted;\r\n  } // ***********************************************************************\r\n  // The two methods below are used for backward compatibility when\r\n  // experimentalTreeDataSupport is disabled.\r\n\r\n  /**\r\n   * Same as _toContentBlocks but replaces nested blocks by their\r\n   * text content.\r\n   */\r\n  ;\r\n\r\n  _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {\r\n    var _this2 = this;\r\n\r\n    var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\r\n\r\n    cleanConfigs.forEach(function (config) {\r\n      var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs),\r\n          text = _this2$_extractTextFr.text,\r\n          characterList = _this2$_extractTextFr.characterList;\r\n\r\n      _this2.contentBlocks.push(new ContentBlock(_objectSpread({}, config, {\r\n        text: config.text + text,\r\n        characterList: config.characterList.concat(characterList)\r\n      })));\r\n    });\r\n  }\r\n  /**\r\n   * Extract the text and the associated inline styles form an\r\n   * array of content block configs.\r\n   */\r\n  ;\r\n\r\n  _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(blockConfigs) {\r\n    var l = blockConfigs.length - 1;\r\n    var text = '';\r\n    var characterList = List();\r\n\r\n    for (var i = 0; i <= l; i++) {\r\n      var config = blockConfigs[i];\r\n      text += config.text;\r\n      characterList = characterList.concat(config.characterList);\r\n\r\n      if (text !== '' && config.type !== 'unstyled') {\r\n        text += '\\n';\r\n        characterList = characterList.push(characterList.last());\r\n      }\r\n\r\n      var children = this._extractTextFromBlockConfigs(config.childConfigs);\r\n\r\n      text += children.text;\r\n      characterList = characterList.concat(children.characterList);\r\n    }\r\n\r\n    return {\r\n      text: text,\r\n      characterList: characterList\r\n    };\r\n  };\r\n\r\n  return ContentBlocksBuilder;\r\n}();\r\n/**\r\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\r\n * suitable to initialize the internal state of a Draftjs component.\r\n */\r\n\r\n\r\nvar convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {\r\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\r\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\r\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\r\n  // arbitrary code in whatever environment you're running this in. For an\r\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\r\n  // Remove funky characters from the HTML string\r\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, ''); // Build a DOM tree out of the HTML string\r\n\r\n  var safeBody = DOMBuilder(html);\r\n\r\n  if (!safeBody) {\r\n    return null;\r\n  } // Build a BlockTypeMap out of the BlockRenderMap\r\n\r\n\r\n  var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap\r\n  // uses multiple block types for the same html tag.\r\n\r\n  var disambiguate = function disambiguate(tag, wrapper) {\r\n    if (tag === 'li') {\r\n      return wrapper === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return new ContentBlocksBuilder(blockTypeMap, disambiguate).addDOMNode(safeBody).getContentBlocks();\r\n};\r\n\r\nmodule.exports = convertFromHTMLToContentBlocks;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}