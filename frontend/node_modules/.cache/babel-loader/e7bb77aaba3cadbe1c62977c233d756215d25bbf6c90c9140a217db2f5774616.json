{"ast":null,"code":"import ob from \"object-path\";\nlet template = {};\nlet fields = [];\nconst buildSection = (item, pathArray) => {\n  item.items.map((subItem, subItemIndex) => {\n    let array = [];\n    array.push(\"items\", subItemIndex);\n    return buildItem(subItem, pathArray.concat(array));\n  });\n};\nconst buildItem = (item, pathArray) => {\n  if (item.data_type === \"Title\") {\n    return buildSection(item, pathArray);\n  } else {\n    if (Array.isArray(item)) {\n      item.forEach((itemAny, itemAnyIndex) => {\n        const pathSection = [...pathArray];\n        pathSection.pop();\n        pathSection.pop();\n        const section = ob.get(template, pathSection);\n        const sectionName = section.node ? section.node.text : \"\";\n        let array = [];\n        array.push(itemAnyIndex);\n        const newPath = pathArray.concat(array);\n        const path = newPath.join(\".\");\n        fields.push({\n          path: path,\n          name: itemAny.node ? `${sectionName} - ${itemAny.node.text}` : \"\",\n          datatype: itemAny.dataType,\n          upperOccurrences: itemAny.occurrences.upperOccurrences\n        });\n      });\n    } else {\n      const pathSection = [...pathArray];\n      pathSection.pop();\n      pathSection.pop();\n      const section = ob.get(template, pathSection);\n      const sectionName = section.node ? section.node.text : \"\";\n      const path = pathArray.join(\".\");\n      fields.push({\n        path: path,\n        name: item.node ? `${sectionName} - ${item.node.text}` : \"\",\n        datatype: item.dataType,\n        upperOccurrences: item.occurrences.upperOccurrences\n      });\n    }\n  }\n};\nconst getFormFields = async temp => {\n  template = await {\n    ...temp\n  };\n  fields = [];\n  template.items.map((attribute, index) => {\n    return attribute.map((att, attIndex) => {\n      let array = [];\n      array.push(\"items\", index, attIndex);\n      return buildItem(att, array);\n    });\n  });\n  return fields;\n};\nexport { getFormFields };","map":{"version":3,"names":["ob","template","fields","buildSection","item","pathArray","items","map","subItem","subItemIndex","array","push","buildItem","concat","data_type","Array","isArray","forEach","itemAny","itemAnyIndex","pathSection","pop","section","get","sectionName","node","text","newPath","path","join","name","datatype","dataType","upperOccurrences","occurrences","getFormFields","temp","attribute","index","att","attIndex"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/assets/functions/GetFormFields/getFormFields.js"],"sourcesContent":["import ob from \"object-path\";\r\nlet template = {};\r\nlet fields = [];\r\n\r\nconst buildSection = (item, pathArray) => {\r\n  item.items.map((subItem, subItemIndex) => {\r\n    let array = [];\r\n    array.push(\"items\", subItemIndex);\r\n    return buildItem(subItem, pathArray.concat(array));\r\n  });\r\n};\r\n\r\nconst buildItem = (item, pathArray) => {\r\n  if (item.data_type === \"Title\") {\r\n    return buildSection(item, pathArray);\r\n  } else {\r\n    if (Array.isArray(item)) {\r\n      item.forEach((itemAny, itemAnyIndex) => {\r\n        const pathSection = [...pathArray];\r\n        pathSection.pop();\r\n        pathSection.pop();\r\n        const section = ob.get(template, pathSection);\r\n        const sectionName = section.node ? section.node.text : \"\";\r\n        let array = [];\r\n        array.push(itemAnyIndex);\r\n        const newPath = pathArray.concat(array);\r\n        const path = newPath.join(\".\");\r\n        fields.push({\r\n          path: path,\r\n          name: itemAny.node ? `${sectionName} - ${itemAny.node.text}` : \"\",\r\n          datatype: itemAny.dataType,\r\n          upperOccurrences: itemAny.occurrences.upperOccurrences\r\n        });\r\n      });\r\n    } else {\r\n      const pathSection = [...pathArray];\r\n      pathSection.pop();\r\n      pathSection.pop();\r\n      const section = ob.get(template, pathSection);\r\n      const sectionName = section.node ? section.node.text : \"\";\r\n      const path = pathArray.join(\".\");\r\n      fields.push({\r\n        path: path,\r\n        name: item.node ? `${sectionName} - ${item.node.text}` : \"\",\r\n        datatype: item.dataType,\r\n        upperOccurrences: item.occurrences.upperOccurrences\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst getFormFields = async temp => {\r\n  template = await { ...temp\r\n  };\r\n  fields = [];\r\n  template.items.map((attribute, index) => {\r\n    return attribute.map((att, attIndex) => {\r\n      let array = [];\r\n      array.push(\"items\", index, attIndex);\r\n      return buildItem(att, array);\r\n    });\r\n  });\r\n  return fields;\r\n};\r\n\r\nexport { getFormFields };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}