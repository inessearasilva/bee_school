{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @typechecks static-only\r\n */\n'use strict';\n\n/**\r\n * Memoizes the return value of a function that accepts one string argument.\r\n */\nfunction memoizeStringOnly(callback) {\n  var cache = {};\n  return function (string) {\n    if (!cache.hasOwnProperty(string)) {\n      cache[string] = callback.call(this, string);\n    }\n    return cache[string];\n  };\n}\nmodule.exports = memoizeStringOnly;","map":{"version":3,"names":["memoizeStringOnly","callback","cache","string","hasOwnProperty","call","module","exports"],"sources":["C:/Users/ines_/fisiosys/fisiosys/frontend/node_modules/fbjs/lib/memoizeStringOnly.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @typechecks static-only\r\n */\r\n'use strict';\r\n/**\r\n * Memoizes the return value of a function that accepts one string argument.\r\n */\r\n\r\nfunction memoizeStringOnly(callback) {\r\n  var cache = {};\r\n  return function (string) {\r\n    if (!cache.hasOwnProperty(string)) {\r\n      cache[string] = callback.call(this, string);\r\n    }\r\n\r\n    return cache[string];\r\n  };\r\n}\r\n\r\nmodule.exports = memoizeStringOnly;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ;AACA;AACA;AAEA,SAASA,iBAAiB,CAACC,QAAQ,EAAE;EACnC,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,OAAO,UAAUC,MAAM,EAAE;IACvB,IAAI,CAACD,KAAK,CAACE,cAAc,CAACD,MAAM,CAAC,EAAE;MACjCD,KAAK,CAACC,MAAM,CAAC,GAAGF,QAAQ,CAACI,IAAI,CAAC,IAAI,EAAEF,MAAM,CAAC;IAC7C;IAEA,OAAOD,KAAK,CAACC,MAAM,CAAC;EACtB,CAAC;AACH;AAEAG,MAAM,CAACC,OAAO,GAAGP,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}