{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ines_/fisiosys/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nvar buildQuantityRangeValidation = function buildQuantityRangeValidation(item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) {\n  var checkMandatory = handleIfMandatoryValidation(item);\n  var pathLabelArray = pathLabel.split(\"-\");\n  var pathArray = _toConsumableArray(pathLabelArray);\n  pathArray.pop();\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\n      pathArray.push(\"start\");\n      var pathLabelStart = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var startValue = this.parent[pathLabelStart];\n        if (value < startValue) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\n      pathArray.push(\"end\");\n      var pathLabelEnd = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var endValue = this.parent[pathLabelEnd];\n        if (value > endValue) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\n      var arrayUnit = _toConsumableArray(pathArray);\n      arrayUnit.pop();\n      var pathLabelUnit = [].concat(_toConsumableArray(arrayUnit), [\"unit\"]).join(\"-\");\n      var _pathLabelStart = [].concat(_toConsumableArray(pathArray), [\"start\"]).join(\"-\");\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel, \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var start = this.parent[_pathLabelStart];\n        var unit = this.parent[pathLabelUnit];\n        if (start === undefined && value === undefined && unit === undefined || start !== undefined && value !== undefined && unit !== undefined) {\n          return true;\n        } else if (value !== undefined) {\n          return true;\n        } else if ((start !== undefined || unit !== undefined) && value === undefined) {\n          return false;\n        }\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var startValue = this.parent[_pathLabelStart];\n        if (value < startValue) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          var i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            var rule = item.ruleMandatory[i];\n            var mandatory = void 0;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              var j = void 0;\n              var conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                var condition = conditionsArray[j];\n                var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              var _j = void 0;\n              var _conditionsArray = rule[\"$and\"];\n              for (_j = 0; _j < _conditionsArray.length; _j++) {\n                var _condition = _conditionsArray[_j];\n                var _path = _condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                var _conditionValidation = handleConditionValidation(_condition, this.parent[_path]);\n                if (!_conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                  return obj.value !== \"\";\n                }).length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                  return obj.value.getCurrentContent().hasText();\n                }).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\n      var _arrayUnit = _toConsumableArray(pathArray);\n      _arrayUnit.pop();\n      var _pathLabelUnit = [].concat(_toConsumableArray(_arrayUnit), [\"unit\"]).join(\"-\");\n      var _pathLabelEnd = [].concat(_toConsumableArray(pathArray), [\"end\"]).join(\"-\");\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel, \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var end = this.parent[_pathLabelEnd];\n        var unit = this.parent[_pathLabelUnit];\n        if (end === undefined && value === undefined && unit === undefined || end !== undefined && value !== undefined && unit !== undefined) {\n          return true;\n        } else if (value !== undefined) {\n          return true;\n        } else if ((end !== undefined || unit !== undefined) && value === undefined) {\n          return false;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var endValue = this.parent[_pathLabelEnd];\n        if (value > endValue) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          var i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            var rule = item.ruleMandatory[i];\n            var mandatory = void 0;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              var j = void 0;\n              var conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                var condition = conditionsArray[j];\n                var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              var _j2 = void 0;\n              var _conditionsArray2 = rule[\"$and\"];\n              for (_j2 = 0; _j2 < _conditionsArray2.length; _j2++) {\n                var _condition2 = _conditionsArray2[_j2];\n                var _path2 = _condition2[\"$ItemPath\"].split(\".\").join(\"-\");\n                var _conditionValidation2 = handleConditionValidation(_condition2, this.parent[_path2]);\n                if (!_conditionValidation2) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                  return obj.value !== \"\";\n                }).length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                  return obj.value.getCurrentContent().hasText();\n                }).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\n      var _pathLabelStart2 = [].concat(_toConsumableArray(pathArray), [\"value\", \"start\"]).join(\"-\");\n      var _pathLabelEnd2 = [].concat(_toConsumableArray(pathArray), [\"value\", \"end\"]).join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var end = this.parent[_pathLabelEnd2];\n        var start = this.parent[_pathLabelStart2];\n        if (end === undefined && value === undefined && start === undefined || end !== undefined && value !== undefined && start !== undefined) {\n          return true;\n        } else if (value !== undefined) {\n          return true;\n        } else if ((end !== undefined || start !== undefined) && value === undefined) {\n          return false;\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          var i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            var rule = item.ruleMandatory[i];\n            var mandatory = void 0;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              var j = void 0;\n              var conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                var condition = conditionsArray[j];\n                var path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                var conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              var _j3 = void 0;\n              var _conditionsArray3 = rule[\"$and\"];\n              for (_j3 = 0; _j3 < _conditionsArray3.length; _j3++) {\n                var _condition3 = _conditionsArray3[_j3];\n                var _path3 = _condition3[\"$ItemPath\"].split(\".\").join(\"-\");\n                var _conditionValidation3 = handleConditionValidation(_condition3, this.parent[_path3]);\n                if (!_conditionValidation3) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(function (obj) {\n                  return obj.value !== \"\";\n                }).length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(function (obj) {\n                  return obj.value.getCurrentContent().hasText();\n                }).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        var isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        var res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          var sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  }\n};\nexport { buildQuantityRangeValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","handleRequiredValidation","handleRequiredSection","buildQuantityRangeValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","pathLabelArray","split","pathArray","pop","occurrences","lowerOccurrences","upperOccurrences","length","push","pathLabelStart","join","number","typeError","test","value","isVisible","parent","passedRequired","startValue","res","sectionsError","createError","message","toString","toLocaleLowerCase","pathLabelEnd","endValue","string","arrayUnit","pathLabelUnit","start","unit","undefined","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","path","conditionValidation","Array","isArray","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable","end"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildQuantityRangeValidation/BuildQuantityRangeValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\r\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\r\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\r\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\r\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\r\n\r\nconst buildQuantityRangeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\r\n  const checkMandatory = handleIfMandatoryValidation(item);\r\n  let pathLabelArray = pathLabel.split(\"-\");\r\n  let pathArray = [...pathLabelArray];\r\n  pathArray.pop();\r\n\r\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\r\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\r\n      pathArray.push(\"start\");\r\n      let pathLabelStart = pathArray.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let startValue = this.parent[pathLabelStart];\r\n\r\n        if (value < startValue) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\r\n      pathArray.push(\"end\");\r\n      let pathLabelEnd = pathArray.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endValue = this.parent[pathLabelEnd];\r\n\r\n        if (value > endValue) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\r\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\r\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\r\n      let arrayUnit = [...pathArray];\r\n      arrayUnit.pop();\r\n      let pathLabelUnit = [...arrayUnit, \"unit\"].join(\"-\");\r\n      let pathLabelStart = [...pathArray, \"start\"].join(\"-\");\r\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel, \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let start = this.parent[pathLabelStart];\r\n        let unit = this.parent[pathLabelUnit];\r\n\r\n        if (start === undefined && value === undefined && unit === undefined || start !== undefined && value !== undefined && unit !== undefined) {\r\n          return true;\r\n        } else if (value !== undefined) {\r\n          return true;\r\n        } else if ((start !== undefined || unit !== undefined) && value === undefined) {\r\n          return false;\r\n        }\r\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let startValue = this.parent[pathLabelStart];\r\n\r\n        if (value < startValue) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\r\n      let arrayUnit = [...pathArray];\r\n      arrayUnit.pop();\r\n      let pathLabelUnit = [...arrayUnit, \"unit\"].join(\"-\");\r\n      let pathLabelEnd = [...pathArray, \"end\"].join(\"-\");\r\n      validationSchema[pathLabel] = Yup.number().typeError(\"Campo inválido: deve ser um número ou utilize o ponto como separador das decimais\").test(pathLabel, \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let end = this.parent[pathLabelEnd];\r\n        let unit = this.parent[pathLabelUnit];\r\n\r\n        if (end === undefined && value === undefined && unit === undefined || end !== undefined && value !== undefined && unit !== undefined) {\r\n          return true;\r\n        } else if (value !== undefined) {\r\n          return true;\r\n        } else if ((end !== undefined || unit !== undefined) && value === undefined) {\r\n          return false;\r\n        }\r\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endValue = this.parent[pathLabelEnd];\r\n\r\n        if (value > endValue) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"unit\") {\r\n      let pathLabelStart = [...pathArray, \"value\", \"start\"].join(\"-\");\r\n      let pathLabelEnd = [...pathArray, \"value\", \"end\"].join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let end = this.parent[pathLabelEnd];\r\n        let start = this.parent[pathLabelStart];\r\n\r\n        if (end === undefined && value === undefined && start === undefined || end !== undefined && value !== undefined && start !== undefined) {\r\n          return true;\r\n        } else if (value !== undefined) {\r\n          return true;\r\n        } else if ((end !== undefined || start !== undefined) && value === undefined) {\r\n          return false;\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport { buildQuantityRangeValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}