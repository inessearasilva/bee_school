{"ast":null,"code":"import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildTimeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n      const isVisible = handleRules(item, this.parent, \"visibility\");\n      if (!isVisible) {\n        return true;\n      }\n      const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n      if (passedRequired) {\n        return true;\n      } else {\n        return false;\n      }\n    }).test(\"section-validation\", function (value) {\n      const isVisible = handleRules(item, this.parent, \"visibility\");\n      if (!isVisible) {\n        return true;\n      }\n      const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n      if (res === true) {\n        return true;\n      } else {\n        const sectionsError = res;\n        if (sectionsError.length > 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        } else if (sectionsError.length === 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        }\n      }\n    }).test(\"at-least-one\", function (value) {\n      const isVisible = handleRules(item, this.parent, \"visibility\");\n      if (!isVisible) {\n        return true;\n      }\n      const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n      if (res === true) {\n        return true;\n      } else {\n        const sectionsError = res;\n        if (sectionsError.length > 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        } else if (sectionsError.length === 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        }\n      }\n    });\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    validationSchema[pathLabel] = Yup.string().test(\"section-validation\", function (value) {\n      const isVisible = handleRules(item, this.parent, \"visibility\");\n      if (!isVisible) {\n        return true;\n      }\n      const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n      if (res === true) {\n        return true;\n      } else {\n        const sectionsError = res;\n        if (sectionsError.length > 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        } else if (sectionsError.length === 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        }\n      }\n    }).test(\"at-least-one\", function (value) {\n      const isVisible = handleRules(item, this.parent, \"visibility\");\n      if (!isVisible) {\n        return true;\n      }\n      const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n      if (res === true) {\n        return true;\n      } else {\n        const sectionsError = res;\n        if (sectionsError.length > 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        } else if (sectionsError.length === 1) {\n          return this.createError({\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n          });\n        }\n      }\n    }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n      const isVisible = handleRules(item, this.parent, \"visibility\");\n      if (!isVisible) {\n        return true;\n      }\n      if (!checkMandatory) {\n        return true;\n      } else {\n        let i;\n        for (i = 0; i < item.ruleMandatory.length; i++) {\n          const rule = item.ruleMandatory[i];\n          let mandatory;\n          if (rule[\"$or\"]) {\n            mandatory = false;\n            let j;\n            const conditionsArray = rule[\"$or\"];\n            for (j = 0; j < conditionsArray.length; j++) {\n              const condition = conditionsArray[j];\n              const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n              const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n              if (conditionValidation) {\n                mandatory = true;\n                break;\n              }\n            }\n          } else if (rule[\"$and\"]) {\n            mandatory = true;\n            let j;\n            const conditionsArray = rule[\"$and\"];\n            for (j = 0; j < conditionsArray.length; j++) {\n              const condition = conditionsArray[j];\n              const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n              const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n              if (!conditionValidation) {\n                mandatory = false;\n                break;\n              }\n            }\n          }\n          if (!mandatory) {\n            return true;\n          } else {\n            if (value === \"\" || value === undefined) {\n              return false;\n            } else if (Array.isArray(value)) {\n              if (value.length === 0) {\n                return false;\n              } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                return false;\n              } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                return false;\n              } else {\n                return true;\n              }\n            } else if (value._immutable !== undefined) {\n              if (!value.getCurrentContent().hasText()) {\n                return false;\n              } else {\n                return true;\n              }\n            } else {\n              return true;\n            }\n          }\n        }\n      }\n    });\n  }\n};\nexport { buildTimeValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","handleRequiredValidation","handleRequiredSection","buildTimeValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","occurrences","lowerOccurrences","upperOccurrences","string","test","value","isVisible","parent","passedRequired","res","sectionsError","length","createError","message","toString","toLocaleLowerCase","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","path","split","join","conditionValidation","undefined","Array","isArray","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable"],"sources":["C:/Users/ines_/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildTimeValidation/BuildTimeValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\r\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\r\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\r\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\r\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\r\n\r\nconst buildTimeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\r\n  const checkMandatory = handleIfMandatoryValidation(item);\r\n\r\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\r\n    validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n      const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n      if (!isVisible) {\r\n        return true;\r\n      }\r\n\r\n      const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n      if (passedRequired) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }).test(\"section-validation\", function (value) {\r\n      const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n      if (!isVisible) {\r\n        return true;\r\n      }\r\n\r\n      const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n      if (res === true) {\r\n        return true;\r\n      } else {\r\n        const sectionsError = res;\r\n\r\n        if (sectionsError.length > 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        } else if (sectionsError.length === 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        }\r\n      }\r\n    }).test(\"at-least-one\", function (value) {\r\n      const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n      if (!isVisible) {\r\n        return true;\r\n      }\r\n\r\n      const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n      if (res === true) {\r\n        return true;\r\n      } else {\r\n        const sectionsError = res;\r\n\r\n        if (sectionsError.length > 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        } else if (sectionsError.length === 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        }\r\n      }\r\n    });\r\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\r\n    validationSchema[pathLabel] = Yup.string().test(\"section-validation\", function (value) {\r\n      const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n      if (!isVisible) {\r\n        return true;\r\n      }\r\n\r\n      const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n      if (res === true) {\r\n        return true;\r\n      } else {\r\n        const sectionsError = res;\r\n\r\n        if (sectionsError.length > 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        } else if (sectionsError.length === 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        }\r\n      }\r\n    }).test(\"at-least-one\", function (value) {\r\n      const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n      if (!isVisible) {\r\n        return true;\r\n      }\r\n\r\n      const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n      if (res === true) {\r\n        return true;\r\n      } else {\r\n        const sectionsError = res;\r\n\r\n        if (sectionsError.length > 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        } else if (sectionsError.length === 1) {\r\n          return this.createError({\r\n            message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n          });\r\n        }\r\n      }\r\n    }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n      const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n      if (!isVisible) {\r\n        return true;\r\n      }\r\n\r\n      if (!checkMandatory) {\r\n        return true;\r\n      } else {\r\n        let i;\r\n\r\n        for (i = 0; i < item.ruleMandatory.length; i++) {\r\n          const rule = item.ruleMandatory[i];\r\n          let mandatory;\r\n\r\n          if (rule[\"$or\"]) {\r\n            mandatory = false;\r\n            let j;\r\n            const conditionsArray = rule[\"$or\"];\r\n\r\n            for (j = 0; j < conditionsArray.length; j++) {\r\n              const condition = conditionsArray[j];\r\n              const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n              const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n              if (conditionValidation) {\r\n                mandatory = true;\r\n                break;\r\n              }\r\n            }\r\n          } else if (rule[\"$and\"]) {\r\n            mandatory = true;\r\n            let j;\r\n            const conditionsArray = rule[\"$and\"];\r\n\r\n            for (j = 0; j < conditionsArray.length; j++) {\r\n              const condition = conditionsArray[j];\r\n              const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n              const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n              if (!conditionValidation) {\r\n                mandatory = false;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (!mandatory) {\r\n            return true;\r\n          } else {\r\n            if (value === \"\" || value === undefined) {\r\n              return false;\r\n            } else if (Array.isArray(value)) {\r\n              if (value.length === 0) {\r\n                return false;\r\n              } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                return false;\r\n              } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                return false;\r\n              } else {\r\n                return true;\r\n              }\r\n            } else if (value._immutable !== undefined) {\r\n              if (!value.getCurrentContent().hasText()) {\r\n                return false;\r\n              } else {\r\n                return true;\r\n              }\r\n            } else {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport { buildTimeValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}