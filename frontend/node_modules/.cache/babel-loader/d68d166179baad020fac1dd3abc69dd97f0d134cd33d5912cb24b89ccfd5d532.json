{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ines_/fisiosys/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/ines_/fisiosys/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ines_/fisiosys/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from \"axios\";\nimport { getEnvUrl } from \"../../../environment/index\";\nvar makeDLMRequest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(token, idJDT, ruleID, inputVariables) {\n    var res, response, itemPath, value, action, rules;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axios({\n              method: \"post\",\n              url: \"\".concat(getEnvUrl('aidadlmengine', '4023'), \"/dlmEngine\"),\n              // url: 'http://172.21.220.49:4023/dlmEngine',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: \"Bearer \" + token\n              },\n              data: {\n                id: idJDT,\n                idRule: ruleID,\n                inputVariables: inputVariables\n              }\n            });\n          case 3:\n            res = _context.sent;\n            response = res.data;\n            if (!(response && Object.keys(response).length === 0 && response.constructor === Object)) {\n              _context.next = 9;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 9:\n            rules = [];\n            response.events.forEach(function (e) {\n              var rule; // 2º Ir buscar o itemPath do campo que vai ser afetado\n\n              itemPath = e.item; // 3º Extrair o valor da acção\n\n              action = e.action; // 4º Verificar se é uma acção que está associada a um payload (valor) e nesse caso extrair o valor\n\n              var hasValue = Object.keys(e).length > 2 ? true : false;\n              value = hasValue && e.value;\n              rule = {\n                itemPath: itemPath,\n                action: action,\n                value: value\n              };\n              rules.push(rule);\n            });\n            return _context.abrupt(\"return\", rules);\n          case 12:\n            _context.next = 18;\n            break;\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\");\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n  return function makeDLMRequest(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar createInputVariables = function createInputVariables(itemPath, value, oldInputs) {\n  var inputs = {};\n  Object.assign(inputs, oldInputs); // value do tipo Objeto -> envia o objeto\n\n  if (value !== undefined) {\n    if (value instanceof Object) {\n      inputs[itemPath] = value;\n    } // value do tipo Array -> envia um array com cada value\n    else if (Array.isArray(value) && value.length > 0) {\n      var v = [];\n      value.forEach(function (val) {\n        v.push(val);\n      });\n      inputs[itemPath] = v;\n    } // restantes casos\n    else {\n      inputs[itemPath] = value;\n    }\n  }\n  return inputs;\n};\nvar pathLabeltoNormalPath = function pathLabeltoNormalPath(pathLabel) {\n  var pathLabelParts = pathLabel.split(\"-\");\n  var itemPathParts = pathLabelParts.filter(function (p) {\n    return p === \"items\" || !isNaN(p);\n  });\n  var newItemPath = itemPathParts.join(\".\");\n  return newItemPath;\n};\nvar checkDLMRules = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(token, updateIsDlmFinished, idJDT, dlmRules, templateRules, itemPath, pathLabel, values) {\n    var inputs, response, _iterator, _step, rule, _iterator2, _step2, r, conditions, res;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            inputs = {};\n            response = []; // 1º - verificar se existem regras DLM associadas a este item\n            if (!(Array.isArray(dlmRules) && dlmRules.length > 0)) {\n              _context2.next = 44;\n              break;\n            }\n            _iterator = _createForOfIteratorHelper(dlmRules);\n            _context2.prev = 4;\n            _iterator.s();\n          case 6:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 36;\n              break;\n            }\n            rule = _step.value;\n            _iterator2 = _createForOfIteratorHelper(templateRules);\n            _context2.prev = 9;\n            _iterator2.s();\n          case 11:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 26;\n              break;\n            }\n            r = _step2.value;\n            if (!(r[0].ruleID === rule)) {\n              _context2.next = 24;\n              break;\n            }\n            // 2º - se existirem regras, ir buscar as respetivas condições\n            conditions = r[0].inputVariables;\n            if (!(Array.isArray(conditions) && conditions.length > 0)) {\n              _context2.next = 24;\n              break;\n            }\n            // 3º - ir buscar o itemPath e o value actual de cada condição\n            inputs = {};\n            conditions.forEach(function (item) {\n              var val1 = item.replaceAll(\".\", \"-\") + \"-value\"; //itemPathLabel\n              // let val2 = item.replaceAll(\".\", \"-\") + \"-value-date\";\n              // let val3 = item.replaceAll(\".\", \"-\") + \"-value-time\";\n              // if (values[val1] !== \"\" && values[val2] !== \"\" && values[val3] !== \"\") {\n\n              if (values[val1] !== \"\") {\n                // 4º transformar o pathLabel num path normal e adicionar aos inputs\n                var path = pathLabeltoNormalPath(val1);\n                inputs = createInputVariables(path, values[val1], inputs);\n              }\n            }); // só se tiver os inputs todos preenchidos é que faz o pedido\n            if (!(Object.keys(inputs).length === conditions.length)) {\n              _context2.next = 24;\n              break;\n            }\n            updateIsDlmFinished(false);\n            _context2.next = 22;\n            return makeDLMRequest(token, idJDT, rule, inputs);\n          case 22:\n            res = _context2.sent;\n            res !== undefined && response.push(res);\n          case 24:\n            _context2.next = 11;\n            break;\n          case 26:\n            _context2.next = 31;\n            break;\n          case 28:\n            _context2.prev = 28;\n            _context2.t0 = _context2[\"catch\"](9);\n            _iterator2.e(_context2.t0);\n          case 31:\n            _context2.prev = 31;\n            _iterator2.f();\n            return _context2.finish(31);\n          case 34:\n            _context2.next = 6;\n            break;\n          case 36:\n            _context2.next = 41;\n            break;\n          case 38:\n            _context2.prev = 38;\n            _context2.t1 = _context2[\"catch\"](4);\n            _iterator.e(_context2.t1);\n          case 41:\n            _context2.prev = 41;\n            _iterator.f();\n            return _context2.finish(41);\n          case 44:\n            return _context2.abrupt(\"return\", response);\n          case 45:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 38, 41, 44], [9, 28, 31, 34]]);\n  }));\n  return function checkDLMRules(_x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport { checkDLMRules };","map":{"version":3,"names":["axios","getEnvUrl","makeDLMRequest","token","idJDT","ruleID","inputVariables","method","url","headers","Authorization","data","id","idRule","res","response","Object","keys","length","constructor","rules","events","forEach","e","rule","itemPath","item","action","hasValue","value","push","console","log","createInputVariables","oldInputs","inputs","assign","undefined","Array","isArray","v","val","pathLabeltoNormalPath","pathLabel","pathLabelParts","split","itemPathParts","filter","p","isNaN","newItemPath","join","checkDLMRules","updateIsDlmFinished","dlmRules","templateRules","values","r","conditions","val1","replaceAll","path"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/assets/functions/HandleDLM/checkDLMRules.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getEnvUrl } from \"../../../environment/index\";\r\n\r\nconst makeDLMRequest = async (token, idJDT, ruleID, inputVariables) => {\r\n  try {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: `${getEnvUrl('aidadlmengine', '4023')}/dlmEngine`,\r\n      // url: 'http://172.21.220.49:4023/dlmEngine',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: \"Bearer \" + token\r\n      },\r\n      data: {\r\n        id: idJDT,\r\n        idRule: ruleID,\r\n        inputVariables: inputVariables\r\n      }\r\n    });\r\n    const response = res.data;\r\n    let itemPath, value, action; // 1º Verificar se há regras a cumprir\r\n\r\n    if (response && Object.keys(response).length === 0 && response.constructor === Object) {\r\n      return;\r\n    } else {\r\n      let rules = [];\r\n      response.events.forEach(e => {\r\n        let rule; // 2º Ir buscar o itemPath do campo que vai ser afetado\r\n\r\n        itemPath = e.item; // 3º Extrair o valor da acção\r\n\r\n        action = e.action; // 4º Verificar se é uma acção que está associada a um payload (valor) e nesse caso extrair o valor\r\n\r\n        let hasValue = Object.keys(e).length > 2 ? true : false;\r\n        value = hasValue && e.value;\r\n        rule = {\r\n          itemPath,\r\n          action,\r\n          value\r\n        };\r\n        rules.push(rule);\r\n      });\r\n      return rules;\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    return;\r\n  }\r\n};\r\n\r\nconst createInputVariables = (itemPath, value, oldInputs) => {\r\n  let inputs = {};\r\n  Object.assign(inputs, oldInputs); // value do tipo Objeto -> envia o objeto\r\n\r\n  if (value !== undefined) {\r\n    if (value instanceof Object) {\r\n      inputs[itemPath] = value;\r\n    } // value do tipo Array -> envia um array com cada value\r\n    else if (Array.isArray(value) && value.length > 0) {\r\n        let v = [];\r\n        value.forEach(val => {\r\n          v.push(val);\r\n        });\r\n        inputs[itemPath] = v;\r\n      } // restantes casos\r\n      else {\r\n          inputs[itemPath] = value;\r\n        }\r\n  }\r\n\r\n  return inputs;\r\n};\r\n\r\nconst pathLabeltoNormalPath = pathLabel => {\r\n  let pathLabelParts = pathLabel.split(\"-\");\r\n  let itemPathParts = pathLabelParts.filter(p => p === \"items\" || !isNaN(p));\r\n  let newItemPath = itemPathParts.join(\".\");\r\n  return newItemPath;\r\n};\r\n\r\nconst checkDLMRules = async (token, updateIsDlmFinished, idJDT, dlmRules, templateRules, itemPath, pathLabel, values) => {\r\n  let inputs = {};\r\n  let response = []; // 1º - verificar se existem regras DLM associadas a este item\r\n\r\n  if (Array.isArray(dlmRules) && dlmRules.length > 0) {\r\n    for (const rule of dlmRules) {\r\n      for (const r of templateRules) {\r\n        if (r[0].ruleID === rule) {\r\n          // 2º - se existirem regras, ir buscar as respetivas condições\r\n          let conditions = r[0].inputVariables;\r\n\r\n          if (Array.isArray(conditions) && conditions.length > 0) {\r\n            // 3º - ir buscar o itemPath e o value actual de cada condição\r\n            inputs = {};\r\n            conditions.forEach(item => {\r\n              let val1 = item.replaceAll(\".\", \"-\") + \"-value\"; //itemPathLabel\r\n              // let val2 = item.replaceAll(\".\", \"-\") + \"-value-date\";\r\n              // let val3 = item.replaceAll(\".\", \"-\") + \"-value-time\";\r\n              // if (values[val1] !== \"\" && values[val2] !== \"\" && values[val3] !== \"\") {\r\n\r\n              if (values[val1] !== \"\") {\r\n                // 4º transformar o pathLabel num path normal e adicionar aos inputs\r\n                let path = pathLabeltoNormalPath(val1);\r\n                inputs = createInputVariables(path, values[val1], inputs);\r\n              }\r\n            }); // só se tiver os inputs todos preenchidos é que faz o pedido\r\n\r\n            if (Object.keys(inputs).length === conditions.length) {\r\n              updateIsDlmFinished(false);\r\n              let res = await makeDLMRequest(token, idJDT, rule, inputs);\r\n              res !== undefined && response.push(res);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nexport { checkDLMRules };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}