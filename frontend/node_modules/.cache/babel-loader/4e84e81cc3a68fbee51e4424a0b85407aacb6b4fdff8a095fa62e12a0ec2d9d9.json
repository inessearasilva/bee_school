{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\nvar ContentStateInlineStyle = require(\"./ContentStateInlineStyle\");\nvar applyEntityToContentState = require(\"./applyEntityToContentState\");\nvar getCharacterRemovalRange = require(\"./getCharacterRemovalRange\");\nvar getContentStateFragment = require(\"./getContentStateFragment\");\nvar Immutable = require(\"immutable\");\nvar insertFragmentIntoContentState = require(\"./insertFragmentIntoContentState\");\nvar insertTextIntoContentState = require(\"./insertTextIntoContentState\");\nvar invariant = require(\"fbjs/lib/invariant\");\nvar modifyBlockForContentState = require(\"./modifyBlockForContentState\");\nvar removeEntitiesAtEdges = require(\"./removeEntitiesAtEdges\");\nvar removeRangeFromContentState = require(\"./removeRangeFromContentState\");\nvar splitBlockInContentState = require(\"./splitBlockInContentState\");\nvar OrderedSet = Immutable.OrderedSet;\n/**\r\n * `DraftModifier` provides a set of convenience methods that apply\r\n * modifications to a `ContentState` object based on a target `SelectionState`.\r\n *\r\n * Any change to a `ContentState` should be decomposable into a series of\r\n * transaction functions that apply the required changes and return output\r\n * `ContentState` objects.\r\n *\r\n * These functions encapsulate some of the most common transaction sequences.\r\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'REPLACE_WITH_NEW_DATA';\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment, mergeBlockData);\n  },\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey, endKey, startBlock, endBlock;\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n        return removeRangeFromContentState(contentState, adjustedRemovalRange);\n      }\n    }\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\n    return removeRangeFromContentState(withoutEntities, rangeToRemove);\n  },\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        type: blockType,\n        depth: 0\n      });\n    });\n  },\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: blockData\n      });\n    });\n  },\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: block.getData().merge(blockData)\n      });\n    });\n  },\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\nmodule.exports = DraftModifier;","map":{"version":3,"names":["CharacterMetadata","require","ContentStateInlineStyle","applyEntityToContentState","getCharacterRemovalRange","getContentStateFragment","Immutable","insertFragmentIntoContentState","insertTextIntoContentState","invariant","modifyBlockForContentState","removeEntitiesAtEdges","removeRangeFromContentState","splitBlockInContentState","OrderedSet","DraftModifier","replaceText","contentState","rangeToReplace","text","inlineStyle","entityKey","withoutEntities","withoutText","character","create","style","entity","getSelectionAfter","insertText","targetRange","isCollapsed","process","env","NODE_ENV","moveText","removalRange","movedFragment","afterRemoval","removeRange","replaceWithFragment","fragment","mergeBlockData","arguments","length","undefined","rangeToRemove","removalDirection","startKey","endKey","startBlock","endBlock","getIsBackward","merge","anchorKey","getFocusKey","anchorOffset","getFocusOffset","focusKey","getAnchorKey","focusOffset","getAnchorOffset","isBackward","getBlockForKey","startOffset","getStartOffset","endOffset","getEndOffset","startEntityKey","getEntityAt","endEntityKey","adjustedRemovalRange","getEntityMap","splitBlock","selectionState","applyInlineStyle","add","removeInlineStyle","remove","setBlockType","blockType","block","type","depth","setBlockData","blockData","data","getData","applyEntity","module","exports"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/DraftModifier.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar CharacterMetadata = require(\"./CharacterMetadata\");\r\n\r\nvar ContentStateInlineStyle = require(\"./ContentStateInlineStyle\");\r\n\r\nvar applyEntityToContentState = require(\"./applyEntityToContentState\");\r\n\r\nvar getCharacterRemovalRange = require(\"./getCharacterRemovalRange\");\r\n\r\nvar getContentStateFragment = require(\"./getContentStateFragment\");\r\n\r\nvar Immutable = require(\"immutable\");\r\n\r\nvar insertFragmentIntoContentState = require(\"./insertFragmentIntoContentState\");\r\n\r\nvar insertTextIntoContentState = require(\"./insertTextIntoContentState\");\r\n\r\nvar invariant = require(\"fbjs/lib/invariant\");\r\n\r\nvar modifyBlockForContentState = require(\"./modifyBlockForContentState\");\r\n\r\nvar removeEntitiesAtEdges = require(\"./removeEntitiesAtEdges\");\r\n\r\nvar removeRangeFromContentState = require(\"./removeRangeFromContentState\");\r\n\r\nvar splitBlockInContentState = require(\"./splitBlockInContentState\");\r\n\r\nvar OrderedSet = Immutable.OrderedSet;\r\n/**\r\n * `DraftModifier` provides a set of convenience methods that apply\r\n * modifications to a `ContentState` object based on a target `SelectionState`.\r\n *\r\n * Any change to a `ContentState` should be decomposable into a series of\r\n * transaction functions that apply the required changes and return output\r\n * `ContentState` objects.\r\n *\r\n * These functions encapsulate some of the most common transaction sequences.\r\n */\r\n\r\nvar DraftModifier = {\r\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\r\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\r\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\r\n    var character = CharacterMetadata.create({\r\n      style: inlineStyle || OrderedSet(),\r\n      entity: entityKey || null\r\n    });\r\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\r\n  },\r\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\r\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\r\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\r\n  },\r\n  moveText: function moveText(contentState, removalRange, targetRange) {\r\n    var movedFragment = getContentStateFragment(contentState, removalRange);\r\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\r\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\r\n  },\r\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\r\n    var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'REPLACE_WITH_NEW_DATA';\r\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\r\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\r\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment, mergeBlockData);\r\n  },\r\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\r\n    var startKey, endKey, startBlock, endBlock;\r\n\r\n    if (rangeToRemove.getIsBackward()) {\r\n      rangeToRemove = rangeToRemove.merge({\r\n        anchorKey: rangeToRemove.getFocusKey(),\r\n        anchorOffset: rangeToRemove.getFocusOffset(),\r\n        focusKey: rangeToRemove.getAnchorKey(),\r\n        focusOffset: rangeToRemove.getAnchorOffset(),\r\n        isBackward: false\r\n      });\r\n    }\r\n\r\n    startKey = rangeToRemove.getAnchorKey();\r\n    endKey = rangeToRemove.getFocusKey();\r\n    startBlock = contentState.getBlockForKey(startKey);\r\n    endBlock = contentState.getBlockForKey(endKey);\r\n    var startOffset = rangeToRemove.getStartOffset();\r\n    var endOffset = rangeToRemove.getEndOffset();\r\n    var startEntityKey = startBlock.getEntityAt(startOffset);\r\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\r\n    // If so, try to remove the appropriate substring of the entity text.\r\n\r\n    if (startKey === endKey) {\r\n      if (startEntityKey && startEntityKey === endEntityKey) {\r\n        var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\r\n        return removeRangeFromContentState(contentState, adjustedRemovalRange);\r\n      }\r\n    }\r\n\r\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\r\n    return removeRangeFromContentState(withoutEntities, rangeToRemove);\r\n  },\r\n  splitBlock: function splitBlock(contentState, selectionState) {\r\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\r\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\r\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\r\n  },\r\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\r\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\r\n  },\r\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\r\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\r\n  },\r\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\r\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\r\n      return block.merge({\r\n        type: blockType,\r\n        depth: 0\r\n      });\r\n    });\r\n  },\r\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\r\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\r\n      return block.merge({\r\n        data: blockData\r\n      });\r\n    });\r\n  },\r\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\r\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\r\n      return block.merge({\r\n        data: block.getData().merge(blockData)\r\n      });\r\n    });\r\n  },\r\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\r\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\r\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\r\n  }\r\n};\r\nmodule.exports = DraftModifier;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}