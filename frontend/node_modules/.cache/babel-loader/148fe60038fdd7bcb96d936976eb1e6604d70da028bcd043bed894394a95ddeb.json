{"ast":null,"code":"import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildDateTimeRangeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  let pathLabelArray = pathLabel.split(\"-\");\n  let pathArray = [...pathLabelArray];\n  pathArray.pop();\n  pathArray.pop();\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\n      let pathLabelDateStart = pathDateStart.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"A hora inicial deve ser inferior ou igual à hora final\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endDate = this.parent[pathLabelDateEnd];\n        let startDate = this.parent[pathLabelDateStart];\n        let endTime;\n        let startTime;\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\n          if (this.parent[pathLabelTimeEnd] !== undefined) {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], this.parent[pathLabelTimeEnd].split(\":\")[0], this.parent[pathLabelTimeEnd].split(\":\")[1]);\n          } else {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\n          }\n          if (value !== undefined) {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\n          } else {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\n          }\n          if (endTime < startTime) {\n            return false;\n          }\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\n      let pathLabelDateStart = pathDateStart.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"superiorigual\", \"A hora final deve ser superior ou igual à hora inicial\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endDate = this.parent[pathLabelDateEnd];\n        let startDate = this.parent[pathLabelDateStart];\n        let endTime;\n        let startTime;\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\n          if (value !== undefined) {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\n          } else {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\n          }\n          if (this.parent[pathLabelTimeStart] !== undefined) {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], this.parent[pathLabelTimeStart].split(\":\")[0], this.parent[pathLabelTimeStart].split(\":\")[1]);\n          } else {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\n          }\n          if (endTime < startTime) {\n            return false;\n          }\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endDate = this.parent[pathLabelDateEnd];\n        let endTime = this.parent[pathLabelTimeEnd];\n        let startTime = this.parent[pathLabelTimeStart];\n        if ((endTime !== undefined || startTime !== undefined || endDate !== undefined) && value === undefined) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\n      let pathLabelDateStart = pathDateStart.join(\"-\");\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel + \"superiorigual\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let startDate = this.parent[pathLabelDateStart];\n        let endTime = this.parent[pathLabelTimeEnd];\n        let startTime = this.parent[pathLabelTimeStart];\n        if ((endTime !== undefined || startTime !== undefined || startDate !== undefined) && value === undefined) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\n      let pathLabelDateStart = pathDateStart.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel + \"inferiorigual\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endDate = this.parent[pathLabelDateEnd];\n        let startDate = this.parent[pathLabelDateStart];\n        let endTime;\n        let startTime;\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\n          if (this.parent[pathLabelTimeEnd] !== undefined) {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], this.parent[pathLabelTimeEnd].split(\":\")[0], this.parent[pathLabelTimeEnd].split(\":\")[1]);\n          } else {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\n          }\n          if (value !== undefined) {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\n          } else {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\n          }\n          if (endTime < startTime) {\n            return this.createError({\n              message: \"A hora inicial deve ser inferior ou igual à hora final\"\n            });\n          } else if (isNaN(startTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          } else if (!isNaN(endTime.getTime()) && isNaN(startTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          }\n          return true;\n        } else {\n          if (this.parent[pathLabelTimeEnd] !== undefined) {\n            endTime = new Date(2000, 1, 1, this.parent[pathLabelTimeEnd].split(\":\")[0], this.parent[pathLabelTimeEnd].split(\":\")[1]);\n          } else {\n            endTime = new Date(2000, 1, 1);\n          }\n          if (value !== undefined) {\n            startTime = new Date(2000, 1, 1, value.split(\":\")[0], value.split(\":\")[1]);\n          } else {\n            startTime = new Date(2000, 1, 1);\n          }\n          if (!isNaN(endTime.getTime()) && isNaN(startTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          } else if ((startDate !== undefined || endDate !== undefined || !isNaN(endTime.getTime())) && isNaN(startTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          }\n          return true;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\n      let pathLabelDateStart = pathDateStart.join(\"-\");\n      validationSchema[pathLabel] = Yup.string().test(pathLabel + \"superiorigual\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endDate = this.parent[pathLabelDateEnd];\n        let startDate = this.parent[pathLabelDateStart];\n        let endTime;\n        let startTime;\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\n          if (value !== undefined) {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\n          } else {\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\n          }\n          if (this.parent[pathLabelTimeStart] !== undefined) {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], this.parent[pathLabelTimeStart].split(\":\")[0], this.parent[pathLabelTimeStart].split(\":\")[1]);\n          } else {\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\n          }\n          if (endTime < startTime) {\n            return this.createError({\n              message: \"A hora final deve ser superior ou igual à hora inicial\"\n            });\n          } else if (isNaN(endTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          } else if (isNaN(endTime.getTime()) && !isNaN(startTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          }\n          return true;\n        } else {\n          if (value !== undefined) {\n            endTime = new Date(2000, 1, 1, value.split(\":\")[0], value.split(\":\")[1]);\n          } else {\n            endTime = new Date(2000, 1, 1);\n          }\n          if (this.parent[pathLabelTimeStart] !== undefined) {\n            startTime = new Date(2000, 1, 1, this.parent[pathLabelTimeStart].split(\":\")[0], this.parent[pathLabelTimeStart].split(\":\")[1]);\n          } else {\n            startTime = new Date(2000, 1, 1);\n          }\n          if (isNaN(endTime.getTime()) && !isNaN(startTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          } else if ((startDate !== undefined || endDate !== undefined || !isNaN(startTime.getTime())) && isNaN(endTime.getTime())) {\n            return this.createError({\n              message: \"Campo obrigatório\"\n            });\n          }\n          return true;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n};\nexport { buildDateTimeRangeValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","handleRequiredValidation","handleRequiredSection","buildDateTimeRangeValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","pathLabelArray","split","pathArray","pop","occurrences","lowerOccurrences","upperOccurrences","length","string","test","value","isVisible","parent","passedRequired","res","sectionsError","createError","message","toString","toLocaleLowerCase","pathTimeEnd","pathDateEnd","pathDateStart","pathLabelTimeEnd","join","pathLabelDateEnd","pathLabelDateStart","endDate","startDate","endTime","startTime","undefined","Date","pathTimeStart","pathLabelTimeStart","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","path","conditionValidation","Array","isArray","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable","isNaN","getTime"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildDateTimeRangeValidation/BuildDateTimeRangeValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\r\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\r\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\r\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\r\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\r\n\r\nconst buildDateTimeRangeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\r\n  const checkMandatory = handleIfMandatoryValidation(item);\r\n  let pathLabelArray = pathLabel.split(\"-\");\r\n  let pathArray = [...pathLabelArray];\r\n  pathArray.pop();\r\n  pathArray.pop();\r\n\r\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\r\n    if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\r\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\r\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\r\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\r\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\r\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\r\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\r\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\r\n      let pathLabelDateStart = pathDateStart.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(pathLabel + \"inferiorigual\", \"A hora inicial deve ser inferior ou igual à hora final\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endDate = this.parent[pathLabelDateEnd];\r\n        let startDate = this.parent[pathLabelDateStart];\r\n        let endTime;\r\n        let startTime;\r\n\r\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\r\n          if (this.parent[pathLabelTimeEnd] !== undefined) {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], this.parent[pathLabelTimeEnd].split(\":\")[0], this.parent[pathLabelTimeEnd].split(\":\")[1]);\r\n          } else {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (value !== undefined) {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\r\n          } else {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (endTime < startTime) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\r\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\r\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\r\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\r\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\r\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\r\n      let pathLabelDateStart = pathDateStart.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(\"required\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(pathLabel + \"superiorigual\", \"A hora final deve ser superior ou igual à hora inicial\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endDate = this.parent[pathLabelDateEnd];\r\n        let startDate = this.parent[pathLabelDateStart];\r\n        let endTime;\r\n        let startTime;\r\n\r\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\r\n          if (value !== undefined) {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\r\n          } else {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (this.parent[pathLabelTimeStart] !== undefined) {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], this.parent[pathLabelTimeStart].split(\":\")[0], this.parent[pathLabelTimeStart].split(\":\")[1]);\r\n          } else {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (endTime < startTime) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\r\n    if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\r\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\r\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\r\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\r\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\r\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\r\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(pathLabel, \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endDate = this.parent[pathLabelDateEnd];\r\n        let endTime = this.parent[pathLabelTimeEnd];\r\n        let startTime = this.parent[pathLabelTimeStart];\r\n\r\n        if ((endTime !== undefined || startTime !== undefined || endDate !== undefined) && value === undefined) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"date\") {\r\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\r\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\r\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\r\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\r\n      let pathLabelDateStart = pathDateStart.join(\"-\");\r\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(pathLabel + \"superiorigual\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let startDate = this.parent[pathLabelDateStart];\r\n        let endTime = this.parent[pathLabelTimeEnd];\r\n        let startTime = this.parent[pathLabelTimeStart];\r\n\r\n        if ((endTime !== undefined || startTime !== undefined || startDate !== undefined) && value === undefined) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\r\n      let pathTimeEnd = [...pathArray, \"time\", \"end\"];\r\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\r\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\r\n      let pathLabelTimeEnd = pathTimeEnd.join(\"-\");\r\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\r\n      let pathLabelDateStart = pathDateStart.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(pathLabel + \"inferiorigual\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endDate = this.parent[pathLabelDateEnd];\r\n        let startDate = this.parent[pathLabelDateStart];\r\n        let endTime;\r\n        let startTime;\r\n\r\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\r\n          if (this.parent[pathLabelTimeEnd] !== undefined) {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], this.parent[pathLabelTimeEnd].split(\":\")[0], this.parent[pathLabelTimeEnd].split(\":\")[1]);\r\n          } else {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (value !== undefined) {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\r\n          } else {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (endTime < startTime) {\r\n            return this.createError({\r\n              message: \"A hora inicial deve ser inferior ou igual à hora final\"\r\n            });\r\n          } else if (isNaN(startTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          } else if (!isNaN(endTime.getTime()) && isNaN(startTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          }\r\n\r\n          return true;\r\n        } else {\r\n          if (this.parent[pathLabelTimeEnd] !== undefined) {\r\n            endTime = new Date(2000, 1, 1, this.parent[pathLabelTimeEnd].split(\":\")[0], this.parent[pathLabelTimeEnd].split(\":\")[1]);\r\n          } else {\r\n            endTime = new Date(2000, 1, 1);\r\n          }\r\n\r\n          if (value !== undefined) {\r\n            startTime = new Date(2000, 1, 1, value.split(\":\")[0], value.split(\":\")[1]);\r\n          } else {\r\n            startTime = new Date(2000, 1, 1);\r\n          }\r\n\r\n          if (!isNaN(endTime.getTime()) && isNaN(startTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          } else if ((startDate !== undefined || endDate !== undefined || !isNaN(endTime.getTime())) && isNaN(startTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          }\r\n\r\n          return true;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"end\" && pathLabelArray[pathLabelArray.length - 2] === \"time\") {\r\n      let pathTimeStart = [...pathArray, \"time\", \"start\"];\r\n      let pathDateEnd = [...pathArray, \"date\", \"end\"];\r\n      let pathDateStart = [...pathArray, \"date\", \"start\"];\r\n      let pathLabelTimeStart = pathTimeStart.join(\"-\");\r\n      let pathLabelDateEnd = pathDateEnd.join(\"-\");\r\n      let pathLabelDateStart = pathDateStart.join(\"-\");\r\n      validationSchema[pathLabel] = Yup.string().test(pathLabel + \"superiorigual\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        let endDate = this.parent[pathLabelDateEnd];\r\n        let startDate = this.parent[pathLabelDateStart];\r\n        let endTime;\r\n        let startTime;\r\n\r\n        if (endDate !== undefined && startDate !== undefined && endDate === startDate) {\r\n          if (value !== undefined) {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2], value.split(\":\")[0], value.split(\":\")[1]);\r\n          } else {\r\n            endTime = new Date(endDate.split(\"-\")[0], endDate.split(\"-\")[1], endDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (this.parent[pathLabelTimeStart] !== undefined) {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2], this.parent[pathLabelTimeStart].split(\":\")[0], this.parent[pathLabelTimeStart].split(\":\")[1]);\r\n          } else {\r\n            startTime = new Date(startDate.split(\"-\")[0], startDate.split(\"-\")[1], startDate.split(\"-\")[2]);\r\n          }\r\n\r\n          if (endTime < startTime) {\r\n            return this.createError({\r\n              message: \"A hora final deve ser superior ou igual à hora inicial\"\r\n            });\r\n          } else if (isNaN(endTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          } else if (isNaN(endTime.getTime()) && !isNaN(startTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          }\r\n\r\n          return true;\r\n        } else {\r\n          if (value !== undefined) {\r\n            endTime = new Date(2000, 1, 1, value.split(\":\")[0], value.split(\":\")[1]);\r\n          } else {\r\n            endTime = new Date(2000, 1, 1);\r\n          }\r\n\r\n          if (this.parent[pathLabelTimeStart] !== undefined) {\r\n            startTime = new Date(2000, 1, 1, this.parent[pathLabelTimeStart].split(\":\")[0], this.parent[pathLabelTimeStart].split(\":\")[1]);\r\n          } else {\r\n            startTime = new Date(2000, 1, 1);\r\n          }\r\n\r\n          if (isNaN(endTime.getTime()) && !isNaN(startTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          } else if ((startDate !== undefined || endDate !== undefined || !isNaN(startTime.getTime())) && isNaN(endTime.getTime())) {\r\n            return this.createError({\r\n              message: \"Campo obrigatório\"\r\n            });\r\n          }\r\n\r\n          return true;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport { buildDateTimeRangeValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}