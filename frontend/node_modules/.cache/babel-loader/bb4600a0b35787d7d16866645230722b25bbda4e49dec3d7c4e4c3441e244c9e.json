{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\n/**\r\n * This function is used to mark string literals representing CSS class names\r\n * so that they can be transformed statically. This allows for modularization\r\n * and minification of CSS class names.\r\n *\r\n * In static_upstream, this function is actually implemented, but it should\r\n * eventually be replaced with something more descriptive, and the transform\r\n * that is used in the main stack should be ported for use elsewhere.\r\n *\r\n * @param string|object className to modularize, or an object of key/values.\r\n *                      In the object case, the values are conditions that\r\n *                      determine if the className keys should be included.\r\n * @param [string ...]  Variable list of classNames in the string case.\r\n * @return string       Renderable space-separated CSS className.\r\n */\nfunction cx(classNames) {\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function (className) {\n      return classNames[className];\n    }).map(replace).join(' ');\n  }\n  return Array.prototype.map.call(arguments, replace).join(' ');\n}\nfunction replace(str) {\n  return str.replace(/\\//g, '-');\n}\nmodule.exports = cx;","map":{"version":3,"names":["cx","classNames","Object","keys","filter","className","map","replace","join","Array","prototype","call","arguments","str","module","exports"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/fbjs/lib/cx.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n/**\r\n * This function is used to mark string literals representing CSS class names\r\n * so that they can be transformed statically. This allows for modularization\r\n * and minification of CSS class names.\r\n *\r\n * In static_upstream, this function is actually implemented, but it should\r\n * eventually be replaced with something more descriptive, and the transform\r\n * that is used in the main stack should be ported for use elsewhere.\r\n *\r\n * @param string|object className to modularize, or an object of key/values.\r\n *                      In the object case, the values are conditions that\r\n *                      determine if the className keys should be included.\r\n * @param [string ...]  Variable list of classNames in the string case.\r\n * @return string       Renderable space-separated CSS className.\r\n */\r\nfunction cx(classNames) {\r\n  if (typeof classNames == 'object') {\r\n    return Object.keys(classNames).filter(function (className) {\r\n      return classNames[className];\r\n    }).map(replace).join(' ');\r\n  }\r\n\r\n  return Array.prototype.map.call(arguments, replace).join(' ');\r\n}\r\n\r\nfunction replace(str) {\r\n  return str.replace(/\\//g, '-');\r\n}\r\n\r\nmodule.exports = cx;"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,EAAE,CAACC,UAAU,EAAE;EACtB,IAAI,OAAOA,UAAU,IAAI,QAAQ,EAAE;IACjC,OAAOC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,CAAC,UAAUC,SAAS,EAAE;MACzD,OAAOJ,UAAU,CAACI,SAAS,CAAC;IAC9B,CAAC,CAAC,CAACC,GAAG,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC3B;EAEA,OAAOC,KAAK,CAACC,SAAS,CAACJ,GAAG,CAACK,IAAI,CAACC,SAAS,EAAEL,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AAC/D;AAEA,SAASD,OAAO,CAACM,GAAG,EAAE;EACpB,OAAOA,GAAG,CAACN,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAChC;AAEAO,MAAM,CAACC,OAAO,GAAGf,EAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}