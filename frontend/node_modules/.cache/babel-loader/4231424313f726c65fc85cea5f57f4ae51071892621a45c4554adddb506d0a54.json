{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst cheerio_1 = require(\"cheerio\");\nconst fallback_1 = __importDefault(require(\"./fallback\"));\nconst fields_1 = __importDefault(require(\"./fields\"));\nconst media_1 = __importDefault(require(\"./media\"));\n/**\n * extract all of the meta tags needed for ogs\n *\n * @param {sting} body - the body of the fetch request\n * @param {object} options - options for ogs\n * @return {object} object with ogs results\n *\n */\nfunction extractMetaTags(body, options) {\n  let ogObject = {};\n  const $ = (0, cheerio_1.load)(body);\n  const metaFields = fields_1.default.concat(options.customMetaTags || []);\n  // find all of the open graph info in the meta tags\n  $('meta').each((index, meta) => {\n    if (!meta.attribs || !meta.attribs.property && !meta.attribs.name) return;\n    const property = meta.attribs.property || meta.attribs.name;\n    const content = meta.attribs.content || meta.attribs.value;\n    metaFields.forEach(item => {\n      if (item && property.toLowerCase() === item.property.toLowerCase()) {\n        if (!item.multiple) {\n          ogObject[item.fieldName] = content;\n        } else if (!ogObject[item.fieldName]) {\n          ogObject[item.fieldName] = [content];\n        } else if (Array.isArray(ogObject[item.fieldName])) {\n          ogObject[item.fieldName].push(content);\n        }\n      }\n    });\n  });\n  // take all of the customMetaTags out of base of ogObject and store them into ogObject.customMetaTags\n  if (options.customMetaTags) {\n    options.customMetaTags.forEach(customMetaTag => {\n      if (ogObject[customMetaTag.fieldName]) {\n        ogObject.customMetaTags = {\n          ...ogObject.customMetaTags,\n          [customMetaTag.fieldName]: ogObject[customMetaTag.fieldName]\n        };\n        delete ogObject[customMetaTag.fieldName];\n      }\n    });\n  }\n  // formats the multiple media values\n  ogObject = (0, media_1.default)(ogObject);\n  // if onlyGetOpenGraphInfo isn't set, run the open graph fallbacks\n  if (!options.onlyGetOpenGraphInfo) {\n    ogObject = (0, fallback_1.default)(ogObject, options, $, body);\n  }\n  return ogObject;\n}\nexports.default = extractMetaTags;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","cheerio_1","require","fallback_1","fields_1","media_1","extractMetaTags","body","options","ogObject","$","load","metaFields","default","concat","customMetaTags","each","index","meta","attribs","property","name","content","forEach","item","toLowerCase","multiple","fieldName","Array","isArray","push","customMetaTag","onlyGetOpenGraphInfo"],"sources":["C:/Users/ines_/bee_v2/bee_school/frontend/node_modules/open-graph-scraper/dist/lib/extract.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cheerio_1 = require(\"cheerio\");\nconst fallback_1 = __importDefault(require(\"./fallback\"));\nconst fields_1 = __importDefault(require(\"./fields\"));\nconst media_1 = __importDefault(require(\"./media\"));\n/**\n * extract all of the meta tags needed for ogs\n *\n * @param {sting} body - the body of the fetch request\n * @param {object} options - options for ogs\n * @return {object} object with ogs results\n *\n */\nfunction extractMetaTags(body, options) {\n    let ogObject = {};\n    const $ = (0, cheerio_1.load)(body);\n    const metaFields = fields_1.default.concat(options.customMetaTags || []);\n    // find all of the open graph info in the meta tags\n    $('meta').each((index, meta) => {\n        if (!meta.attribs || (!meta.attribs.property && !meta.attribs.name))\n            return;\n        const property = meta.attribs.property || meta.attribs.name;\n        const content = meta.attribs.content || meta.attribs.value;\n        metaFields.forEach((item) => {\n            if (item && property.toLowerCase() === item.property.toLowerCase()) {\n                if (!item.multiple) {\n                    ogObject[item.fieldName] = content;\n                }\n                else if (!ogObject[item.fieldName]) {\n                    ogObject[item.fieldName] = [content];\n                }\n                else if (Array.isArray(ogObject[item.fieldName])) {\n                    ogObject[item.fieldName].push(content);\n                }\n            }\n        });\n    });\n    // take all of the customMetaTags out of base of ogObject and store them into ogObject.customMetaTags\n    if (options.customMetaTags) {\n        options.customMetaTags.forEach((customMetaTag) => {\n            if (ogObject[customMetaTag.fieldName]) {\n                ogObject.customMetaTags = {\n                    ...ogObject.customMetaTags,\n                    [customMetaTag.fieldName]: ogObject[customMetaTag.fieldName],\n                };\n                delete ogObject[customMetaTag.fieldName];\n            }\n        });\n    }\n    // formats the multiple media values\n    ogObject = (0, media_1.default)(ogObject);\n    // if onlyGetOpenGraphInfo isn't set, run the open graph fallbacks\n    if (!options.onlyGetOpenGraphInfo) {\n        ogObject = (0, fallback_1.default)(ogObject, options, $, body);\n    }\n    return ogObject;\n}\nexports.default = extractMetaTags;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}