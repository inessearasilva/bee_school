{"ast":null,"code":"const handleSectionValidationDataType = (item, pathArray, array) => {\n  if (item.dataType === \"DV_TEXT\" || item.dataType === \"DV_BOOLEAN\" || item.dataType === \"DV_CODED_TEXT\" || item.dataType === \"DV_DATE\" || item.dataType === \"DV_TIME\" || item.dataType === \"DV_COUNT\" || item.dataType === \"DV_IDENTIFIER\" || item.dataType === \"DV_MULTIMEDIA\" || item.dataType === \"DV_ORDINAL\" || item.dataType === \"DV_PROPORTION\") {\n    let value = [...array, \"value\"];\n    return pathArray.concat(value).join(\"-\");\n  } else if (item.dataType === \"DV_QUANTITY\" || item.dataType === \"DV_DURATION\") {\n    let unit = [...array, \"value\", \"unit\"];\n    let value = [...array, \"value\", \"value\"];\n    return [pathArray.concat(value).join(\"-\"), pathArray.concat(unit).join(\"-\")];\n  } else if (item.dataType === \"DV_DATE_TIME\") {\n    let date = [...array, \"value\", \"date\"];\n    let time = [...array, \"value\", \"time\"];\n    return [pathArray.concat(date).join(\"-\"), pathArray.concat(time).join(\"-\")];\n  } else if (item.dataType === \"DV_INTERVAL<DV_DATE>\" || item.dataType === \"DV_INTERVAL<DV_TIME>\" || item.dataType === \"DV_INTERVAL<DV_COUNT>\") {\n    let end = [...array, \"value\", \"end\"];\n    let start = [...array, \"value\", \"start\"];\n    return [pathArray.concat(start).join(\"-\"), pathArray.concat(end).join(\"-\")];\n  } else if (item.dataType === \"DV_INTERVAL<DV_DATE_TIME>\") {\n    let endDate = [...array, \"value\", \"date\", \"end\"];\n    let startDate = [...array, \"value\", \"date\", \"start\"];\n    let endTime = [...array, \"value\", \"time\", \"end\"];\n    let startTime = [...array, \"value\", \"time\", \"start\"];\n    return [pathArray.concat(startDate).join(\"-\"), pathArray.concat(endDate).join(\"-\"), pathArray.concat(endTime).join(\"-\"), pathArray.concat(startTime).join(\"-\")];\n  } else if (item.dataType === \"DV_INTERVAL<DV_QUANTITY>\") {\n    let end = [...array, \"value\", \"value\", \"end\"];\n    let start = [...array, \"value\", \"value\", \"start\"];\n    let unit = [...array, \"value\", \"unit\"];\n    return [pathArray.concat(start).join(\"-\"), pathArray.concat(end).join(\"-\"), pathArray.concat(unit).join(\"-\")];\n  }\n};\nconst handleSectionValidationAny = (item, pathArray, array) => {\n  let paths = item.map((subItem, index) => {\n    return handleSectionValidationDataType(subItem, pathArray, [...array, index]);\n  });\n  return paths;\n};\nconst handleSectionValidationItem = (item, pathArray, array) => {\n  let paths = item.items.map((subItem, subItemIndex) => {\n    if (subItem.data_type === \"Title\") {\n      return handleSectionValidationItem(subItem, pathArray, [...array, \"items\", subItemIndex]);\n    } else {\n      if (Array.isArray(subItem)) {\n        return handleSectionValidationAny(subItem, pathArray, [...array, \"items\", subItemIndex]);\n      } else {\n        return handleSectionValidationDataType(subItem, pathArray, [...array, \"items\", subItemIndex]);\n      }\n    }\n  });\n  return paths;\n};\nconst handleSectionValidationDnd = (item, pathArray) => {\n  let itemsPaths = item.items.map((item, index) => {\n    if (item.data_type === \"Title\") {\n      return handleSectionValidationItem(item, pathArray, [\"items\", index]);\n    } else {\n      if (Array.isArray(item)) {\n        return handleSectionValidationAny(item, pathArray, [\"items\", index]);\n      } else {\n        return handleSectionValidationDataType(item, pathArray, [\"items\", index]);\n      }\n    }\n  });\n  return itemsPaths.toString().split(\",\");\n};\nexport { handleSectionValidationDnd };","map":{"version":3,"names":["handleSectionValidationDataType","item","pathArray","array","dataType","value","concat","join","unit","date","time","end","start","endDate","startDate","endTime","startTime","handleSectionValidationAny","paths","map","subItem","index","handleSectionValidationItem","items","subItemIndex","data_type","Array","isArray","handleSectionValidationDnd","itemsPaths","toString","split"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/assets/functions/HandleSectionValidation/handleSectionValidationDnd.js"],"sourcesContent":["const handleSectionValidationDataType = (item, pathArray, array) => {\n  if (item.dataType === \"DV_TEXT\" || item.dataType === \"DV_BOOLEAN\" || item.dataType === \"DV_CODED_TEXT\" || item.dataType === \"DV_DATE\" || item.dataType === \"DV_TIME\" || item.dataType === \"DV_COUNT\" || item.dataType === \"DV_IDENTIFIER\" || item.dataType === \"DV_MULTIMEDIA\" || item.dataType === \"DV_ORDINAL\" || item.dataType === \"DV_PROPORTION\") {\n    let value = [...array, \"value\"];\n    return pathArray.concat(value).join(\"-\");\n  } else if (item.dataType === \"DV_QUANTITY\" || item.dataType === \"DV_DURATION\") {\n    let unit = [...array, \"value\", \"unit\"];\n    let value = [...array, \"value\", \"value\"];\n    return [pathArray.concat(value).join(\"-\"), pathArray.concat(unit).join(\"-\")];\n  } else if (item.dataType === \"DV_DATE_TIME\") {\n    let date = [...array, \"value\", \"date\"];\n    let time = [...array, \"value\", \"time\"];\n    return [pathArray.concat(date).join(\"-\"), pathArray.concat(time).join(\"-\")];\n  } else if (item.dataType === \"DV_INTERVAL<DV_DATE>\" || item.dataType === \"DV_INTERVAL<DV_TIME>\" || item.dataType === \"DV_INTERVAL<DV_COUNT>\") {\n    let end = [...array, \"value\", \"end\"];\n    let start = [...array, \"value\", \"start\"];\n    return [pathArray.concat(start).join(\"-\"), pathArray.concat(end).join(\"-\")];\n  } else if (item.dataType === \"DV_INTERVAL<DV_DATE_TIME>\") {\n    let endDate = [...array, \"value\", \"date\", \"end\"];\n    let startDate = [...array, \"value\", \"date\", \"start\"];\n    let endTime = [...array, \"value\", \"time\", \"end\"];\n    let startTime = [...array, \"value\", \"time\", \"start\"];\n    return [pathArray.concat(startDate).join(\"-\"), pathArray.concat(endDate).join(\"-\"), pathArray.concat(endTime).join(\"-\"), pathArray.concat(startTime).join(\"-\")];\n  } else if (item.dataType === \"DV_INTERVAL<DV_QUANTITY>\") {\n    let end = [...array, \"value\", \"value\", \"end\"];\n    let start = [...array, \"value\", \"value\", \"start\"];\n    let unit = [...array, \"value\", \"unit\"];\n    return [pathArray.concat(start).join(\"-\"), pathArray.concat(end).join(\"-\"), pathArray.concat(unit).join(\"-\")];\n  }\n};\n\nconst handleSectionValidationAny = (item, pathArray, array) => {\n  let paths = item.map((subItem, index) => {\n    return handleSectionValidationDataType(subItem, pathArray, [...array, index]);\n  });\n  return paths;\n};\n\nconst handleSectionValidationItem = (item, pathArray, array) => {\n  let paths = item.items.map((subItem, subItemIndex) => {\n    if (subItem.data_type === \"Title\") {\n      return handleSectionValidationItem(subItem, pathArray, [...array, \"items\", subItemIndex]);\n    } else {\n      if (Array.isArray(subItem)) {\n        return handleSectionValidationAny(subItem, pathArray, [...array, \"items\", subItemIndex]);\n      } else {\n        return handleSectionValidationDataType(subItem, pathArray, [...array, \"items\", subItemIndex]);\n      }\n    }\n  });\n  return paths;\n};\n\nconst handleSectionValidationDnd = (item, pathArray) => {\n  let itemsPaths = item.items.map((item, index) => {\n    if (item.data_type === \"Title\") {\n      return handleSectionValidationItem(item, pathArray, [\"items\", index]);\n    } else {\n      if (Array.isArray(item)) {\n        return handleSectionValidationAny(item, pathArray, [\"items\", index]);\n      } else {\n        return handleSectionValidationDataType(item, pathArray, [\"items\", index]);\n      }\n    }\n  });\n  return itemsPaths.toString().split(\",\");\n};\n\nexport { handleSectionValidationDnd };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}