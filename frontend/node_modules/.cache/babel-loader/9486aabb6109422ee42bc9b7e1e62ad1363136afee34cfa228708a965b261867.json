{"ast":null,"code":"import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildTextValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections, ruleMandatory) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  if (ruleMandatory) {\n    validationSchema[pathLabel] = Yup.object().test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n      if (value === \"\" || value === undefined) {\n        return false;\n      } else if (Array.isArray(value)) {\n        if (value.length === 0) {\n          return false;\n        } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n          return false;\n        } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n          return false;\n        } else {\n          return true;\n        }\n      } else if (value._immutable !== undefined) {\n        if (!value.getCurrentContent().hasText()) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    });\n  } else if (item.occurrences.upperOccurrences === 1) {\n    if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.object().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n      validationSchema[pathLabel] = Yup.object().test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      });\n    }\n  } else {\n    if (item.occurrences.lowerOccurrences === 0) {\n      if (item.occurrences.upperOccurrences === \"*\" || item.occurrences.upperOccurrences === undefined) {\n        validationSchema[pathLabel] = Yup.array().test(\"section-validation\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"at-least-one\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          if (!checkMandatory) {\n            return true;\n          } else {\n            let i;\n            for (i = 0; i < item.ruleMandatory.length; i++) {\n              const rule = item.ruleMandatory[i];\n              let mandatory;\n              if (rule[\"$or\"]) {\n                mandatory = false;\n                let j;\n                const conditionsArray = rule[\"$or\"];\n                for (j = 0; j < conditionsArray.length; j++) {\n                  const condition = conditionsArray[j];\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                  if (conditionValidation) {\n                    mandatory = true;\n                    break;\n                  }\n                }\n              } else if (rule[\"$and\"]) {\n                mandatory = true;\n                let j;\n                const conditionsArray = rule[\"$and\"];\n                for (j = 0; j < conditionsArray.length; j++) {\n                  const condition = conditionsArray[j];\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                  if (!conditionValidation) {\n                    mandatory = false;\n                    break;\n                  }\n                }\n              }\n              if (!mandatory) {\n                return true;\n              } else {\n                if (value === \"\" || value === undefined) {\n                  return false;\n                } else if (Array.isArray(value)) {\n                  if (value.length === 0) {\n                    return false;\n                  } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                    return false;\n                  } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                    return false;\n                  } else {\n                    return true;\n                  }\n                } else if (value._immutable !== undefined) {\n                  if (!value.getCurrentContent().hasText()) {\n                    return false;\n                  } else {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n            }\n          }\n        });\n      } else {\n        validationSchema[pathLabel] = Yup.array().test(\"max-length\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          let writtenFields = 0;\n          value.forEach(function (obj) {\n            if (obj.value.getCurrentContent().hasText()) {\n              writtenFields += 1;\n            }\n          });\n          if (writtenFields > item.occurrences.upperOccurrences) {\n            return this.createError({\n              message: \"Campo inválido: limite máximo de \" + item.occurrences.upperOccurrences + \" caixas de texto\"\n            });\n          }\n          return true;\n        }).test(\"section-validation\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"at-least-one\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          if (!checkMandatory) {\n            return true;\n          } else {\n            let i;\n            for (i = 0; i < item.ruleMandatory.length; i++) {\n              const rule = item.ruleMandatory[i];\n              let mandatory;\n              if (rule[\"$or\"]) {\n                mandatory = false;\n                let j;\n                const conditionsArray = rule[\"$or\"];\n                for (j = 0; j < conditionsArray.length; j++) {\n                  const condition = conditionsArray[j];\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                  if (conditionValidation) {\n                    mandatory = true;\n                    break;\n                  }\n                }\n              } else if (rule[\"$and\"]) {\n                mandatory = true;\n                let j;\n                const conditionsArray = rule[\"$and\"];\n                for (j = 0; j < conditionsArray.length; j++) {\n                  const condition = conditionsArray[j];\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                  if (!conditionValidation) {\n                    mandatory = false;\n                    break;\n                  }\n                }\n              }\n              if (!mandatory) {\n                return true;\n              } else {\n                if (value === \"\" || value === undefined) {\n                  return false;\n                } else if (Array.isArray(value)) {\n                  if (value.length === 0) {\n                    return false;\n                  } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                    return false;\n                  } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                    return false;\n                  } else {\n                    return true;\n                  }\n                } else if (value._immutable !== undefined) {\n                  if (!value.getCurrentContent().hasText()) {\n                    return false;\n                  } else {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n            }\n          }\n        });\n      }\n    } else if (item.occurrences.lowerOccurrences >= 1) {\n      if (item.occurrences.upperOccurrences === \"*\" || item.occurrences.upperOccurrences === undefined) {\n        validationSchema[pathLabel] = Yup.array().test(pathLabel, \"Campo obrigatório\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n          if (passedRequired) {\n            return true;\n          } else {\n            return false;\n          }\n        }).test(\"min-length\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          let writtenFields = 0;\n          value.forEach(function (obj) {\n            if (obj.value.getCurrentContent().hasText()) {\n              writtenFields += 1;\n            }\n          });\n          if (writtenFields >= 1) {\n            if (writtenFields < item.occurrences.lowerOccurrences) {\n              if (item.occurrences.lowerOccurrences === 1) {\n                return this.createError({\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa de texto\"\n                });\n              } else {\n                return this.createError({\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa(s) de texto\"\n                });\n              }\n            }\n          }\n          return true;\n        }).test(\"section-validation\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"at-least-one\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        });\n      } else {\n        validationSchema[pathLabel] = Yup.array().test(pathLabel, \"Campo obrigatório\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n          if (passedRequired) {\n            return true;\n          } else {\n            return false;\n          }\n        }).test(\"min-length\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          let writtenFields = 0;\n          value.forEach(function (obj) {\n            if (obj.value.getCurrentContent().hasText()) {\n              writtenFields += 1;\n            }\n          });\n          if (writtenFields >= 1) {\n            if (writtenFields < item.occurrences.lowerOccurrences) {\n              if (item.occurrences.lowerOccurrences === 1) {\n                return this.createError({\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa de texto\"\n                });\n              } else {\n                return this.createError({\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa(s) de texto\"\n                });\n              }\n            }\n          }\n          return true;\n        }).test(\"max-length\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          let writtenFields = 0;\n          value.forEach(function (obj) {\n            if (obj.value.getCurrentContent().hasText()) {\n              writtenFields += 1;\n            }\n          });\n          if (writtenFields >= 1) {\n            if (writtenFields > item.occurrences.upperOccurrences) {\n              return this.createError({\n                message: \"Campo inválido: limite máximo de \" + item.occurrences.upperOccurrences + \" caixas de texto\"\n              });\n            }\n          }\n          return true;\n        }).test(\"section-validation\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        }).test(\"at-least-one\", function (value) {\n          const isVisible = handleRules(item, this.parent, \"visibility\");\n          if (!isVisible) {\n            return true;\n          }\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n          if (res === true) {\n            return true;\n          } else {\n            const sectionsError = res;\n            if (sectionsError.length > 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            } else if (sectionsError.length === 1) {\n              return this.createError({\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n};\nexport { buildTextValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","handleRequiredValidation","handleRequiredSection","buildTextValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","ruleMandatory","checkMandatory","object","test","value","undefined","Array","isArray","length","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable","occurrences","upperOccurrences","lowerOccurrences","isVisible","parent","passedRequired","res","sectionsError","createError","message","toString","toLocaleLowerCase","i","rule","mandatory","j","conditionsArray","condition","path","split","join","conditionValidation","array","writtenFields","forEach"],"sources":["C:/Users/ines_/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildTextValidation/BuildTextValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\r\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\r\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\r\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\r\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\r\n\r\nconst buildTextValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections, ruleMandatory) => {\r\n  const checkMandatory = handleIfMandatoryValidation(item);\r\n\r\n  if (ruleMandatory) {\r\n    validationSchema[pathLabel] = Yup.object().test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n      if (value === \"\" || value === undefined) {\r\n        return false;\r\n      } else if (Array.isArray(value)) {\r\n        if (value.length === 0) {\r\n          return false;\r\n        } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n          return false;\r\n        } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      } else if (value._immutable !== undefined) {\r\n        if (!value.getCurrentContent().hasText()) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n  } else if (item.occurrences.upperOccurrences === 1) {\r\n    if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\r\n      validationSchema[pathLabel] = Yup.object().test(pathLabel, \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n        if (passedRequired) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }).test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\r\n      validationSchema[pathLabel] = Yup.object().test(\"section-validation\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"at-least-one\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n        if (res === true) {\r\n          return true;\r\n        } else {\r\n          const sectionsError = res;\r\n\r\n          if (sectionsError.length > 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          } else if (sectionsError.length === 1) {\r\n            return this.createError({\r\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n            });\r\n          }\r\n        }\r\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n        const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n        if (!isVisible) {\r\n          return true;\r\n        }\r\n\r\n        if (!checkMandatory) {\r\n          return true;\r\n        } else {\r\n          let i;\r\n\r\n          for (i = 0; i < item.ruleMandatory.length; i++) {\r\n            const rule = item.ruleMandatory[i];\r\n            let mandatory;\r\n\r\n            if (rule[\"$or\"]) {\r\n              mandatory = false;\r\n              let j;\r\n              const conditionsArray = rule[\"$or\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (conditionValidation) {\r\n                  mandatory = true;\r\n                  break;\r\n                }\r\n              }\r\n            } else if (rule[\"$and\"]) {\r\n              mandatory = true;\r\n              let j;\r\n              const conditionsArray = rule[\"$and\"];\r\n\r\n              for (j = 0; j < conditionsArray.length; j++) {\r\n                const condition = conditionsArray[j];\r\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                if (!conditionValidation) {\r\n                  mandatory = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!mandatory) {\r\n              return true;\r\n            } else {\r\n              if (value === \"\" || value === undefined) {\r\n                return false;\r\n              } else if (Array.isArray(value)) {\r\n                if (value.length === 0) {\r\n                  return false;\r\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                  return false;\r\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else if (value._immutable !== undefined) {\r\n                if (!value.getCurrentContent().hasText()) {\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } else {\r\n    if (item.occurrences.lowerOccurrences === 0) {\r\n      if (item.occurrences.upperOccurrences === \"*\" || item.occurrences.upperOccurrences === undefined) {\r\n        validationSchema[pathLabel] = Yup.array().test(\"section-validation\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"at-least-one\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          if (!checkMandatory) {\r\n            return true;\r\n          } else {\r\n            let i;\r\n\r\n            for (i = 0; i < item.ruleMandatory.length; i++) {\r\n              const rule = item.ruleMandatory[i];\r\n              let mandatory;\r\n\r\n              if (rule[\"$or\"]) {\r\n                mandatory = false;\r\n                let j;\r\n                const conditionsArray = rule[\"$or\"];\r\n\r\n                for (j = 0; j < conditionsArray.length; j++) {\r\n                  const condition = conditionsArray[j];\r\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                  if (conditionValidation) {\r\n                    mandatory = true;\r\n                    break;\r\n                  }\r\n                }\r\n              } else if (rule[\"$and\"]) {\r\n                mandatory = true;\r\n                let j;\r\n                const conditionsArray = rule[\"$and\"];\r\n\r\n                for (j = 0; j < conditionsArray.length; j++) {\r\n                  const condition = conditionsArray[j];\r\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                  if (!conditionValidation) {\r\n                    mandatory = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (!mandatory) {\r\n                return true;\r\n              } else {\r\n                if (value === \"\" || value === undefined) {\r\n                  return false;\r\n                } else if (Array.isArray(value)) {\r\n                  if (value.length === 0) {\r\n                    return false;\r\n                  } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                    return false;\r\n                  } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                    return false;\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                } else if (value._immutable !== undefined) {\r\n                  if (!value.getCurrentContent().hasText()) {\r\n                    return false;\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                } else {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        validationSchema[pathLabel] = Yup.array().test(\"max-length\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          let writtenFields = 0;\r\n          value.forEach(function (obj) {\r\n            if (obj.value.getCurrentContent().hasText()) {\r\n              writtenFields += 1;\r\n            }\r\n          });\r\n\r\n          if (writtenFields > item.occurrences.upperOccurrences) {\r\n            return this.createError({\r\n              message: \"Campo inválido: limite máximo de \" + item.occurrences.upperOccurrences + \" caixas de texto\"\r\n            });\r\n          }\r\n\r\n          return true;\r\n        }).test(\"section-validation\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"at-least-one\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          if (!checkMandatory) {\r\n            return true;\r\n          } else {\r\n            let i;\r\n\r\n            for (i = 0; i < item.ruleMandatory.length; i++) {\r\n              const rule = item.ruleMandatory[i];\r\n              let mandatory;\r\n\r\n              if (rule[\"$or\"]) {\r\n                mandatory = false;\r\n                let j;\r\n                const conditionsArray = rule[\"$or\"];\r\n\r\n                for (j = 0; j < conditionsArray.length; j++) {\r\n                  const condition = conditionsArray[j];\r\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                  if (conditionValidation) {\r\n                    mandatory = true;\r\n                    break;\r\n                  }\r\n                }\r\n              } else if (rule[\"$and\"]) {\r\n                mandatory = true;\r\n                let j;\r\n                const conditionsArray = rule[\"$and\"];\r\n\r\n                for (j = 0; j < conditionsArray.length; j++) {\r\n                  const condition = conditionsArray[j];\r\n                  const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\r\n                  const conditionValidation = handleConditionValidation(condition, this.parent[path]);\r\n\r\n                  if (!conditionValidation) {\r\n                    mandatory = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (!mandatory) {\r\n                return true;\r\n              } else {\r\n                if (value === \"\" || value === undefined) {\r\n                  return false;\r\n                } else if (Array.isArray(value)) {\r\n                  if (value.length === 0) {\r\n                    return false;\r\n                  } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\r\n                    return false;\r\n                  } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\r\n                    return false;\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                } else if (value._immutable !== undefined) {\r\n                  if (!value.getCurrentContent().hasText()) {\r\n                    return false;\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                } else {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } else if (item.occurrences.lowerOccurrences >= 1) {\r\n      if (item.occurrences.upperOccurrences === \"*\" || item.occurrences.upperOccurrences === undefined) {\r\n        validationSchema[pathLabel] = Yup.array().test(pathLabel, \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n          if (passedRequired) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        }).test(\"min-length\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          let writtenFields = 0;\r\n          value.forEach(function (obj) {\r\n            if (obj.value.getCurrentContent().hasText()) {\r\n              writtenFields += 1;\r\n            }\r\n          });\r\n\r\n          if (writtenFields >= 1) {\r\n            if (writtenFields < item.occurrences.lowerOccurrences) {\r\n              if (item.occurrences.lowerOccurrences === 1) {\r\n                return this.createError({\r\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa de texto\"\r\n                });\r\n              } else {\r\n                return this.createError({\r\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa(s) de texto\"\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }).test(\"section-validation\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"at-least-one\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        validationSchema[pathLabel] = Yup.array().test(pathLabel, \"Campo obrigatório\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\r\n\r\n          if (passedRequired) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        }).test(\"min-length\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          let writtenFields = 0;\r\n          value.forEach(function (obj) {\r\n            if (obj.value.getCurrentContent().hasText()) {\r\n              writtenFields += 1;\r\n            }\r\n          });\r\n\r\n          if (writtenFields >= 1) {\r\n            if (writtenFields < item.occurrences.lowerOccurrences) {\r\n              if (item.occurrences.lowerOccurrences === 1) {\r\n                return this.createError({\r\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa de texto\"\r\n                });\r\n              } else {\r\n                return this.createError({\r\n                  message: \"Campo inválido: limite mínimo de \" + item.occurrences.lowerOccurrences + \" caixa(s) de texto\"\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }).test(\"max-length\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          let writtenFields = 0;\r\n          value.forEach(function (obj) {\r\n            if (obj.value.getCurrentContent().hasText()) {\r\n              writtenFields += 1;\r\n            }\r\n          });\r\n\r\n          if (writtenFields >= 1) {\r\n            if (writtenFields > item.occurrences.upperOccurrences) {\r\n              return this.createError({\r\n                message: \"Campo inválido: limite máximo de \" + item.occurrences.upperOccurrences + \" caixas de texto\"\r\n              });\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }).test(\"section-validation\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        }).test(\"at-least-one\", function (value) {\r\n          const isVisible = handleRules(item, this.parent, \"visibility\");\r\n\r\n          if (!isVisible) {\r\n            return true;\r\n          }\r\n\r\n          const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\r\n\r\n          if (res === true) {\r\n            return true;\r\n          } else {\r\n            const sectionsError = res;\r\n\r\n            if (sectionsError.length > 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            } else if (sectionsError.length === 1) {\r\n              return this.createError({\r\n                message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport { buildTextValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}