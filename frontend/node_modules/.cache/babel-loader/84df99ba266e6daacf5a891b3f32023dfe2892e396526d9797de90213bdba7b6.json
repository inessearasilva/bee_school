{"ast":null,"code":"const handleTasksComposition = (context, jsonTitle, list) => {\n  let value = [];\n  let breaked = false;\n  if (context.composition.compositionPlanning[context.composition.openCompositionPlanningPath] && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle] && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle].indexOf(\"All\") > -1) {\n    value = [...list];\n    breaked = true;\n  } else if (!breaked && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath] && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle]) {\n    value = [...new Set([...context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle], ...list])];\n    breaked = true;\n  } else {\n    value = [...list];\n    breaked = true;\n  }\n  context.composition.handleCompositionPlanning(context.composition.openCompositionPlanningPath, jsonTitle, value);\n};\nexport { handleTasksComposition };","map":{"version":3,"names":["handleTasksComposition","context","jsonTitle","list","value","breaked","composition","compositionPlanning","openCompositionPlanningPath","indexOf","Set","handleCompositionPlanning"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/dist/assets/functions/handleCompositionPlanning/handleTasksComposition.js"],"sourcesContent":["const handleTasksComposition = (context, jsonTitle, list) => {\r\n  let value = [];\r\n  let breaked = false;\r\n\r\n  if (context.composition.compositionPlanning[context.composition.openCompositionPlanningPath] && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle] && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle].indexOf(\"All\") > -1) {\r\n    value = [...list];\r\n    breaked = true;\r\n  } else if (!breaked && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath] && context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle]) {\r\n    value = [...new Set([...context.composition.compositionPlanning[context.composition.openCompositionPlanningPath][jsonTitle], ...list])];\r\n    breaked = true;\r\n  } else {\r\n    value = [...list];\r\n    breaked = true;\r\n  }\r\n\r\n  context.composition.handleCompositionPlanning(context.composition.openCompositionPlanningPath, jsonTitle, value);\r\n};\r\n\r\nexport { handleTasksComposition };"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,CAACC,OAAO,EAAEC,SAAS,EAAEC,IAAI,KAAK;EAC3D,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,OAAO,GAAG,KAAK;EAEnB,IAAIJ,OAAO,CAACK,WAAW,CAACC,mBAAmB,CAACN,OAAO,CAACK,WAAW,CAACE,2BAA2B,CAAC,IAAIP,OAAO,CAACK,WAAW,CAACC,mBAAmB,CAACN,OAAO,CAACK,WAAW,CAACE,2BAA2B,CAAC,CAACN,SAAS,CAAC,IAAID,OAAO,CAACK,WAAW,CAACC,mBAAmB,CAACN,OAAO,CAACK,WAAW,CAACE,2BAA2B,CAAC,CAACN,SAAS,CAAC,CAACO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IAC9TL,KAAK,GAAG,CAAC,GAAGD,IAAI,CAAC;IACjBE,OAAO,GAAG,IAAI;EAChB,CAAC,MAAM,IAAI,CAACA,OAAO,IAAIJ,OAAO,CAACK,WAAW,CAACC,mBAAmB,CAACN,OAAO,CAACK,WAAW,CAACE,2BAA2B,CAAC,IAAIP,OAAO,CAACK,WAAW,CAACC,mBAAmB,CAACN,OAAO,CAACK,WAAW,CAACE,2BAA2B,CAAC,CAACN,SAAS,CAAC,EAAE;IACtNE,KAAK,GAAG,CAAC,GAAG,IAAIM,GAAG,CAAC,CAAC,GAAGT,OAAO,CAACK,WAAW,CAACC,mBAAmB,CAACN,OAAO,CAACK,WAAW,CAACE,2BAA2B,CAAC,CAACN,SAAS,CAAC,EAAE,GAAGC,IAAI,CAAC,CAAC,CAAC;IACvIE,OAAO,GAAG,IAAI;EAChB,CAAC,MAAM;IACLD,KAAK,GAAG,CAAC,GAAGD,IAAI,CAAC;IACjBE,OAAO,GAAG,IAAI;EAChB;EAEAJ,OAAO,CAACK,WAAW,CAACK,yBAAyB,CAACV,OAAO,CAACK,WAAW,CAACE,2BAA2B,EAAEN,SAAS,EAAEE,KAAK,CAAC;AAClH,CAAC;AAED,SAASJ,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}