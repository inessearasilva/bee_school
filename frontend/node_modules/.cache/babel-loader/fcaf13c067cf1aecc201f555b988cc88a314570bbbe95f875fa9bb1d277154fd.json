{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ines_\\\\bee_v2\\\\bee_school\\\\frontend\\\\src\\\\views\\\\dashboard\\\\All Topics.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Chart from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Record = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n    children: props.record.engagement_metrics.total_tweets\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Negative: \", props.record.sentiment_count.Negative]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Neutral: \", props.record.sentiment_count.Neutral]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Positive: \", props.record.sentiment_count.Positive]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n_c = Record;\nexport default function Sentiment() {\n  _s();\n  const [records, setRecords] = useState([]);\n  const chartRef = useRef(null);\n\n  // This method fetches the records from the database.\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:5050/statistics_general/`);\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const records = await response.json();\n      setRecords(records);\n    }\n    getRecords();\n    return;\n  }, []);\n  useEffect(() => {\n    // Create the chart once the records are fetched\n    if (records.length > 0) {\n      const totalTweets = records.map(record => record.engagement_metrics.total_tweets);\n      const negativeCount = records.map(record => record.sentiment_count.Negative / record.engagement_metrics.total_tweets * 100);\n      const neutralCount = records.map(record => record.sentiment_count.Neutral / record.engagement_metrics.total_tweets * 100);\n      const positiveCount = records.map(record => record.sentiment_count.Positive / record.engagement_metrics.total_tweets * 100);\n      const chartData = {\n        labels: records.map(record => record._id),\n        datasets: [{\n          label: \"Negative\",\n          data: negativeCount,\n          backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n        }, {\n          label: \"Neutral\",\n          data: neutralCount,\n          backgroundColor: \"rgba(54, 162, 235, 0.5)\"\n        }, {\n          label: \"Positive\",\n          data: positiveCount,\n          backgroundColor: \"rgba(75, 192, 192, 0.5)\"\n        }]\n      };\n      const chartOptions = {\n        scales: {\n          x: {\n            display: false,\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            display: false,\n            grid: {\n              display: false\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                const dataset = context.dataset;\n                const index = context.dataIndex;\n                const value = dataset.data[index];\n                const total = dataset.data.reduce((a, b) => a + b, 0);\n                const percentage = (value / total * 100).toFixed(2) + \"%\";\n                return `${value} (${percentage})`;\n              }\n            }\n          }\n        },\n        indexAxis: \"y\",\n        elements: {\n          bar: {\n            borderWidth: 1,\n            borderRadius: 5,\n            barPercentage: 0.8\n          }\n        }\n      };\n      const ctx = chartRef.current.getContext(\"2d\");\n      new Chart(ctx, {\n        type: \"horizontalBar\",\n        data: chartData,\n        options: chartOptions\n      });\n    }\n  }, [records]);\n\n  // This method will map out the records\n  function recordList() {\n    return records.map(record => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: record\n      }, record._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 14\n      }, this);\n    });\n  }\n\n  // This following section will display the records and the chart\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Total Tweets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), recordList(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        width: \"400px\",\n        height: \"300px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(Sentiment, \"UHTeWphlWA7vtOIQFWD5QMRXiVU=\");\n_c2 = Sentiment;\nvar _c, _c2;\n$RefreshReg$(_c, \"Record\");\n$RefreshReg$(_c2, \"Sentiment\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Chart","Record","props","record","engagement_metrics","total_tweets","sentiment_count","Negative","Neutral","Positive","Sentiment","records","setRecords","chartRef","getRecords","response","fetch","ok","message","statusText","window","alert","json","length","totalTweets","map","negativeCount","neutralCount","positiveCount","chartData","labels","_id","datasets","label","data","backgroundColor","chartOptions","scales","x","display","grid","y","plugins","legend","tooltip","callbacks","context","dataset","index","dataIndex","value","total","reduce","a","b","percentage","toFixed","indexAxis","elements","bar","borderWidth","borderRadius","barPercentage","ctx","current","getContext","type","options","recordList","width","height"],"sources":["C:/Users/ines_/bee_v2/bee_school/frontend/src/views/dashboard/All Topics.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nconst Record = (props) => (\r\n  <div>\r\n    <p>{props.record.engagement_metrics.total_tweets}</p>\r\n    <p>Negative: {props.record.sentiment_count.Negative}</p>\r\n    <p>Neutral: {props.record.sentiment_count.Neutral}</p>\r\n    <p>Positive: {props.record.sentiment_count.Positive}</p>\r\n  </div>\r\n);\r\n\r\nexport default function Sentiment() {\r\n  const [records, setRecords] = useState([]);\r\n  const chartRef = useRef(null);\r\n\r\n  // This method fetches the records from the database.\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      const response = await fetch(`http://localhost:5050/statistics_general/`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const records = await response.json();\r\n      setRecords(records);\r\n    }\r\n\r\n    getRecords();\r\n\r\n    return;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Create the chart once the records are fetched\r\n    if (records.length > 0) {\r\n      const totalTweets = records.map(\r\n        (record) => record.engagement_metrics.total_tweets\r\n      );\r\n      const negativeCount = records.map(\r\n        (record) =>\r\n          (record.sentiment_count.Negative /\r\n            record.engagement_metrics.total_tweets) *\r\n          100\r\n      );\r\n      const neutralCount = records.map(\r\n        (record) =>\r\n          (record.sentiment_count.Neutral /\r\n            record.engagement_metrics.total_tweets) *\r\n          100\r\n      );\r\n      const positiveCount = records.map(\r\n        (record) =>\r\n          (record.sentiment_count.Positive /\r\n            record.engagement_metrics.total_tweets) *\r\n          100\r\n      );\r\n\r\n      const chartData = {\r\n        labels: records.map((record) => record._id),\r\n        datasets: [\r\n          {\r\n            label: \"Negative\",\r\n            data: negativeCount,\r\n            backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n          },\r\n          {\r\n            label: \"Neutral\",\r\n            data: neutralCount,\r\n            backgroundColor: \"rgba(54, 162, 235, 0.5)\",\r\n          },\r\n          {\r\n            label: \"Positive\",\r\n            data: positiveCount,\r\n            backgroundColor: \"rgba(75, 192, 192, 0.5)\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      const chartOptions = {\r\n        scales: {\r\n          x: {\r\n            display: false,\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            display: false,\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: false,\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (context) {\r\n                const dataset = context.dataset;\r\n                const index = context.dataIndex;\r\n                const value = dataset.data[index];\r\n      \r\n                const total = dataset.data.reduce((a, b) => a + b, 0);\r\n                const percentage = ((value / total) * 100).toFixed(2) + \"%\";\r\n      \r\n                return `${value} (${percentage})`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n        indexAxis: \"y\",\r\n        elements: {\r\n          bar: {\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            barPercentage: 0.8,\r\n          },\r\n        },\r\n      };\r\n      \r\n      \r\n      \r\n      \r\n\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      new Chart(ctx, {\r\n        type: \"horizontalBar\",\r\n        data: chartData,\r\n        options: chartOptions,\r\n      });\r\n    }\r\n  }, [records]);\r\n\r\n  // This method will map out the records\r\n  function recordList() {\r\n    return records.map((record) => {\r\n      return <Record record={record} key={record._id} />;\r\n    });\r\n  }\r\n\r\n  // This following section will display the records and the chart\r\n  return (\r\n    <div>\r\n      <h3>Total Tweets</h3>\r\n      {recordList()}\r\n      <div className=\"chart-container\" style={{ width: \"400px\", height: \"300px\" }}>\r\n        <canvas ref={chartRef}></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}