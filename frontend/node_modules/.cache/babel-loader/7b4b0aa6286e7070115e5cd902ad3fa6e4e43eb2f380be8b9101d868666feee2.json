{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\nvar EditorState = require(\"./EditorState\");\nvar getContentStateFragment = require(\"./getContentStateFragment\");\n/**\r\n * Transpose the characters on either side of a collapsed cursor, or\r\n * if the cursor is at the end of the block, transpose the last two\r\n * characters.\r\n */\n\nfunction keyCommandTransposeCharacters(editorState) {\n  var selection = editorState.getSelection();\n  if (!selection.isCollapsed()) {\n    return editorState;\n  }\n  var offset = selection.getAnchorOffset();\n  if (offset === 0) {\n    return editorState;\n  }\n  var blockKey = selection.getAnchorKey();\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var length = block.getLength(); // Nothing to transpose if there aren't two characters.\n\n  if (length <= 1) {\n    return editorState;\n  }\n  var removalRange;\n  var finalSelection;\n  if (offset === length) {\n    // The cursor is at the end of the block. Swap the last two characters.\n    removalRange = selection.set('anchorOffset', offset - 1);\n    finalSelection = selection;\n  } else {\n    removalRange = selection.set('focusOffset', offset + 1);\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\n  } // Extract the character to move as a fragment. This preserves its\n  // styling and entity, if any.\n\n  var movedFragment = getContentStateFragment(content, removalRange);\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward'); // After the removal, the insertion target is one character back.\n\n  var selectionAfter = afterRemoval.getSelectionAfter();\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\n  var targetRange = selectionAfter.merge({\n    anchorOffset: targetOffset,\n    focusOffset: targetOffset\n  });\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\n  return EditorState.acceptSelection(newEditorState, finalSelection);\n}\nmodule.exports = keyCommandTransposeCharacters;","map":{"version":3,"names":["DraftModifier","require","EditorState","getContentStateFragment","keyCommandTransposeCharacters","editorState","selection","getSelection","isCollapsed","offset","getAnchorOffset","blockKey","getAnchorKey","content","getCurrentContent","block","getBlockForKey","length","getLength","removalRange","finalSelection","set","movedFragment","afterRemoval","removeRange","selectionAfter","getSelectionAfter","targetOffset","targetRange","merge","anchorOffset","focusOffset","afterInsert","replaceWithFragment","newEditorState","push","acceptSelection","module","exports"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/keyCommandTransposeCharacters.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar DraftModifier = require(\"./DraftModifier\");\r\n\r\nvar EditorState = require(\"./EditorState\");\r\n\r\nvar getContentStateFragment = require(\"./getContentStateFragment\");\r\n/**\r\n * Transpose the characters on either side of a collapsed cursor, or\r\n * if the cursor is at the end of the block, transpose the last two\r\n * characters.\r\n */\r\n\r\n\r\nfunction keyCommandTransposeCharacters(editorState) {\r\n  var selection = editorState.getSelection();\r\n\r\n  if (!selection.isCollapsed()) {\r\n    return editorState;\r\n  }\r\n\r\n  var offset = selection.getAnchorOffset();\r\n\r\n  if (offset === 0) {\r\n    return editorState;\r\n  }\r\n\r\n  var blockKey = selection.getAnchorKey();\r\n  var content = editorState.getCurrentContent();\r\n  var block = content.getBlockForKey(blockKey);\r\n  var length = block.getLength(); // Nothing to transpose if there aren't two characters.\r\n\r\n  if (length <= 1) {\r\n    return editorState;\r\n  }\r\n\r\n  var removalRange;\r\n  var finalSelection;\r\n\r\n  if (offset === length) {\r\n    // The cursor is at the end of the block. Swap the last two characters.\r\n    removalRange = selection.set('anchorOffset', offset - 1);\r\n    finalSelection = selection;\r\n  } else {\r\n    removalRange = selection.set('focusOffset', offset + 1);\r\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\r\n  } // Extract the character to move as a fragment. This preserves its\r\n  // styling and entity, if any.\r\n\r\n\r\n  var movedFragment = getContentStateFragment(content, removalRange);\r\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward'); // After the removal, the insertion target is one character back.\r\n\r\n  var selectionAfter = afterRemoval.getSelectionAfter();\r\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\r\n  var targetRange = selectionAfter.merge({\r\n    anchorOffset: targetOffset,\r\n    focusOffset: targetOffset\r\n  });\r\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\r\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\r\n  return EditorState.acceptSelection(newEditorState, finalSelection);\r\n}\r\n\r\nmodule.exports = keyCommandTransposeCharacters;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE9C,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AAClE;AACA;AACA;AACA;AACA;;AAGA,SAASG,6BAA6B,CAACC,WAAW,EAAE;EAClD,IAAIC,SAAS,GAAGD,WAAW,CAACE,YAAY,EAAE;EAE1C,IAAI,CAACD,SAAS,CAACE,WAAW,EAAE,EAAE;IAC5B,OAAOH,WAAW;EACpB;EAEA,IAAII,MAAM,GAAGH,SAAS,CAACI,eAAe,EAAE;EAExC,IAAID,MAAM,KAAK,CAAC,EAAE;IAChB,OAAOJ,WAAW;EACpB;EAEA,IAAIM,QAAQ,GAAGL,SAAS,CAACM,YAAY,EAAE;EACvC,IAAIC,OAAO,GAAGR,WAAW,CAACS,iBAAiB,EAAE;EAC7C,IAAIC,KAAK,GAAGF,OAAO,CAACG,cAAc,CAACL,QAAQ,CAAC;EAC5C,IAAIM,MAAM,GAAGF,KAAK,CAACG,SAAS,EAAE,CAAC,CAAC;;EAEhC,IAAID,MAAM,IAAI,CAAC,EAAE;IACf,OAAOZ,WAAW;EACpB;EAEA,IAAIc,YAAY;EAChB,IAAIC,cAAc;EAElB,IAAIX,MAAM,KAAKQ,MAAM,EAAE;IACrB;IACAE,YAAY,GAAGb,SAAS,CAACe,GAAG,CAAC,cAAc,EAAEZ,MAAM,GAAG,CAAC,CAAC;IACxDW,cAAc,GAAGd,SAAS;EAC5B,CAAC,MAAM;IACLa,YAAY,GAAGb,SAAS,CAACe,GAAG,CAAC,aAAa,EAAEZ,MAAM,GAAG,CAAC,CAAC;IACvDW,cAAc,GAAGD,YAAY,CAACE,GAAG,CAAC,cAAc,EAAEZ,MAAM,GAAG,CAAC,CAAC;EAC/D,CAAC,CAAC;EACF;;EAGA,IAAIa,aAAa,GAAGnB,uBAAuB,CAACU,OAAO,EAAEM,YAAY,CAAC;EAClE,IAAII,YAAY,GAAGvB,aAAa,CAACwB,WAAW,CAACX,OAAO,EAAEM,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC;;EAEjF,IAAIM,cAAc,GAAGF,YAAY,CAACG,iBAAiB,EAAE;EACrD,IAAIC,YAAY,GAAGF,cAAc,CAACf,eAAe,EAAE,GAAG,CAAC;EACvD,IAAIkB,WAAW,GAAGH,cAAc,CAACI,KAAK,CAAC;IACrCC,YAAY,EAAEH,YAAY;IAC1BI,WAAW,EAAEJ;EACf,CAAC,CAAC;EACF,IAAIK,WAAW,GAAGhC,aAAa,CAACiC,mBAAmB,CAACV,YAAY,EAAEK,WAAW,EAAEN,aAAa,CAAC;EAC7F,IAAIY,cAAc,GAAGhC,WAAW,CAACiC,IAAI,CAAC9B,WAAW,EAAE2B,WAAW,EAAE,iBAAiB,CAAC;EAClF,OAAO9B,WAAW,CAACkC,eAAe,CAACF,cAAc,EAAEd,cAAc,CAAC;AACpE;AAEAiB,MAAM,CAACC,OAAO,GAAGlC,6BAA6B"},"metadata":{},"sourceType":"script","externalDependencies":[]}