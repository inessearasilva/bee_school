{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ines_\\\\bee_v2\\\\bee_school\\\\frontend\\\\src\\\\views\\\\dashboard\\\\Overtime.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CanvasJSReact from '@canvasjs/react-charts';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nconst LineChart = _ref => {\n  let {\n    record\n  } = _ref;\n  const formatData = record => {\n    let categories = [\"Total\", \"Negative\", \"Positive\", \"Neutral\"];\n    let formattedData = {};\n    categories.forEach(category => {\n      formattedData[category] = [];\n      for (let key in record) {\n        // Check if the property format matches a date pattern\n        if (/^\\d{2}-\\d{2}-\\d{4}$/.test(key) && record[key][category]) {\n          // If it's a date, push the respective data to the category array\n          formattedData[category].push({\n            x: new Date(key.split('-').reverse().join('-')),\n            y: record[key][category]\n          });\n        }\n      }\n    });\n    return formattedData;\n  };\n  const formattedRecord = formatData(record);\n  const options = {\n    theme: \"light2\",\n    animationEnabled: true,\n    width: 550,\n    title: {\n      text: `${record.topic}`\n    },\n    axisX: {\n      title: \"Dates\"\n    },\n    axisY: {\n      title: \"Counts\",\n      titleFontColor: \"#6D78AD\",\n      lineColor: \"#6D78AD\",\n      labelFontColor: \"#6D78AD\",\n      tickColor: \"#6D78AD\"\n    },\n    toolTip: {\n      shared: true\n    },\n    data: [{\n      type: \"spline\",\n      name: \"Total\",\n      showInLegend: true,\n      xValueFormatString: \"DD MMM YYYY\",\n      yValueFormatString: \"#,##0\",\n      dataPoints: formattedRecord.Total\n    }, {\n      type: \"spline\",\n      name: \"Positive\",\n      showInLegend: true,\n      xValueFormatString: \"DD MMM YYYY\",\n      yValueFormatString: \"#,##0\",\n      dataPoints: formattedRecord.Positive\n    }, {\n      type: \"spline\",\n      name: \"Neutral\",\n      showInLegend: true,\n      xValueFormatString: \"DD MMM YYYY\",\n      yValueFormatString: \"#,##0\",\n      dataPoints: formattedRecord.Neutral\n    }, {\n      type: \"spline\",\n      name: \"Negative\",\n      showInLegend: true,\n      xValueFormatString: \"DD MMM YYYY\",\n      yValueFormatString: \"#,##0\",\n      dataPoints: formattedRecord.Negative\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(CanvasJSChart, {\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_c = LineChart;\nexport default function LineChartsContainer() {\n  _s();\n  const {\n    topic\n  } = useParams();\n  const [records, setRecords] = useState([]);\n  useEffect(() => {\n    async function getRecords() {\n      try {\n        const response = await fetch(\"http://localhost:5050/general_info/\");\n        if (!response.ok) {\n          throw new Error(`An error occurred: ${response.statusText}`);\n        }\n        const records = await response.json();\n        const matchingRecords = records.filter(r => r.topic === topic);\n        setRecords(matchingRecords);\n      } catch (error) {\n        window.alert(error.message);\n      }\n    }\n    getRecords();\n  }, [topic]);\n  if (!records.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No record found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: records.map(record => /*#__PURE__*/_jsxDEV(LineChart, {\n      record: record\n    }, record.topic, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(LineChartsContainer, \"0cszbwZi2xueJxbfCf6k3RLpLxE=\", false, function () {\n  return [useParams];\n});\n_c2 = LineChartsContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"LineChart\");\n$RefreshReg$(_c2, \"LineChartsContainer\");","map":{"version":3,"names":["React","useEffect","useState","CanvasJSReact","useParams","CanvasJS","CanvasJSChart","LineChart","record","formatData","categories","formattedData","forEach","category","key","test","push","x","Date","split","reverse","join","y","formattedRecord","options","theme","animationEnabled","width","title","text","topic","axisX","axisY","titleFontColor","lineColor","labelFontColor","tickColor","toolTip","shared","data","type","name","showInLegend","xValueFormatString","yValueFormatString","dataPoints","Total","Positive","Neutral","Negative","LineChartsContainer","records","setRecords","getRecords","response","fetch","ok","Error","statusText","json","matchingRecords","filter","r","error","window","alert","message","length","map"],"sources":["C:/Users/ines_/bee_v2/bee_school/frontend/src/views/dashboard/Overtime.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CanvasJSReact from '@canvasjs/react-charts';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nconst LineChart = ({ record }) => {\r\n  const formatData = (record) => {\r\n    let categories = [\"Total\", \"Negative\", \"Positive\", \"Neutral\"];\r\n    let formattedData = {};\r\n\r\n    categories.forEach(category => {\r\n        formattedData[category] = [];\r\n        for (let key in record) {\r\n            // Check if the property format matches a date pattern\r\n            if (/^\\d{2}-\\d{2}-\\d{4}$/.test(key) && record[key][category]) {\r\n                // If it's a date, push the respective data to the category array\r\n                formattedData[category].push({\r\n                    x: new Date(key.split('-').reverse().join('-')),\r\n                    y: record[key][category],\r\n                });\r\n            }\r\n        }\r\n    });\r\n    return formattedData;\r\n};\r\n\r\nconst formattedRecord = formatData(record);\r\n\r\nconst options = {\r\n    theme: \"light2\",\r\n    animationEnabled: true,\r\n    width: 550,\r\n    title: {\r\n        text: `${record.topic}`\r\n    },\r\n    axisX: {\r\n        title: \"Dates\"\r\n    },\r\n    axisY: {\r\n        title: \"Counts\",\r\n        titleFontColor: \"#6D78AD\",\r\n        lineColor: \"#6D78AD\",\r\n        labelFontColor: \"#6D78AD\",\r\n        tickColor: \"#6D78AD\"\r\n    },\r\n    toolTip: {\r\n        shared: true\r\n    },\r\n    data: [\r\n        {\r\n            type: \"spline\",\r\n            name: \"Total\",\r\n            showInLegend: true,\r\n            xValueFormatString: \"DD MMM YYYY\",\r\n            yValueFormatString: \"#,##0\",\r\n            dataPoints: formattedRecord.Total\r\n        },\r\n        {\r\n            type: \"spline\",\r\n            name: \"Positive\",\r\n            showInLegend: true,\r\n            xValueFormatString: \"DD MMM YYYY\",\r\n            yValueFormatString: \"#,##0\",\r\n            dataPoints: formattedRecord.Positive\r\n        },\r\n        {\r\n            type: \"spline\",\r\n            name: \"Neutral\",\r\n            showInLegend: true,\r\n            xValueFormatString: \"DD MMM YYYY\",\r\n            yValueFormatString: \"#,##0\",\r\n            dataPoints: formattedRecord.Neutral\r\n        },\r\n        {\r\n            type: \"spline\",\r\n            name: \"Negative\",\r\n            showInLegend: true,\r\n            xValueFormatString: \"DD MMM YYYY\",\r\n            yValueFormatString: \"#,##0\",\r\n            dataPoints: formattedRecord.Negative\r\n        }\r\n    ]\r\n};\r\n\r\n    return (\r\n        <CanvasJSChart options={options} />\r\n    );\r\n};\r\n\r\nexport default function LineChartsContainer() {\r\n    const { topic } = useParams();\r\n    const [records, setRecords] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getRecords() {\r\n            try {\r\n                const response = await fetch(\"http://localhost:5050/general_info/\");\r\n                if (!response.ok) {\r\n                    throw new Error(`An error occurred: ${response.statusText}`);\r\n                }\r\n                const records = await response.json();\r\n                const matchingRecords = records.filter((r) => r.topic === topic);\r\n                setRecords(matchingRecords);\r\n            } catch (error) {\r\n                window.alert(error.message);\r\n            }\r\n        }\r\n\r\n        getRecords();\r\n    }, [topic]);\r\n\r\n    if (!records.length) {\r\n        return <div>No record found</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {records.map((record) => (\r\n                <LineChart record={record} key={record.topic} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}