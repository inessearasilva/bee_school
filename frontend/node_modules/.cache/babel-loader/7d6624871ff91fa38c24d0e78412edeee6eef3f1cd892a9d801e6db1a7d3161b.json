{"ast":null,"code":"import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildCountRangeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  let pathLabelArray = pathLabel.split(\"-\");\n  let pathArray = [...pathLabelArray];\n  pathArray.pop();\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\n      pathArray.push(\"start\");\n      let pathLabelStart = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let startValue = this.parent[pathLabelStart];\n        if (value < startValue) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\n      pathArray.push(\"end\");\n      let pathLabelEnd = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endValue = this.parent[pathLabelEnd];\n        if (value > endValue) {\n          return false;\n        }\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\n      pathArray.push(\"start\");\n      let pathLabelStart = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let field = this.parent[pathLabelStart];\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let startValue = this.parent[pathLabelStart];\n        if (value < startValue) {\n          return false;\n        }\n        return true;\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\n      pathArray.push(\"end\");\n      let pathLabelEnd = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let field = this.parent[pathLabelEnd];\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        let endValue = this.parent[pathLabelEnd];\n        if (value > endValue) {\n          return false;\n        }\n        return true;\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n        if (!isVisible) {\n          return true;\n        }\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  }\n};\nexport { buildCountRangeValidation };","map":{"version":3,"names":["Yup","handleIfMandatoryValidation","handleConditionValidation","handleRules","handleRequiredValidation","handleRequiredSection","buildCountRangeValidation","item","pathLabel","cardinalityObject","validationSchema","itemSection","sectionValidation","multipleSections","checkMandatory","pathLabelArray","split","pathArray","pop","occurrences","lowerOccurrences","upperOccurrences","length","push","pathLabelStart","join","number","test","value","isVisible","parent","passedRequired","startValue","res","sectionsError","createError","message","toString","toLocaleLowerCase","pathLabelEnd","endValue","field","undefined","i","ruleMandatory","rule","mandatory","j","conditionsArray","condition","path","conditionValidation","Array","isArray","identifierId","filter","obj","textId","getCurrentContent","hasText","_immutable"],"sources":["C:/Users/ines_/fisiosys/frontend/node_modules/protected-aidaforms/dist/containers/Form/FormValidation/BuildCountRangeValidation/BuildCountRangeValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\nimport { handleIfMandatoryValidation } from \"../../../../assets/functions/HandleRules/handleIfMandatoryValidation\";\nimport { handleConditionValidation } from \"../../../../assets/functions/HandleRules/handleConditionValidation\";\nimport { handleRules } from \"../../../../assets/functions/HandleRules/handleRules\";\nimport { handleRequiredValidation } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredValidation\";\nimport { handleRequiredSection } from \"../../../../assets/functions/HandleSectionValidation/handleRequiredSection\"; // ATENÇÃO: CADA NOVA VALIDAÇÃO DEVE VER SE O CAMPO É VISÍVEL!\n\nconst buildCountRangeValidation = (item, pathLabel, cardinalityObject, validationSchema, itemSection, sectionValidation, multipleSections) => {\n  const checkMandatory = handleIfMandatoryValidation(item);\n  let pathLabelArray = pathLabel.split(\"-\");\n  let pathArray = [...pathLabelArray];\n  pathArray.pop();\n\n  if (item.occurrences.lowerOccurrences === 1 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\n      pathArray.push(\"start\");\n      let pathLabelStart = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let startValue = this.parent[pathLabelStart];\n\n        if (value < startValue) {\n          return false;\n        }\n\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\n      pathArray.push(\"end\");\n      let pathLabelEnd = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(\"required\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const passedRequired = handleRequiredValidation(value, this.parent, itemSection);\n\n        if (passedRequired) {\n          return true;\n        } else {\n          return false;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let endValue = this.parent[pathLabelEnd];\n\n        if (value > endValue) {\n          return false;\n        }\n\n        return true;\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  } else if (item.occurrences.lowerOccurrences === 0 && item.occurrences.upperOccurrences === 1) {\n    if (pathLabelArray[pathLabelArray.length - 1] === \"end\") {\n      pathArray.push(\"start\");\n      let pathLabelStart = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let field = this.parent[pathLabelStart];\n\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(pathLabel + \"superiorigual\", \"O valor máximo deve ser superior ou igual ao valor mínimo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let startValue = this.parent[pathLabelStart];\n\n        if (value < startValue) {\n          return false;\n        }\n\n        return true;\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    } else if (pathLabelArray[pathLabelArray.length - 1] === \"start\") {\n      pathArray.push(\"end\");\n      let pathLabelEnd = pathArray.join(\"-\");\n      validationSchema[pathLabel] = Yup.number().test(pathLabel, \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let field = this.parent[pathLabelEnd];\n\n        if (field === undefined && value === undefined || field !== undefined && value !== undefined) {\n          return true;\n        } else if (field !== undefined && value === undefined) {\n          return false;\n        } else if (field === undefined && value !== undefined) {\n          return true;\n        }\n      }).test(pathLabel + \"inferiorigual\", \"O valor mínimo deve ser inferior ou igual ao valor máximo\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        let endValue = this.parent[pathLabelEnd];\n\n        if (value > endValue) {\n          return false;\n        }\n\n        return true;\n      }).test(\"at-least-one\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(cardinalityObject, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      }).test(\"rule-mandatory\", \"Campo obrigatório\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        if (!checkMandatory) {\n          return true;\n        } else {\n          let i;\n\n          for (i = 0; i < item.ruleMandatory.length; i++) {\n            const rule = item.ruleMandatory[i];\n            let mandatory;\n\n            if (rule[\"$or\"]) {\n              mandatory = false;\n              let j;\n              const conditionsArray = rule[\"$or\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (conditionValidation) {\n                  mandatory = true;\n                  break;\n                }\n              }\n            } else if (rule[\"$and\"]) {\n              mandatory = true;\n              let j;\n              const conditionsArray = rule[\"$and\"];\n\n              for (j = 0; j < conditionsArray.length; j++) {\n                const condition = conditionsArray[j];\n                const path = condition[\"$ItemPath\"].split(\".\").join(\"-\");\n                const conditionValidation = handleConditionValidation(condition, this.parent[path]);\n\n                if (!conditionValidation) {\n                  mandatory = false;\n                  break;\n                }\n              }\n            }\n\n            if (!mandatory) {\n              return true;\n            } else {\n              if (value === \"\" || value === undefined) {\n                return false;\n              } else if (Array.isArray(value)) {\n                if (value.length === 0) {\n                  return false;\n                } else if (value[0].identifierId !== undefined && value.filter(obj => obj.value !== \"\").length === 0) {\n                  return false;\n                } else if (value[0].textId !== undefined && value.filter(obj => obj.value.getCurrentContent().hasText()).length === 0) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else if (value._immutable !== undefined) {\n                if (!value.getCurrentContent().hasText()) {\n                  return false;\n                } else {\n                  return true;\n                }\n              } else {\n                return true;\n              }\n            }\n          }\n        }\n      }).test(\"section-validation\", function (value) {\n        const isVisible = handleRules(item, this.parent, \"visibility\");\n\n        if (!isVisible) {\n          return true;\n        }\n\n        const res = handleRequiredSection(sectionValidation, pathLabel, this.parent, multipleSections);\n\n        if (res === true) {\n          return true;\n        } else {\n          const sectionsError = res;\n\n          if (sectionsError.length > 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos nas secções: \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          } else if (sectionsError.length === 1) {\n            return this.createError({\n              message: \"Precisa de preencher mais campos na secção \" + sectionsError.toString().toLocaleLowerCase()\n            });\n          }\n        }\n      });\n    }\n  }\n};\n\nexport { buildCountRangeValidation };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}