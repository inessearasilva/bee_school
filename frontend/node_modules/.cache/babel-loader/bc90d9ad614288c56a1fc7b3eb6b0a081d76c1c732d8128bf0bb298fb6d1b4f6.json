{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\nvar EditorState = require(\"./EditorState\");\nvar Style = require(\"fbjs/lib/Style\");\nvar getFragmentFromSelection = require(\"./getFragmentFromSelection\");\nvar getScrollPosition = require(\"fbjs/lib/getScrollPosition\");\nvar isNode = require(\"./isInstanceOfNode\");\n/**\r\n * On `cut` events, native behavior is allowed to occur so that the system\r\n * clipboard is set properly. This means that we need to take steps to recover\r\n * the editor DOM state after the `cut` has occurred in order to maintain\r\n * control of the component.\r\n *\r\n * In addition, we can keep a copy of the removed fragment, including all\r\n * styles and entities, for use as an internal paste.\r\n */\n\nfunction editOnCut(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n  var element = e.target;\n  var scrollPosition; // No selection, so there's nothing to cut.\n\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  } // Track the current scroll position so that it can be forced back in place\n  // after the editor regains control of the DOM.\n\n  if (isNode(element)) {\n    var node = element;\n    scrollPosition = getScrollPosition(Style.getScrollParent(node));\n  }\n  var fragment = getFragmentFromSelection(editorState);\n  editor.setClipboard(fragment); // Set `cut` mode to disable all event handling temporarily.\n\n  editor.setMode('cut'); // Let native `cut` behavior occur, then recover control.\n\n  setTimeout(function () {\n    editor.restoreEditorDOM(scrollPosition);\n    editor.exitCurrentMode();\n    editor.update(removeFragment(editorState));\n  }, 0);\n}\nfunction removeFragment(editorState) {\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\n  return EditorState.push(editorState, newContent, 'remove-range');\n}\nmodule.exports = editOnCut;","map":{"version":3,"names":["DraftModifier","require","EditorState","Style","getFragmentFromSelection","getScrollPosition","isNode","editOnCut","editor","e","editorState","_latestEditorState","selection","getSelection","element","target","scrollPosition","isCollapsed","preventDefault","node","getScrollParent","fragment","setClipboard","setMode","setTimeout","restoreEditorDOM","exitCurrentMode","update","removeFragment","newContent","removeRange","getCurrentContent","push","module","exports"],"sources":["C:/Users/ines_/Desktop/fisiosys/fisiosys/frontend/node_modules/protected-aidaforms/node_modules/draft-js/lib/editOnCut.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar DraftModifier = require(\"./DraftModifier\");\r\n\r\nvar EditorState = require(\"./EditorState\");\r\n\r\nvar Style = require(\"fbjs/lib/Style\");\r\n\r\nvar getFragmentFromSelection = require(\"./getFragmentFromSelection\");\r\n\r\nvar getScrollPosition = require(\"fbjs/lib/getScrollPosition\");\r\n\r\nvar isNode = require(\"./isInstanceOfNode\");\r\n/**\r\n * On `cut` events, native behavior is allowed to occur so that the system\r\n * clipboard is set properly. This means that we need to take steps to recover\r\n * the editor DOM state after the `cut` has occurred in order to maintain\r\n * control of the component.\r\n *\r\n * In addition, we can keep a copy of the removed fragment, including all\r\n * styles and entities, for use as an internal paste.\r\n */\r\n\r\n\r\nfunction editOnCut(editor, e) {\r\n  var editorState = editor._latestEditorState;\r\n  var selection = editorState.getSelection();\r\n  var element = e.target;\r\n  var scrollPosition; // No selection, so there's nothing to cut.\r\n\r\n  if (selection.isCollapsed()) {\r\n    e.preventDefault();\r\n    return;\r\n  } // Track the current scroll position so that it can be forced back in place\r\n  // after the editor regains control of the DOM.\r\n\r\n\r\n  if (isNode(element)) {\r\n    var node = element;\r\n    scrollPosition = getScrollPosition(Style.getScrollParent(node));\r\n  }\r\n\r\n  var fragment = getFragmentFromSelection(editorState);\r\n  editor.setClipboard(fragment); // Set `cut` mode to disable all event handling temporarily.\r\n\r\n  editor.setMode('cut'); // Let native `cut` behavior occur, then recover control.\r\n\r\n  setTimeout(function () {\r\n    editor.restoreEditorDOM(scrollPosition);\r\n    editor.exitCurrentMode();\r\n    editor.update(removeFragment(editorState));\r\n  }, 0);\r\n}\r\n\r\nfunction removeFragment(editorState) {\r\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\r\n  return EditorState.push(editorState, newContent, 'remove-range');\r\n}\r\n\r\nmodule.exports = editOnCut;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE9C,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAErC,IAAIG,wBAAwB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AAEpE,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,4BAA4B,CAAC;AAE7D,IAAIK,MAAM,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASM,SAAS,CAACC,MAAM,EAAEC,CAAC,EAAE;EAC5B,IAAIC,WAAW,GAAGF,MAAM,CAACG,kBAAkB;EAC3C,IAAIC,SAAS,GAAGF,WAAW,CAACG,YAAY,EAAE;EAC1C,IAAIC,OAAO,GAAGL,CAAC,CAACM,MAAM;EACtB,IAAIC,cAAc,CAAC,CAAC;;EAEpB,IAAIJ,SAAS,CAACK,WAAW,EAAE,EAAE;IAC3BR,CAAC,CAACS,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF;;EAGA,IAAIZ,MAAM,CAACQ,OAAO,CAAC,EAAE;IACnB,IAAIK,IAAI,GAAGL,OAAO;IAClBE,cAAc,GAAGX,iBAAiB,CAACF,KAAK,CAACiB,eAAe,CAACD,IAAI,CAAC,CAAC;EACjE;EAEA,IAAIE,QAAQ,GAAGjB,wBAAwB,CAACM,WAAW,CAAC;EACpDF,MAAM,CAACc,YAAY,CAACD,QAAQ,CAAC,CAAC,CAAC;;EAE/Bb,MAAM,CAACe,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEvBC,UAAU,CAAC,YAAY;IACrBhB,MAAM,CAACiB,gBAAgB,CAACT,cAAc,CAAC;IACvCR,MAAM,CAACkB,eAAe,EAAE;IACxBlB,MAAM,CAACmB,MAAM,CAACC,cAAc,CAAClB,WAAW,CAAC,CAAC;EAC5C,CAAC,EAAE,CAAC,CAAC;AACP;AAEA,SAASkB,cAAc,CAAClB,WAAW,EAAE;EACnC,IAAImB,UAAU,GAAG7B,aAAa,CAAC8B,WAAW,CAACpB,WAAW,CAACqB,iBAAiB,EAAE,EAAErB,WAAW,CAACG,YAAY,EAAE,EAAE,SAAS,CAAC;EAClH,OAAOX,WAAW,CAAC8B,IAAI,CAACtB,WAAW,EAAEmB,UAAU,EAAE,cAAc,CAAC;AAClE;AAEAI,MAAM,CAACC,OAAO,GAAG3B,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}