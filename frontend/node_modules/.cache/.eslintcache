[{"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\index.js":"1","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\App.js":"2","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\store.js":"3","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\layout\\DefaultLayout.js":"4","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\index.js":"5","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\DocsLink.js":"6","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppHeader.js":"7","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppBreadcrumb.js":"8","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\DocsCallout.js":"9","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppContent.js":"10","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppFooter.js":"11","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\DocsExample.js":"12","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\header\\AppHeaderDropdown.js":"13","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\routes.js":"14","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\header\\index.js":"15","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Map.js":"16","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Hashtags.js":"17","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Topics.js":"18","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\TopicPage.js":"19","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\General Stats.js":"20","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Map Topic.js":"21","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Home.js":"22","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\services\\tweets_service.js":"23","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\http-common.js":"24","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Perspectives_Updates.js":"25","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\TweetStats Worldwide.js":"26","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\All Topics.js":"27"},{"size":337,"mtime":1682620174394,"results":"28","hashOfConfig":"29"},{"size":676,"mtime":1682620174367,"results":"30","hashOfConfig":"29"},{"size":336,"mtime":1682620174403,"results":"31","hashOfConfig":"29"},{"size":428,"mtime":1685701162643,"results":"32","hashOfConfig":"29"},{"size":477,"mtime":1685697821210,"results":"33","hashOfConfig":"29"},{"size":735,"mtime":1682620174387,"results":"34","hashOfConfig":"29"},{"size":2113,"mtime":1691575117539,"results":"35","hashOfConfig":"29"},{"size":1489,"mtime":1682620174381,"results":"36","hashOfConfig":"29"},{"size":1122,"mtime":1682620174385,"results":"37","hashOfConfig":"29"},{"size":819,"mtime":1682620174382,"results":"38","hashOfConfig":"29"},{"size":671,"mtime":1686316862771,"results":"39","hashOfConfig":"29"},{"size":1145,"mtime":1682620174386,"results":"40","hashOfConfig":"29"},{"size":2828,"mtime":1682620174389,"results":"41","hashOfConfig":"29"},{"size":952,"mtime":1691580722419,"results":"42","hashOfConfig":"29"},{"size":85,"mtime":1682620174389,"results":"43","hashOfConfig":"29"},{"size":2254,"mtime":1710965964463,"results":"44","hashOfConfig":"29"},{"size":1600,"mtime":1710965958343,"results":"45","hashOfConfig":"29"},{"size":2650,"mtime":1710965979654,"results":"46","hashOfConfig":"29"},{"size":15282,"mtime":1710965976817,"results":"47","hashOfConfig":"29"},{"size":2403,"mtime":1710965955112,"results":"48","hashOfConfig":"29"},{"size":2535,"mtime":1710965961568,"results":"49","hashOfConfig":"29"},{"size":4342,"mtime":1691679493410,"results":"50","hashOfConfig":"29"},{"size":3190,"mtime":1687259678170,"results":"51","hashOfConfig":"29"},{"size":246,"mtime":1710963644004,"results":"52","hashOfConfig":"29"},{"size":3969,"mtime":1710965970518,"results":"53","hashOfConfig":"29"},{"size":13805,"mtime":1710965984575,"results":"54","hashOfConfig":"29"},{"size":7592,"mtime":1710965947511,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1vbhp36",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"59"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\index.js",[],[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\App.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\store.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\layout\\DefaultLayout.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\index.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\DocsLink.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppHeader.js",["146","147","148","149","150","151","152","153","154"],[],"import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  CContainer,\r\n  CHeader,\r\n  CHeaderBrand,\r\n  CHeaderDivider,\r\n  CHeaderNav,\r\n  CHeaderToggler,\r\n  CNavLink,\r\n  CNavItem,\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilMagnifyingGlass } from '@coreui/icons'\r\n\r\nimport { AppBreadcrumb } from './index'\r\nimport { AppHeaderDropdown } from './header/index'\r\nimport logo from '../assets/bee/bee1.png';\r\n\r\nconst AppHeader = () => {\r\n  const dispatch = useDispatch()\r\n  const sidebarShow = useSelector((state) => state.sidebarShow)\r\n\r\n  return (\r\n    <CHeader position=\"sticky\" className=\"mb-5\">\r\n      <CContainer>\r\n        <CHeaderNav className=\"d-none d-md-flex me-auto align-items-center\" >\r\n        <CNavItem>\r\n          <CNavLink to=\"/\" component={NavLink}>\r\n            <img src={logo} alt=\"Logo\" width=\"150\" />\r\n          </CNavLink>\r\n        </CNavItem>\r\n          <CNavItem className=\"mx-3\">\r\n          <CNavLink to=\"/tweetstats_worldwide\" component={NavLink} style={{ fontSize: '18px', color: 'black' }}>\r\n          TweetStats Worldwide\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem className=\"mx-3\">\r\n          <CNavLink to=\"/perspectives_updates\" component={NavLink} style={{ fontSize: '18px', color: 'black' }}>\r\n          Perspectives and Updates\r\n          </CNavLink>\r\n          </CNavItem>\r\n        </CHeaderNav>\r\n      </CContainer>\r\n    </CHeader>\r\n  )\r\n}\r\n\r\nexport default AppHeader\r\n\r\n/*\r\n          <CNavItem>\r\n            <CNavLink href=\"#\">\r\n              <CIcon icon={cilBell} size=\"lg\" />\r\n            </CNavLink>\r\n          </CNavItem>\r\n          <CNavItem>\r\n            <CNavLink href=\"#\">\r\n              <CIcon icon={cilList} size=\"lg\" />\r\n            </CNavLink>\r\n          </CNavItem>\r\n          <CNavItem>\r\n            <CNavLink href=\"#\">\r\n              <CIcon icon={cilEnvelopeOpen} size=\"lg\" />\r\n            </CNavLink>\r\n          </CNavItem>\r\n        </CHeaderNav>\r\n        <CHeaderNav className=\"ms-3\">\r\n          <AppHeaderDropdown />\r\n          */","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppBreadcrumb.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\DocsCallout.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppContent.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\AppFooter.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\DocsExample.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\header\\AppHeaderDropdown.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\routes.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\components\\header\\index.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Map.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Hashtags.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Topics.js",["155"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst Topics = () => {\r\n  const [records, setRecords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5050/statistics_general/\");\r\n        if (!response.ok) {\r\n          throw new Error(`An error occurred: ${response.statusText}`);\r\n        }\r\n        const records = await response.json();\r\n        setRecords(records);\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n\r\n    getRecords();\r\n  }, []);\r\n\r\n    const getFirstTenRecords = () => {\r\n      // Sort the records based on their values in descending order\r\n      const sortedRecords = records.sort((a, b) => b.value - a.value);\r\n      // Slice the first 10 records\r\n      return sortedRecords.slice(0, 10);\r\n    };\r\n    \r\n\r\n    const getFirstTenTopicsEntries = (record) => {\r\n      // Sort the topics based on their values in descending order\r\n      const sortedTopics = Object.entries(record.topics).sort((a, b) => b[1] - a[1]);\r\n      // Slice the first 10 topics\r\n      return sortedTopics.slice(0, 10);\r\n    };\r\n    \r\n\r\n  const redirectToTopicPage = (topic) => {\r\n    // Modify the URL to the desired topic page\r\n    const topicPageURL = `http:/#/topics/${topic}`;\r\n    window.open(topicPageURL, \"_blank\");\r\n  };\r\n\r\n  return (\r\n    <tbody>\r\n      {getFirstTenRecords().map((record) => (\r\n        <React.Fragment key={record._id}>\r\n          <tr>\r\n            <td style={{ padding: '3px', paddingInlineStart: '10px' }}>\r\n              \r\n            </td>\r\n          </tr>\r\n          {getFirstTenTopicsEntries(record).map(([topic, value]) => (\r\n            <tr key={topic}>\r\n              <td style={{ padding: '5px', paddingInlineStart: '10px', width:'82.5%' }}>\r\n                <a style={{color: 'black'}} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                  {topic}\r\n                </a>\r\n              </td>\r\n              <td className=\"qtt-background\" style={{ padding: '3px' }}>\r\n                {value}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n          <tr>\r\n          <td className=\"viewall-background\" style={{ padding: '3px', marginLeft:'149px' }}>\r\n          <a href=\"/#/all_topics\" style={{ textDecoration: 'none', color: 'inherit', cursor: 'pointer' }}>\r\n              <strong>View All</strong>\r\n          </a>\r\n          </td>\r\n\r\n          </tr>\r\n          <tr>\r\n            <td style={{ padding: '3px', paddingInlineStart: '20px' }}>\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      ))}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default Topics;\r\n","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\TopicPage.js",["156","157"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport verifiedImage from '../../assets/images/verified.png';\r\nimport { FaHeart, FaRetweet, FaQuoteLeft, FaReply, FaEye, FaUser, FaRegSmileBeam, FaRegFrown, FaRegMeh } from 'react-icons/fa';\r\nimport Map from './Map Topic'\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, ResponsiveContainer, LabelList, Label, PieChart, Pie, Cell, Tooltip } from \"recharts\";\r\nimport ReactWordcloud from \"react-wordcloud\"; \r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/animations/scale.css'\r\n\r\nconst Record = ({ record, hashtags, filteredTop10, selectedFilter, handleFilterChange, options, keywordsArray, hashtagsArray }) => {\r\n  // Prepare data for the pie chart\r\n  const pieData = record ? [\r\n    { name: 'Positive', value: record.sentiment_count?.Positive || 0, color: '#76CC9D', perc: record.sentiment_percentages?.Positive },\r\n    { name: 'Neutral', value: record.sentiment_count?.Neutral || 0, color: '#FADB7C', perc: record.sentiment_percentages?.Neutral },\r\n    { name: 'Negative', value: record.sentiment_count?.Negative || 0, color: '#F46161', perc: record.sentiment_percentages?.Negative },\r\n  ] : [];\r\n\r\n  const PieGraphic = () => {\r\n    const [activeIndex, setActiveIndex] = useState(null);\r\n\r\n    const handleMouseEnter = (data, index) => {\r\n      setActiveIndex(index);\r\n    };\r\n\r\n    const renderTooltipContent = (props) => {\r\n      const { payload } = props;\r\n      if (payload && payload.length > 0) {\r\n        const entry = payload[0];\r\n        const { name, perc } = entry.payload;\r\n\r\n        return (\r\n          <div style= {{marginRight:'10px', marginLeft:'10px', marginTop:'10px'}}>\r\n            <p><strong>{name}</strong>: {`${perc.toFixed(2)}%`}</p>\r\n          </div>\r\n        );\r\n      }\r\n    };\r\n\r\n    return (\r\n      <PieChart width={400} height={400}>\r\n        <Pie\r\n          data={pieData}\r\n          dataKey=\"value\"\r\n          cx={120}\r\n          cy={150}\r\n          innerRadius={75}\r\n          outerRadius={110}\r\n          paddingAngle={5}\r\n          onMouseEnter={handleMouseEnter}\r\n        >\r\n          {pieData.map((entry, index) => (\r\n            <Cell key={index} fill={entry.color} />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip content={renderTooltipContent} active={activeIndex !== null} wrapperStyle={{ backgroundColor: \"white\", border: '1px solid #ccc' }} />\r\n      </PieChart>\r\n    );\r\n  };\r\n\r\n  const calculateKValue = (value) => {\r\n    const kValue = value / 1000;\r\n    // Use toFixed(1) to display one decimal if the value is less than 1\r\n    return kValue.toFixed(kValue < 1 ? 1 : 0);\r\n  };\r\n\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (record && record.engagement_metrics) {\r\n      const data = [\r\n        { name: 'Impressions', value: record.engagement_metrics.total_impressions, sqrtValue: Math.sqrt(record.engagement_metrics.total_impressions) * 0.9, kValue: calculateKValue(record.engagement_metrics.total_impressions), },\r\n        { name: 'Likes', value: record.engagement_metrics.total_likes, sqrtValue: Math.sqrt(record.engagement_metrics.total_likes), kValue: calculateKValue(record.engagement_metrics.total_likes),},\r\n        { name: 'Retweets', value: record.engagement_metrics.total_retweets, sqrtValue: Math.sqrt(record.engagement_metrics.total_retweets), kValue: calculateKValue(record.engagement_metrics.total_retweets), },\r\n        { name: 'Quotes', value: record.engagement_metrics.total_quotes, sqrtValue: Math.sqrt(record.engagement_metrics.total_quotes), kValue: calculateKValue(record.engagement_metrics.total_quotes)},\r\n        { name: 'Replys', value: record.engagement_metrics.total_replys, sqrtValue: Math.sqrt(record.engagement_metrics.total_replys), kValue: calculateKValue(record.engagement_metrics.total_replys) },\r\n      ];\r\n      setChartData(data);\r\n    }\r\n  }, [record]);\r\n  \r\n\r\n  const CustomTooltip = ({ active, payload, label, coordinate }) => {\r\n    if (active && payload && payload.length) {\r\n      const value = payload[0].payload.value;\r\n      return (\r\n        <div className=\"custom-tooltip\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n          <div style={{ marginTop: '10px', marginRight: '10px', marginLeft: '10px' }}>\r\n          <p className=\"intro\" style={{ textAlign: 'center' }}>Value: {value}</p></div>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\n  const CustomBarLabel = ({ x, y, value }) => (\r\n    <text x={x + 0} y={y - 7} textAnchor=\"start\" fontWeight=\"bold\">\r\n      {value}\r\n    </text>\r\n  );\r\n  \r\n  return (\r\n    <div >\r\n      <table className=\"home-table1\" style={{ display: 'flex', alignItems: 'center', width:'100%', minWidth: '1280px', maxWidth:'1280px' }}>\r\n      <thead>\r\n        <tr>\r\n          <th colSpan=\"2\" style={{ textAlign: 'center', position: 'relative' }}>\r\n            <span style={{ position: 'relative', top: '3.6px' }}>{record?.topic}</span>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <div>\r\n        <div style={{ display: 'flex', marginTop: '40px'}}>\r\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginLeft: '130px' }}>\r\n          <h3><strong>{record?.engagement_metrics?.total_tweets}</strong></h3>\r\n          <h6>Total</h6>\r\n          <p></p>\r\n          <h3 style={{ color: '#76CC9D' }}><strong>{record?.sentiment_count?.Positive}</strong></h3>\r\n          <h6>Positive</h6>\r\n          <p></p>\r\n          <h3 style={{ color: '#FADB7C' }}><strong>{record?.sentiment_count?.Neutral}</strong></h3>\r\n          <h6>Neutral</h6>\r\n          <p></p>\r\n          <h3 style={{ color: '#F46161' }}><strong>{record?.sentiment_count?.Negative}</strong></h3>\r\n          <h6>Negative</h6>\r\n        </div>\r\n        <div style={{ width: '350px', height: '350px', marginLeft: '150px' }}>\r\n          <PieGraphic />\r\n          </div>\r\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n            <ResponsiveContainer width={450} height={350}>\r\n            <BarChart layout=\"vertical\" data={chartData} barSize={35} margin={{ left: 60, right: 80, top:4, bottom: 20 }}> {/* Adjust the margins */}\r\n                <XAxis type=\"number\" dataKey=\"sqrtValue\" hide /> {/* Use \"sqrtValue\" for XAxis dataKey */}\r\n                <YAxis type=\"category\" dataKey=\"name\" hide/> {/* Use \"name\" for YAxis dataKey */}\r\n                <Tooltip content={<CustomTooltip />} wrapperStyle={{ backgroundColor: \"white\", border: '1px solid #ccc' }} />\r\n                <Bar dataKey=\"sqrtValue\" fill=\"#8884d8\">\r\n                  <LabelList\r\n                    dataKey=\"name\"\r\n                    position=\"top\"\r\n                    //offset={4}\r\n                    content={<CustomBarLabel />}\r\n                  />\r\n                  <LabelList\r\n                    dataKey=\"kValue\"\r\n                    position=\"right\"\r\n                    formatter={(value) => `${value}K`}\r\n                  />\r\n                </Bar>\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n      </table>\r\n      <br></br>\r\n      \r\n      <div className=\"container text\" >\r\n              <div className=\"row align-items-start\" style={{ display: 'flex', width:'100%', minWidth: '1280px', maxWidth:'1280px'}}>\r\n              <div className=\"col-lg-6 col-md-4 col-sm-8\" style={{marginRight:'15px'}}>\r\n              <div className=\"flex-container\">\r\n                  <div className=\"flex-item\">\r\n                    <div style={{ marginBottom: '20px'}}>\r\n                  <h3>Trending Tweets Today </h3></div>\r\n                  <div className=\"filter-buttons\">\r\n        <button\r\n          className={selectedFilter === \"top_10_global\" ? \"active\" : \"\"}\r\n          onClick={() => handleFilterChange(\"top_10_global\")}\r\n        >\r\n          Global\r\n        </button>\r\n        <button\r\n          className={selectedFilter === \"top_10_media\" ? \"active\" : \"\"}\r\n          onClick={() => handleFilterChange(\"top_10_media\")}\r\n        >\r\n          With Media\r\n        </button>\r\n        <button\r\n          className={selectedFilter === \"top_10_verified\" ? \"active\" : \"\"}\r\n          onClick={() => handleFilterChange(\"top_10_verified\")}\r\n        >\r\n          Verified\r\n        </button>\r\n        <button\r\n                    className={selectedFilter === \"top_10_question\" ? \"active\" : \"\"}\r\n                    onClick={() => handleFilterChange(\"top_10_question\")}\r\n                  >\r\n                   Concerns\r\n                  </button>\r\n      </div>\r\n      <br></br>\r\n  {filteredTop10.length > 0 ? (\r\n    filteredTop10.map((entry, index) => (\r\n          <div key={index} style={{ marginBottom: '20px', width: '620px', border: '1px solid #ccc', borderRadius: '8px'}}>\r\n          <div style={{ display: 'flex', alignItems: 'flex-start' }}>\r\n            <div style={{ marginRight: '10px', marginTop: '6px' }}>\r\n              <img src={entry.profile_photo} alt=\"Profile\" style={{ width: '65px', marginLeft: '5px' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n              <div>\r\n                <strong>@{entry.username}</strong> {entry.verified && <img src={verifiedImage} alt=\"Verified\" style={{ width: '13px', height: '13px', verticalAlign: 'middle', marginBottom: '2px' }} />}\r\n              </div>\r\n              <div style={{ fontSize: '15px', marginRight: '5px' }}>\r\n                {entry.result}\r\n                <br />\r\n                {entry.media !== null ? (\r\n                <a href={entry.media} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {entry.media}\r\n                </a>\r\n              ) : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br></br>\r\n          <div style={{ marginLeft: '75px', marginBottom: '5px'}}>\r\n            <FaEye title=\"Impressions\" /> {entry.total_impressions} &nbsp;&nbsp;&nbsp;\r\n            <FaHeart title=\"Likes\" /> {entry.total_likes} &nbsp;&nbsp;&nbsp;\r\n            <FaRetweet title=\"Retweets\" /> {entry.total_retweets} &nbsp;&nbsp;&nbsp;\r\n            <FaQuoteLeft title=\"Quotes\" /> {entry.total_quotes} &nbsp;&nbsp;&nbsp;\r\n            <FaReply title=\"Replies\" /> {entry.total_replys} &nbsp;&nbsp;&nbsp;\r\n            {entry.mentions > 1 ? <><FaUser title=\"Mentions\" /> {entry.mentions}</> : null}\r\n\r\n            <div style={{ marginLeft: '10px', display: 'inline-flex', alignItems: 'center'}}>\r\n              {entry.sentiment === \"Positive\" ? <p><FaRegSmileBeam style={{ color: \"#76CC9D\" }} /> Positive</p> : null}\r\n              {entry.sentiment === \"Negative\" ? <p><FaRegFrown style={{ color: \"#F46161\" }} /> Negative</p>: null}\r\n              {entry.sentiment === \"Neutral\" ? <p><FaRegMeh style={{ color: \"#FADB7C\" }} /> Neutral</p>: null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n ))\r\n ) : (\r\n   <p>No data available for the selected filter.</p>\r\n )}\r\n       </div>\r\n       </div>\r\n            </div>\r\n            <div className=\"col-lg-2 col-md-3 col-sm-4\"  style={{ marginLeft:'5px', marginTop: '20px', alignItems:'center'}}>\r\n              <br></br><br></br>\r\n              <div style={{ width: \"600px\", height: \"270px\" , marginBottom:'40px'}}>\r\n      <ReactWordcloud options={options} words={hashtagsArray} />\r\n      </div>\r\n        <Map/>\r\n        \r\n        <div style={{ width: \"600px\", height: \"270px\", marginTop:'40px' }}>\r\n      <ReactWordcloud options={options} words={keywordsArray} />\r\n      </div>\r\n      </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default function Hashtags() {\r\n  const { topic } = useParams();\r\n\r\n  // State to store the selected filter, defaulting to 'top_10_global'\r\n  const [selectedFilter, setSelectedFilter] = useState(\"top_10_global\");\r\n\r\n  // Declare keywordsArray outside the useEffect hook\r\n  const [record, setRecord] = useState(null);\r\n  const [keywordsArray, setKeywordsArray] = useState([]); // Initialize it as an empty array\r\n  const [hashtagsArray, setHashtagsArray] = useState([]); // Initialize it as an empty array\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5050/statistics/\");\r\n        if (!response.ok) {\r\n          throw new Error(`An error occurred: ${response.statusText}`);\r\n        }\r\n        const records = await response.json();\r\n        const matchingRecord = records.find((r) => r.topic === topic);\r\n        setRecord(matchingRecord || null);\r\n\r\n        // Convert the record.keywords object into an array of keyword objects\r\n        const keywords = matchingRecord?.keywords || {};\r\n        const keywordsArray = Object.entries(keywords).map(([keyword, count]) => ({\r\n          text: keyword,\r\n          value: count,\r\n        }));\r\n\r\n        setKeywordsArray(keywordsArray); // Set the keywordsArray state with the converted data\r\n\r\n        const hashtags = matchingRecord?.hashtags || {};\r\n        const hashtagsArray = Object.entries(hashtags).map(([hashtag, count]) => ({\r\n          text: hashtag,\r\n          value: count,\r\n        }));\r\n\r\n        setHashtagsArray(hashtagsArray); // \r\n\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n\r\n    getRecords();\r\n  }, [topic]);\r\n\r\n  // Function to handle filter change\r\n  const handleFilterChange = (filter) => {\r\n    setSelectedFilter(filter);\r\n  };\r\n\r\n  if (!record) {\r\n    return null;\r\n  }\r\n\r\n  const hashtags = {\r\n    sentimentCount: record.sentiment_count || {},\r\n    engagementMetrics: Object.entries(record.engagement_metrics || {}),\r\n    sentimentPerc: Object.entries(record.sentiment_percentages || {}),\r\n    top_10_global: record.top_10_global || [],\r\n    top_10_media: record.top_10_media || [],\r\n    top_10_verified: record.top_10_verified || [],\r\n    top_10_question: record.top_10_question || [],\r\n  };\r\n\r\n  let filteredTop10 = [];\r\n  switch (selectedFilter) {\r\n    case \"top_10_global\":\r\n      filteredTop10 = hashtags.top_10_global;\r\n      break;\r\n    case \"top_10_media\":\r\n      filteredTop10 = hashtags.top_10_media;\r\n      break;\r\n    case \"top_10_verified\":\r\n      filteredTop10 = hashtags.top_10_verified;\r\n      break;\r\n    case \"top_10_question\":\r\n      filteredTop10 = hashtags.top_10_question;\r\n      break;\r\n    default:\r\n      filteredTop10 = hashtags.top_10_global;\r\n      break;\r\n    \r\n  }\r\n\r\n  const options = {\r\n    //colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\r\n    enableTooltip: true,\r\n    deterministic: false,\r\n    fontFamily: \"impact\",\r\n    fontSizes: [15, 50],\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    padding: 1,\r\n    rotations: 0,\r\n    //rotationAngles: [0, 80],\r\n    scale: \"sqrt\",\r\n    spiral: \"archimedean\",\r\n    transitionDuration: 1000\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* Pass the filteredTop10 data and the handleFilterChange function as props to the Record component */}\r\n      <Record\r\n        record={record}\r\n        hashtags={hashtags}\r\n        filteredTop10={filteredTop10}\r\n        selectedFilter={selectedFilter}\r\n        handleFilterChange={handleFilterChange} // Pass the handleFilterChange function\r\n        options={options}\r\n        keywordsArray={keywordsArray}\r\n        hashtagsArray={hashtagsArray}\r\n      />\r\n    </div>\r\n  )}\r\n\r\n","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\General Stats.js",["158","159","160","161","162","163","164","165","166","167","168","169"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, ResponsiveContainer, LabelList, Label, PieChart, Pie, Cell, Tooltip } from \"recharts\";\r\n\r\nconst Record = (props) => (\r\n  <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n<div class=\"metric-container\">\r\n  <div class=\"metric-data\">\r\n    {props.record.engagement_metrics.total_impressions}\r\n  </div>\r\n  <div class=\"metric-box1\"><strong>Impressions</strong></div>\r\n</div>\r\n\r\n<div class=\"metric-container\">\r\n  <div class=\"metric-data\">\r\n    {props.record.engagement_metrics.total_tweets}\r\n  </div>\r\n  <div class=\"metric-box2\"><strong>Tweets</strong></div>\r\n</div>\r\n\r\n<div class=\"metric-container\">\r\n  <div class=\"metric-data\">\r\n    {props.record.engagement_metrics.total_likes}\r\n  </div>\r\n  <div class=\"metric-box3\"><strong>Likes</strong></div>\r\n</div>\r\n\r\n<div class=\"metric-container\">\r\n  <div class=\"metric-data\">\r\n    {props.record.engagement_metrics.total_retweets}\r\n  </div>\r\n  <div class=\"metric-box4\"><strong>Retweets</strong></div>\r\n</div>\r\n\r\n<div class=\"metric-container\">\r\n  <div class=\"metric-data\">\r\n    {props.record.engagement_metrics.total_quotes}\r\n  </div>\r\n  <div class=\"metric-box5\"><strong>Quotes</strong></div>\r\n</div>\r\n\r\n<div class=\"metric-container\">\r\n  <div class=\"metric-data\">\r\n    {props.record.engagement_metrics.total_replys}\r\n  </div>\r\n  <div class=\"metric-box6\"><strong>Replys</strong></div>\r\n</div>\r\n\r\n</div>\r\n);\r\n\r\nexport default function Sentiment() {\r\n  const [records, setRecords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5050/statistics_general/\");\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`An error occurred: ${response.statusText}`);\r\n        }\r\n\r\n        const records = await response.json();\r\n        setRecords(records);\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n\r\n    getRecords();\r\n  }, []);\r\n\r\n  // This method will map out the records\r\n  function recordList() {\r\n    return records.map((record) => {\r\n      return <Record record={record} key={record._id} />;\r\n    });\r\n  }\r\n  \r\n  // This following section will display the records and the chart\r\n  return (\r\n    <div>\r\n    <div style={{ display: 'flex' }}>\r\n      <div>\r\n        {recordList()}\r\n      </div> \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Map Topic.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Home.js",["170"],[],"import React, { Component } from \"react\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport image from '../../assets/images/banner.png';\r\nimport TweetDataService from \"../../services/tweets_service.js\"\r\nimport Map from './Map'\r\nimport Hashtags from './Hashtags'\r\nimport Topics from './Topics'\r\nimport Stats from './General Stats'\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrieveTweet = this.retrieveTweet.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveTweet = this.setActiveTweet.bind(this);\r\n\r\n    this.state = {\r\n      Tweets: [],\r\n      currentTweet: null,\r\n      currentIndex: -1,\r\n      searchid: \"\",\r\n      searchnome: \"\",\r\n      searchemprego: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveTweet();\r\n  }\r\n\r\n  handleClick(event) {\r\n    this.setState({\r\n      currentPage: Number(event.target.id)\r\n    });\r\n  }\r\n\r\n  retrieveTweet() {\r\n    TweetDataService.getAll()\r\n      .then(response => {\r\n        const tweets = response.data.map(item => {\r\n          const tweet = item.tweet || {};\r\n          return {\r\n            ...item,\r\n            nome: tweet.nome\r\n          };\r\n        });\r\n        this.setState({\r\n          Tweets: tweets\r\n        });\r\n        console.log(tweets);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n  \r\n\r\n  refreshList() {\r\n    this.retrieveTweet();\r\n    this.setState({\r\n      currentTweets: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  setActiveTweet(Tweets, index) {\r\n    this.setState({\r\n      currentTweets: Tweets,\r\n      currentIndex: index\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <Navbar className=\"navbar navbar-expand-lg navbar-white bg-white\">\r\n          <Container>\r\n            <div className=\"container text\">\r\n              <div className=\"row align-items-start\" style={{display: 'flex', width:'100%', minWidth: '1280px', maxWidth:'1280px'}}>\r\n              <div className=\"col-lg-4 col-md-6 col-sm-12\">\r\n              <div className=\"flex-container\" >\r\n                  <div className=\"flex-item\">\r\n                  <table className=\"home-table\" style={{ width:'100%', minWidth: '390px', maxWidth:'390px' }}>\r\n                    <thead>\r\n                      <tr>\r\n                        <th colSpan=\"2\" style={{ textAlign: 'center', position: 'relative' }}>\r\n                          <span style={{ position: 'relative', top: '3.6px' }}>Topic Trends</span>\r\n                        </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <Topics />\r\n                  </table>\r\n                  <br></br><br></br><br></br>\r\n                  <table className=\"home-table\" style={{ width:'100%', minWidth: '390px', maxWidth:'390px' }}>\r\n                    <thead>\r\n                      <tr>\r\n                      <th colSpan=\"2\" style={{ textAlign: 'center', position: 'relative' }}>\r\n                        <span style={{ position: 'relative', top: '3.6px' }}># Hashtag Trends</span>\r\n                        </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <Hashtags />\r\n                  </table>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"col-lg-8 col-md-6 col-sm-12\">\r\n                  <div className=\"flex-container\" >\r\n                    <div className=\"flex-item\">\r\n                    <div className=\"row align-items-start\" style={{ display: 'flex', width:'100%', minWidth: '840px', maxWidth:'840px'}}>\r\n                    <div className=\"col-lg-9 col-md-9 col-sm-15\" >\r\n                    <img src={image} style={{width:'650px'}}/>\r\n                    </div>\r\n                    <div className=\"col-lg-2 col-md-2 col-sm-8\">\r\n                      <Stats/>\r\n                    </div>\r\n                    </div>\r\n                      <br /><br />\r\n                      <h2 style={{ fontFamily: 'Cambria' }}><b>Tweets per Country</b></h2>\r\n                    </div>\r\n                    <div className=\"flex-item\">\r\n                      <Map />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Container>\r\n        </Navbar>\r\n    );\r\n        \r\n      }}","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\services\\tweets_service.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\http-common.js",[],[],"C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\Perspectives_Updates.js",["171","172","173","174"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { ReactTinyLink } from \"react-tiny-link\";\r\n\r\nexport default function Hashtags() {\r\n  const [records, setRecords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5050/links/\");\r\n        if (!response.ok) {\r\n          throw new Error(`An error occurred: ${response.statusText}`);\r\n        }\r\n        const records = await response.json();\r\n        setRecords(records);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n    getRecords();\r\n  }, []);\r\n\r\n  const redirectToTopicPage = (topic) => {\r\n    // Modify the URL to the desired topic page\r\n    const topicPageURL = `http:/#/topics/${topic}`;\r\n    window.open(topicPageURL, \"_blank\");\r\n  };\r\n\r\n  const validateUrl = (url) => {\r\n    try {\r\n      new URL(url); // Validate the URL format\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Invalid URL:\", url);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Remove duplicate records based on both URL and title\r\n  const uniqueRecords = records.filter(\r\n    (record, index, self) =>\r\n      index ===\r\n      self.findIndex(\r\n        (r) => r.url === record.url || r.title === record.title\r\n      )\r\n  );\r\n\r\n  return (\r\n    <div>\r\n            <h2>Perspectives and Updates</h2>\r\n      <br />\r\n    <div style={{ display: \"flex\" }}>\r\n      <div style={{ flex: 1 }}>\r\n        {uniqueRecords.slice(0, uniqueRecords.length / 2).map((record) => (\r\n          <div key={record._id}>\r\n            {validateUrl(record.url) ? (\r\n              <ReactTinyLink\r\n              cardSize=\"large\"\r\n              showGraphic={true}\r\n              maxLine={2}\r\n              minLine={1}\r\n              noCache={true}\r\n              url={record.url}\r\n              loadSecureUrl={true}\r\n                \r\n                \r\n              />\r\n            ) : (\r\n              <p>Invalid URL: {record.url}</p>\r\n            )}\r\n          <table className=\"newstable\" style={{fontSize:\"16px\"}}>\r\n                  <tbody>\r\n                    <tr>\r\n                    <td>Related Topics:&nbsp; \r\n  {Array.isArray(record.topic) ? (\r\n    record.topic.map((topic, index) => (\r\n      <span key={index}>\r\n        <a href=\"#\" onClick={() => redirectToTopicPage(topic)}>{topic}</a>\r\n        {index < record.topic.length - 1 ? ', ' : ''}\r\n      </span>\r\n    ))\r\n  ) : (\r\n    <a href=\"#\" onClick={() => redirectToTopicPage(record.topic)}>{record.topic}</a>\r\n  )}\r\n</td>\r\n\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n            <br />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div style={{ flex: 1 }}>\r\n        {uniqueRecords.slice(uniqueRecords.length / 2).map((record) => (\r\n          <div key={record._id}>\r\n            {validateUrl(record.url) ? (\r\n              <ReactTinyLink\r\n                cardSize=\"large\"\r\n                showGraphic={true}\r\n                maxLine={2}\r\n                minLine={1}\r\n                noCache={true}\r\n                url={record.url}\r\n                loadSecureUrl={true}\r\n              />\r\n            ) : (\r\n              <p>Invalid URL: {record.url}</p>\r\n            )}\r\n            <table className=\"newstable\" style={{fontSize:\"16px\"}}>\r\n                  <tbody>\r\n                    <tr>\r\n                    <td>Related Topics:&nbsp; \r\n  {Array.isArray(record.topic) ? (\r\n    record.topic.map((topic, index) => (\r\n      <span key={index}>\r\n        <a href=\"#\" onClick={() => redirectToTopicPage(topic)}>{topic}</a>\r\n        {index < record.topic.length - 1 ? ', ' : ''}\r\n      </span>\r\n    ))\r\n  ) : (\r\n    <a href=\"#\" onClick={() => redirectToTopicPage(record.topic)}>{record.topic}</a>\r\n  )}\r\n</td>\r\n</tr>\r\n                  </tbody>\r\n                </table>\r\n            <br />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\TweetStats Worldwide.js",["175","176","177","178"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, ResponsiveContainer, LabelList, Label, Tooltip } from \"recharts\";\r\nimport ReactWordcloud from \"react-wordcloud\"; \r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/animations/scale.css'\r\nimport verifiedImage from '../../assets/images/verified.png';\r\nimport { FaHeart, FaRetweet, FaQuoteLeft, FaReply, FaEye, FaUser, FaRegSmileBeam, FaRegFrown, FaRegMeh } from 'react-icons/fa';\r\n\r\n\r\nexport default function Sentiment() {\r\n  const [records, setRecords] = useState([]);\r\n\r\n  // Estado para armazenar o filtro selecionado, padrão é 'top_10_global'\r\n  const [selectedFilter, setSelectedFilter] = useState(\"top_10_global\");\r\n  const [keywordsArray, setKeywordsArray] = useState([]); // Inicializa como um array vazio\r\n  const [hashtagsArray, setHashtagsArray] = useState([]); // Inicializa como um array vazio\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5050/statistics_general/\");\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Ocorreu um erro: ${response.statusText}`);\r\n        }\r\n\r\n        const records = await response.json();\r\n        console.log('Fetched records:', records);\r\n\r\n        setRecords(records);\r\n\r\n        const keywords = records[0].keywords || {};\r\n        const keywordsArray = Object.entries(keywords).map(([keyword, count]) => ({\r\n          text: keyword,\r\n          value: count,\r\n        }));\r\n        \r\n        setKeywordsArray(keywordsArray);\r\n        \r\n        const hashtags = records[0].hashtags || {};\r\n        const hashtagsArray = Object.entries(hashtags).map(([hashtag, count]) => ({\r\n          text: hashtag,\r\n          value: count,\r\n        }));\r\n        \r\n        console.log('hashtag array', hashtagsArray);\r\n        \r\n        setHashtagsArray(hashtagsArray);\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n\r\n    getRecords();\r\n  }, []);\r\n\r\n  // Função para lidar com a mudança de filtro\r\n  const handleFilterChange = (filter) => {\r\n    setSelectedFilter(filter);\r\n  };\r\n\r\n  const hashtags = {\r\n    top_10_global: records[0]?.top_10_global || [],\r\n    top_10_media: records[0]?.top_10_media || [],\r\n    top_10_verified: records[0]?.top_10_verified || [],\r\n    top_10_question: records[0]?.top_10_question || [],\r\n  };\r\n  \r\n\r\n  let filteredTop10 = [];\r\n  switch (selectedFilter) {\r\n    case \"top_10_global\":\r\n      filteredTop10 = hashtags.top_10_global;\r\n      break;\r\n    case \"top_10_media\":\r\n      filteredTop10 = hashtags.top_10_media;\r\n      break;\r\n    case \"top_10_verified\":\r\n      filteredTop10 = hashtags.top_10_verified;\r\n      break;\r\n    case \"top_10_question\":\r\n      filteredTop10 = hashtags.top_10_question;\r\n      break;\r\n    default:\r\n      filteredTop10 = hashtags.top_10_global;\r\n      break;\r\n  }\r\n\r\n  const options = {\r\n    //cores: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\r\n    enableTooltip: true,\r\n    deterministic: false,\r\n    fontFamily: \"impact\",\r\n    fontSizes: [15, 50],\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    padding: 1,\r\n    rotations: 0,\r\n    //rotationAngles: [0, 80],\r\n    scale: \"sqrt\",\r\n    spiral: \"archimedean\",\r\n    transitionDuration: 1000\r\n  };\r\n\r\n  const CustomizedBar = (props) => {\r\n    const { x, y, width, height } = props;\r\n\r\n    return (\r\n      <g>\r\n        <rect\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={height}\r\n          rx={4} // Ajustar o raio para mudar o grau de arredondamento\r\n          ry={4} // Ajustar o raio para mudar o grau de arredondamento\r\n          fill={props.fill}\r\n        />\r\n      </g>\r\n    );\r\n  };\r\n\r\n  const CustomizedLabel = ({ x, y, value, align }) => (\r\n    <text\r\n      x={x}\r\n      y={y}\r\n      dy={-12}\r\n      fill=\"black\"\r\n      fontSize={20}\r\n      fontWeight=\"bold\"\r\n      textAnchor={align}\r\n    >\r\n      {value}\r\n    </text>\r\n  );\r\n\r\n  const CustomizedLabelSentiment = ({ x, y, width, value, fill }) => {\r\n    const labelX = x + width + 10; // Ajustar a coordenada x para posicionar as etiquetas em relação à barra\r\n    const yOffset = -8;\r\n    const lineHeight = 16; // Ajustar a altura da linha conforme necessário\r\n    const valueFontSize = 25; // Tamanho da fonte para value.value\r\n    const percFontSize = 18; // Tamanho da fonte para value.perc\r\n    const lineSpacing = 20; // Ajustar o espaçamento entre os dois valores\r\n\r\n    if (value) {\r\n      const labelValue = `${value.value}\\n${value.perc.toFixed(2)}%`;\r\n      const values = labelValue.split('\\n');\r\n\r\n      return (\r\n        <g>\r\n          {values.map((val, index) => (\r\n            <text\r\n              key={index}\r\n              x={500} // Definir um valor fixo para a coordenada x\r\n              y={y + (lineHeight * index) + yOffset}\r\n              fill=\"black\"\r\n              textAnchor=\"end\" // Alinhar as etiquetas à direita\r\n              dominantBaseline=\"middle\" // Centralizar verticalmente as etiquetas\r\n            >\r\n              <tspan\r\n                fontSize={index === 0 ? valueFontSize : percFontSize}\r\n                dy={index === 1 ? lineSpacing : 0}\r\n                fontWeight={index === 0 ? \"bold\" : \"normal\"}\r\n              >\r\n                {val}\r\n              </tspan>\r\n            </text>\r\n          ))}\r\n        </g>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Preparar os dados para o gráfico\r\n  const chartData = records.map((record) => ({\r\n    negative: { value: record.sentiment_count.Negative, perc: record.sentiment_percentages.Negative, sqrtValue: (record.sentiment_count.Negative)/1.1 },\r\n    neutral: { value: record.sentiment_count.Neutral, perc: record.sentiment_percentages.Neutral, sqrtValue: (record.sentiment_count.Neutral)/1.1 - 220 },\r\n    positive: { value: record.sentiment_count.Positive, perc: record.sentiment_percentages.Positive, sqrtValue: (record.sentiment_count.Positive)/1.1 }\r\n  }));\r\n\r\n  // Esta seção a seguir exibirá os registros e o gráfico\r\n  return (\r\n    <div>\r\n      <h2>TweetStats Worldwide</h2>\r\n      <br />\r\n      <table className=\"home-table1\" style={{ display: 'flex', alignItems: 'center', width:'100%', minWidth: '1280px', maxWidth:'1280px' }}>\r\n      <div className=\"container text\">\r\n        <div className=\"row align-items-start\" style={{marginTop: '30px'}}>\r\n          <div className=\"col-lg-6 col-md-4 col-sm-10\">\r\n      <div style={{ width: \"500px\", height: \"300px\", marginTop: '10px' }}>\r\n        <ResponsiveContainer>\r\n          <BarChart data={chartData} layout=\"vertical\" barGap={55}>\r\n            <XAxis type=\"number\" hide />\r\n            <YAxis type=\"category\" hide />\r\n            <Legend iconType=\"none\" />\r\n            <Bar\r\n              dataKey=\"positive.sqrtValue\"\r\n              fill=\"#76CC9D\"\r\n              name=\"Positive\"\r\n              shape={<CustomizedBar fill=\"#76CC9D\" />} // Usar o componente de forma personalizada para a barra\r\n            >\r\n              <LabelList\r\n                dataKey=\"positive\"\r\n                position=\"right\"\r\n                content={(props) => <CustomizedLabelSentiment {...props} />}\r\n              />\r\n              <LabelList\r\n                dataKey=\"positive\"\r\n                position=\"top\"\r\n                content={({ x, y }) => <CustomizedLabel x={x} y={y} value=\"Positive\" align=\"left\" />}\r\n              />\r\n            </Bar>\r\n            <Bar\r\n              dataKey=\"neutral.sqrtValue\"\r\n              fill=\"#FADB7C\"\r\n              name=\"Neutral\"\r\n              shape={<CustomizedBar fill=\"#FADB7C\" />} // Usar o componente de forma personalizada para a barra\r\n            >\r\n              <LabelList\r\n                dataKey=\"neutral\"\r\n                position=\"right\"\r\n                content={(props) => <CustomizedLabelSentiment {...props} />}\r\n              />\r\n              <LabelList\r\n                dataKey=\"neutral\"\r\n                position=\"top\"\r\n                content={({ x, y }) => <CustomizedLabel x={x} y={y} value=\"Neutral\" align=\"left\" />}\r\n              />\r\n            </Bar>\r\n            <Bar\r\n              dataKey=\"negative.sqrtValue\"\r\n              fill=\"#F46161\"\r\n              name=\"Negative\"\r\n              shape={<CustomizedBar fill=\"#F46161\" />} // Usar o componente de forma personalizada para a barra\r\n            >\r\n              <LabelList\r\n                dataKey=\"negative\"\r\n                position=\"right\"\r\n                content={(props) => <CustomizedLabelSentiment {...props} />}\r\n              />\r\n              <LabelList\r\n                dataKey=\"negative\"\r\n                position=\"top\"\r\n                content={({ x, y }) => <CustomizedLabel x={x} y={y} value=\"Negative\" align=\"left\" />}\r\n              />\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n        </div>\r\n        </div>\r\n        <div className=\"col-lg-6 col-md-4 col-sm-10\">\r\n        <div style={{ width: \"600px\", height: \"270px\", marginTop:'10px' }}>\r\n              <ReactWordcloud options={options} words={keywordsArray} />\r\n            </div>\r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n      </table>\r\n      <br></br>\r\n      <div className=\"container text\">\r\n        <div className=\"row align-items-start\">\r\n          <div className=\"col-lg-8 col-md-6 col-sm-12\">\r\n            <div className=\"flex-container\">\r\n              <div className=\"flex-item\">\r\n              <div style={{ marginBottom: '20px'}}>\r\n                  <h3>Trending Tweets Today </h3></div>\r\n                <div className=\"filter-buttons\">\r\n                  <button\r\n                    className={selectedFilter === \"top_10_global\" ? \"active\" : \"\"}\r\n                    onClick={() => handleFilterChange(\"top_10_global\")}\r\n                  >\r\n                    Global\r\n                  </button>\r\n                  <button\r\n                    className={selectedFilter === \"top_10_media\" ? \"active\" : \"\"}\r\n                    onClick={() => handleFilterChange(\"top_10_media\")}\r\n                  >\r\n                    With Media\r\n                  </button>\r\n                  <button\r\n                    className={selectedFilter === \"top_10_verified\" ? \"active\" : \"\"}\r\n                    onClick={() => handleFilterChange(\"top_10_verified\")}\r\n                  >\r\n                   Verified\r\n                  </button>\r\n                  <button\r\n                    className={selectedFilter === \"top_10_question\" ? \"active\" : \"\"}\r\n                    onClick={() => handleFilterChange(\"top_10_question\")}\r\n                  >\r\n                   Concerns\r\n                  </button>\r\n                </div>\r\n                <br />\r\n                {filteredTop10.length > 0 ? (\r\n                  filteredTop10.map((entry, index) => (\r\n                    <div key={index} style={{ marginBottom: '20px', width: '1270px', border: '1px solid #ccc', borderRadius: '8px' }}>\r\n                      <div style={{ display: 'flex', alignItems: 'flex-start' }}>\r\n                        <div style={{ marginRight: '10px', marginTop: '6px' }}>\r\n                          <img src={entry.profile_photo} alt=\"Perfil\" style={{ width: '65px', marginLeft: '5px' }} />\r\n                        </div>\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                          <div>\r\n                            <strong>@{entry.username}</strong> {entry.verified && <img src={verifiedImage} alt=\"Verificado\" style={{ width: '13px', height: '13px', verticalAlign: 'middle', marginBottom: '2px' }} />}\r\n                          </div>\r\n                          <div style={{ fontSize: '15px', marginRight: '5px' }}>\r\n                            {entry.result}\r\n                            <br />\r\n                            {entry.media !== null ? (\r\n                            <a href={entry.media} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                              {entry.media}\r\n                            </a>\r\n                          ) : null}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <br></br>\r\n                      <div style={{ marginLeft: '75px', marginBottom: '5px' }}>\r\n                        <FaEye title=\"Impressions\" /> {entry.total_impressions} &nbsp;&nbsp;&nbsp;\r\n                        <FaHeart title=\"Likes\" /> {entry.total_likes} &nbsp;&nbsp;&nbsp;\r\n                        <FaRetweet title=\"Retweets\" /> {entry.total_retweets} &nbsp;&nbsp;&nbsp;\r\n                        <FaQuoteLeft title=\"Quotes\" /> {entry.total_quotes} &nbsp;&nbsp;&nbsp;\r\n                        <FaReply title=\"Replies\" /> {entry.total_replys} &nbsp;&nbsp;&nbsp;\r\n                        {entry.mentions > 1 ? <><FaUser title=\"Mentions\" /> {entry.mentions}</> : null}\r\n\r\n                        <div style={{ marginLeft: '10px', display: 'inline-flex', alignItems: 'center'}}>\r\n                          {entry.sentiment === \"Positive\" ? <p><FaRegSmileBeam style={{ color: \"#76CC9D\" }} /> Positive</p> : null}\r\n                          {entry.sentiment === \"Negative\" ? <p><FaRegFrown style={{ color: \"#F46161\" }} /> Negative</p>: null}\r\n                          {entry.sentiment === \"Neutral\" ? <p><FaRegMeh style={{ color: \"#FADB7C\" }} /> Neutral</p>: null}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <p>Não há dados disponíveis para o filtro selecionado.</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-2 col-md-3 col-sm-6\" style={{ marginLeft: '20px', marginTop: '20px', alignItems: 'center' }}>\r\n            <br /><br />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ines_\\bee_v2\\bee_school\\frontend\\src\\views\\dashboard\\All Topics.js",["179","180","181","182","183","184"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { FaAngleRight } from 'react-icons/fa';\r\n\r\n\r\nconst Record = (props) => {\r\n  const topicsArray = Object.keys(props.record.topics);\r\n  const halfLength = Math.ceil(topicsArray.length / 2);\r\n  const firstHalf = topicsArray.slice(0, halfLength);\r\n  const secondHalf = topicsArray.slice(halfLength);\r\n\r\n  const redirectToTopicPage = (topic) => {\r\n    // Modify the URL to the desired topic page\r\n    const topicPageURL = `http:/#/topics/${topic}`;\r\n    window.open(topicPageURL, \"_blank\");\r\n  };\r\n\r\n  return (\r\n\r\n    <table className=\"home-table1\" style={{ display: 'flex', alignItems: 'center', width:'100%', minWidth: '1280px', maxWidth:'1280px' }}>\r\n    <div className=\"row align-items-start\" style={{ display: 'flex', alignItems: 'center', width: '100%', minWidth: '1280px', maxWidth: '1280px' }}>\r\n      <div className=\"col-lg-4 col-md-4 col-sm-12\">\r\n        <table>\r\n          <tbody>\r\n          {props.filteredTopics.slice(0, Math.ceil(props.filteredTopics.length / 3)).map((topic, index) => (\r\n            <table key={topic} className=\"home-table2\" style={{ marginTop:'20px', marginBottom:'20px', marginLeft:'65px', alignItems: 'center', width: '100%', minWidth: '340px', maxWidth: '340px' }}>\r\n              <thead>\r\n                <tr>\r\n                  <th style={{ display: 'flex', padding:'12px' }}>\r\n                    <span style={{ marginLeft:'8px' ,marginRight: 'auto' }}>{topic}</span>\r\n                    <a style={{ marginRight: '8px' }} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                      <FaAngleRight />\r\n                    </a>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td style={{ display: 'flex', padding:'12px' }}>\r\n                  <span style={{ marginLeft:'8px' , marginRight: 'auto' }}>Total Tweets</span>\r\n                  <span style={{ marginRight: '8px' }}>{props.record.topics[topic]}</span>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"col-lg-4 col-md-4 col-sm-12\">\r\n        <table>\r\n          <tbody>\r\n          {props.filteredTopics.slice(Math.ceil(props.filteredTopics.length / 3), Math.ceil(props.filteredTopics.length / 3 * 2)).map((topic, index) => (\r\n            <table key={topic} className=\"home-table2\" style={{ marginTop:'20px', marginBottom:'20px', marginLeft:'45px', alignItems: 'center', width: '100%', minWidth: '340px', maxWidth: '340px' }}>\r\n            <thead>\r\n                <tr>\r\n                  <th style={{ display: 'flex', padding:'12px' }}>\r\n                    <span style={{ marginLeft:'8px' ,marginRight: 'auto' }}>{topic}</span>\r\n                    <a style={{ marginRight: '8px' }} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                      <FaAngleRight />\r\n                    </a>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td style={{ display: 'flex', padding:'12px' }}>\r\n                  <span style={{ marginLeft:'8px' , marginRight: 'auto' }}>Total Tweets</span>\r\n                  <span style={{ marginRight: '8px' }}>{props.record.topics[topic]}</span>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n          </table>\r\n  ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"col-lg-4 col-md-4 col-sm-12\">\r\n        <table>\r\n          <tbody>\r\n          {props.filteredTopics.slice(Math.ceil(props.filteredTopics.length / 3 * 2)).map((topic, index) => (\r\n            <table key={topic} className=\"home-table2\" style={{ marginTop:'20px', marginBottom:'20px', marginLeft:'20px', alignItems: 'center', width: '100%', minWidth: '340px', maxWidth: '340px' }}>\r\n            <thead>\r\n                <tr>\r\n                  <th style={{ display: 'flex', padding:'12px' }}>\r\n                    <span style={{ marginLeft:'8px' ,marginRight: 'auto' }}>{topic}</span>\r\n                    <a style={{ marginRight: '8px' }} href=\"#\" onClick={() => redirectToTopicPage(topic)}>\r\n                      <FaAngleRight />\r\n                    </a>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td style={{ display: 'flex', padding:'12px' }}>\r\n                  <span style={{ marginLeft:'8px' , marginRight: 'auto' }}>Total Tweets</span>\r\n                  <span style={{ marginRight: '8px'}}>{props.record.topics[topic]}</span>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n          </table>\r\n  ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default function Sentiment() {\r\n  const [records, setRecords] = useState([]);\r\n  const [selectedLetter, setSelectedLetter] = useState('');\r\n  const [availableLetters, setAvailableLetters] = useState(new Set()); // Define availableLetters state\r\n\r\n  const handleLetterClick = (letter) => {\r\n    setSelectedLetter(letter);\r\n\r\n    let newAvailableLetters = new Set();\r\n    records.forEach((record) => {\r\n      const topicsArray = Object.keys(record.topics);\r\n      topicsArray.forEach((topic) => {\r\n        newAvailableLetters.add(topic[0].toUpperCase());\r\n      });\r\n    });\r\n    setAvailableLetters(newAvailableLetters);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5050/statistics_general/\");\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`An error occurred: ${response.statusText}`);\r\n        }\r\n\r\n        const records = await response.json();\r\n        setRecords(records);\r\n      } catch (error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n\r\n    getRecords();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let newAvailableLetters = new Set();\r\n    records.forEach((record) => {\r\n      const topicsArray = Object.keys(record.topics);\r\n      topicsArray.forEach((topic) => {\r\n        if (topic.toLowerCase().startsWith(selectedLetter.toLowerCase())) {\r\n          newAvailableLetters.add(topic[0].toUpperCase());\r\n        }\r\n      });\r\n    });\r\n    setAvailableLetters(newAvailableLetters);\r\n  }, [selectedLetter, records]);\r\n\r\n  function recordList() {\r\n    return records.map((record) => {\r\n      const topicsArray = Object.keys(record.topics);\r\n      const filteredTopics = selectedLetter\r\n        ? topicsArray.filter((topic) =>\r\n            topic.toLowerCase().startsWith(selectedLetter.toLowerCase())\r\n          )\r\n        : topicsArray;\r\n\r\n      return (\r\n        <Record\r\n          record={record}\r\n          key={record._id}\r\n          filteredTopics={filteredTopics}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          className={selectedLetter === '' ? 'active' : ''}\r\n          onClick={() => handleLetterClick('')}\r\n          style={{padding:'8px 19px'}}>\r\n          All\r\n        </button>\r\n        {Array.from({ length: 26 }, (_, index) => (\r\n          <button\r\n            key={index}\r\n            className={selectedLetter === String.fromCharCode(65 + index) ? 'active' : ''}\r\n            onClick={() => handleLetterClick(String.fromCharCode(65 + index))}\r\n            style={{padding:'8px 17.6px'}}>\r\n            {String.fromCharCode(65 + index)}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <br />\r\n      <div>\r\n        {recordList()}\r\n      </div>\r\n    </div>\r\n  );\r\n}",{"ruleId":"185","severity":1,"message":"186","line":7,"column":3,"nodeType":"187","messageId":"188","endLine":7,"endColumn":15},{"ruleId":"185","severity":1,"message":"189","line":8,"column":3,"nodeType":"187","messageId":"188","endLine":8,"endColumn":17},{"ruleId":"185","severity":1,"message":"190","line":10,"column":3,"nodeType":"187","messageId":"188","endLine":10,"endColumn":17},{"ruleId":"185","severity":1,"message":"191","line":14,"column":8,"nodeType":"187","messageId":"188","endLine":14,"endColumn":13},{"ruleId":"185","severity":1,"message":"192","line":15,"column":10,"nodeType":"187","messageId":"188","endLine":15,"endColumn":28},{"ruleId":"185","severity":1,"message":"193","line":17,"column":10,"nodeType":"187","messageId":"188","endLine":17,"endColumn":23},{"ruleId":"185","severity":1,"message":"194","line":18,"column":10,"nodeType":"187","messageId":"188","endLine":18,"endColumn":27},{"ruleId":"185","severity":1,"message":"195","line":22,"column":9,"nodeType":"187","messageId":"188","endLine":22,"endColumn":17},{"ruleId":"185","severity":1,"message":"196","line":23,"column":9,"nodeType":"187","messageId":"188","endLine":23,"endColumn":20},{"ruleId":"197","severity":1,"message":"198","line":57,"column":17,"nodeType":"199","endLine":57,"endColumn":97},{"ruleId":"185","severity":1,"message":"200","line":6,"column":39,"nodeType":"187","messageId":"188","endLine":6,"endColumn":45},{"ruleId":"185","severity":1,"message":"201","line":6,"column":79,"nodeType":"187","messageId":"188","endLine":6,"endColumn":84},{"ruleId":"185","severity":1,"message":"202","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":18},{"ruleId":"185","severity":1,"message":"203","line":2,"column":20,"nodeType":"187","messageId":"188","endLine":2,"endColumn":23},{"ruleId":"185","severity":1,"message":"204","line":2,"column":25,"nodeType":"187","messageId":"188","endLine":2,"endColumn":30},{"ruleId":"185","severity":1,"message":"205","line":2,"column":32,"nodeType":"187","messageId":"188","endLine":2,"endColumn":37},{"ruleId":"185","severity":1,"message":"200","line":2,"column":39,"nodeType":"187","messageId":"188","endLine":2,"endColumn":45},{"ruleId":"185","severity":1,"message":"206","line":2,"column":47,"nodeType":"187","messageId":"188","endLine":2,"endColumn":66},{"ruleId":"185","severity":1,"message":"207","line":2,"column":68,"nodeType":"187","messageId":"188","endLine":2,"endColumn":77},{"ruleId":"185","severity":1,"message":"201","line":2,"column":79,"nodeType":"187","messageId":"188","endLine":2,"endColumn":84},{"ruleId":"185","severity":1,"message":"208","line":2,"column":86,"nodeType":"187","messageId":"188","endLine":2,"endColumn":94},{"ruleId":"185","severity":1,"message":"209","line":2,"column":96,"nodeType":"187","messageId":"188","endLine":2,"endColumn":99},{"ruleId":"185","severity":1,"message":"210","line":2,"column":101,"nodeType":"187","messageId":"188","endLine":2,"endColumn":105},{"ruleId":"185","severity":1,"message":"211","line":2,"column":107,"nodeType":"187","messageId":"188","endLine":2,"endColumn":114},{"ruleId":"212","severity":1,"message":"213","line":113,"column":21,"nodeType":"199","endLine":113,"endColumn":63},{"ruleId":"197","severity":1,"message":"198","line":79,"column":9,"nodeType":"199","endLine":79,"endColumn":64},{"ruleId":"197","severity":1,"message":"198","line":84,"column":5,"nodeType":"199","endLine":84,"endColumn":67},{"ruleId":"197","severity":1,"message":"198","line":118,"column":9,"nodeType":"199","endLine":118,"endColumn":64},{"ruleId":"197","severity":1,"message":"198","line":123,"column":5,"nodeType":"199","endLine":123,"endColumn":67},{"ruleId":"185","severity":1,"message":"201","line":2,"column":79,"nodeType":"187","messageId":"188","endLine":2,"endColumn":84},{"ruleId":"185","severity":1,"message":"211","line":2,"column":86,"nodeType":"187","messageId":"188","endLine":2,"endColumn":93},{"ruleId":"185","severity":1,"message":"214","line":16,"column":10,"nodeType":"187","messageId":"188","endLine":16,"endColumn":23},{"ruleId":"185","severity":1,"message":"215","line":138,"column":11,"nodeType":"187","messageId":"188","endLine":138,"endColumn":17},{"ruleId":"185","severity":1,"message":"216","line":8,"column":9,"nodeType":"187","messageId":"188","endLine":8,"endColumn":18},{"ruleId":"185","severity":1,"message":"217","line":9,"column":9,"nodeType":"187","messageId":"188","endLine":9,"endColumn":19},{"ruleId":"197","severity":1,"message":"198","line":30,"column":21,"nodeType":"199","endLine":30,"endColumn":107},{"ruleId":"197","severity":1,"message":"198","line":58,"column":21,"nodeType":"199","endLine":58,"endColumn":107},{"ruleId":"197","severity":1,"message":"198","line":86,"column":21,"nodeType":"199","endLine":86,"endColumn":107},{"ruleId":"185","severity":1,"message":"218","line":113,"column":10,"nodeType":"187","messageId":"188","endLine":113,"endColumn":26},"no-unused-vars","'CHeaderBrand' is defined but never used.","Identifier","unusedVar","'CHeaderDivider' is defined but never used.","'CHeaderToggler' is defined but never used.","'CIcon' is defined but never used.","'cilMagnifyingGlass' is defined but never used.","'AppBreadcrumb' is defined but never used.","'AppHeaderDropdown' is defined but never used.","'dispatch' is assigned a value but never used.","'sidebarShow' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Legend' is defined but never used.","'Label' is defined but never used.","'BarChart' is defined but never used.","'Bar' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'ResponsiveContainer' is defined but never used.","'LabelList' is defined but never used.","'PieChart' is defined but never used.","'Pie' is defined but never used.","'Cell' is defined but never used.","'Tooltip' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'hashtagsArray' is assigned a value but never used.","'labelX' is assigned a value but never used.","'firstHalf' is assigned a value but never used.","'secondHalf' is assigned a value but never used.","'availableLetters' is assigned a value but never used."]